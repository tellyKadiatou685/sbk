
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model RegistrationRequest
 * 
 */
export type RegistrationRequest = $Result.DefaultSelection<Prisma.$RegistrationRequestPayload>
/**
 * Model DailyPartnerChoice
 * 
 */
export type DailyPartnerChoice = $Result.DefaultSelection<Prisma.$DailyPartnerChoicePayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Transaction
 * 
 */
export type Transaction = $Result.DefaultSelection<Prisma.$TransactionPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model DailySnapshot
 * 
 */
export type DailySnapshot = $Result.DefaultSelection<Prisma.$DailySnapshotPayload>
/**
 * Model SystemConfig
 * 
 */
export type SystemConfig = $Result.DefaultSelection<Prisma.$SystemConfigPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  ADMIN: 'ADMIN',
  SUPERVISEUR: 'SUPERVISEUR',
  PARTENAIRE: 'PARTENAIRE'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const UserStatus: {
  ACTIVE: 'ACTIVE',
  SUSPENDED: 'SUSPENDED',
  PENDING: 'PENDING',
  REJECTED: 'REJECTED'
};

export type UserStatus = (typeof UserStatus)[keyof typeof UserStatus]


export const TransactionType: {
  DEPOT: 'DEPOT',
  RETRAIT: 'RETRAIT',
  TRANSFERT_ENVOYE: 'TRANSFERT_ENVOYE',
  TRANSFERT_RECU: 'TRANSFERT_RECU',
  ALLOCATION_UV_MASTER: 'ALLOCATION_UV_MASTER',
  DEBUT_JOURNEE: 'DEBUT_JOURNEE',
  FIN_JOURNEE: 'FIN_JOURNEE',
  AUDIT_MODIFICATION: 'AUDIT_MODIFICATION',
  AUDIT_SUPPRESSION: 'AUDIT_SUPPRESSION'
};

export type TransactionType = (typeof TransactionType)[keyof typeof TransactionType]


export const AccountType: {
  LIQUIDE: 'LIQUIDE',
  ORANGE_MONEY: 'ORANGE_MONEY',
  WAVE: 'WAVE',
  UV_MASTER: 'UV_MASTER',
  AUTRES: 'AUTRES'
};

export type AccountType = (typeof AccountType)[keyof typeof AccountType]


export const NotificationType: {
  DEPOT_PARTENAIRE: 'DEPOT_PARTENAIRE',
  RETRAIT_PARTENAIRE: 'RETRAIT_PARTENAIRE',
  TRANSFERT_SUPERVISEUR: 'TRANSFERT_SUPERVISEUR',
  DEMANDE_INSCRIPTION: 'DEMANDE_INSCRIPTION',
  CREATION_UTILISATEUR: 'CREATION_UTILISATEUR',
  ALLOCATION_UV_MASTER: 'ALLOCATION_UV_MASTER',
  DEBUT_JOURNEE: 'DEBUT_JOURNEE',
  FIN_JOURNEE: 'FIN_JOURNEE',
  AUDIT_MODIFICATION: 'AUDIT_MODIFICATION',
  AUDIT_SUPPRESSION: 'AUDIT_SUPPRESSION'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type UserStatus = $Enums.UserStatus

export const UserStatus: typeof $Enums.UserStatus

export type TransactionType = $Enums.TransactionType

export const TransactionType: typeof $Enums.TransactionType

export type AccountType = $Enums.AccountType

export const AccountType: typeof $Enums.AccountType

export type NotificationType = $Enums.NotificationType

export const NotificationType: typeof $Enums.NotificationType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.registrationRequest`: Exposes CRUD operations for the **RegistrationRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RegistrationRequests
    * const registrationRequests = await prisma.registrationRequest.findMany()
    * ```
    */
  get registrationRequest(): Prisma.RegistrationRequestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.dailyPartnerChoice`: Exposes CRUD operations for the **DailyPartnerChoice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DailyPartnerChoices
    * const dailyPartnerChoices = await prisma.dailyPartnerChoice.findMany()
    * ```
    */
  get dailyPartnerChoice(): Prisma.DailyPartnerChoiceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.transaction`: Exposes CRUD operations for the **Transaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transaction.findMany()
    * ```
    */
  get transaction(): Prisma.TransactionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.dailySnapshot`: Exposes CRUD operations for the **DailySnapshot** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DailySnapshots
    * const dailySnapshots = await prisma.dailySnapshot.findMany()
    * ```
    */
  get dailySnapshot(): Prisma.DailySnapshotDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.systemConfig`: Exposes CRUD operations for the **SystemConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SystemConfigs
    * const systemConfigs = await prisma.systemConfig.findMany()
    * ```
    */
  get systemConfig(): Prisma.SystemConfigDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.14.0
   * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    RegistrationRequest: 'RegistrationRequest',
    DailyPartnerChoice: 'DailyPartnerChoice',
    Account: 'Account',
    Transaction: 'Transaction',
    Notification: 'Notification',
    DailySnapshot: 'DailySnapshot',
    SystemConfig: 'SystemConfig'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "registrationRequest" | "dailyPartnerChoice" | "account" | "transaction" | "notification" | "dailySnapshot" | "systemConfig"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      RegistrationRequest: {
        payload: Prisma.$RegistrationRequestPayload<ExtArgs>
        fields: Prisma.RegistrationRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RegistrationRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistrationRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RegistrationRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistrationRequestPayload>
          }
          findFirst: {
            args: Prisma.RegistrationRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistrationRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RegistrationRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistrationRequestPayload>
          }
          findMany: {
            args: Prisma.RegistrationRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistrationRequestPayload>[]
          }
          create: {
            args: Prisma.RegistrationRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistrationRequestPayload>
          }
          createMany: {
            args: Prisma.RegistrationRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RegistrationRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistrationRequestPayload>[]
          }
          delete: {
            args: Prisma.RegistrationRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistrationRequestPayload>
          }
          update: {
            args: Prisma.RegistrationRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistrationRequestPayload>
          }
          deleteMany: {
            args: Prisma.RegistrationRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RegistrationRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RegistrationRequestUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistrationRequestPayload>[]
          }
          upsert: {
            args: Prisma.RegistrationRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistrationRequestPayload>
          }
          aggregate: {
            args: Prisma.RegistrationRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRegistrationRequest>
          }
          groupBy: {
            args: Prisma.RegistrationRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<RegistrationRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.RegistrationRequestCountArgs<ExtArgs>
            result: $Utils.Optional<RegistrationRequestCountAggregateOutputType> | number
          }
        }
      }
      DailyPartnerChoice: {
        payload: Prisma.$DailyPartnerChoicePayload<ExtArgs>
        fields: Prisma.DailyPartnerChoiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DailyPartnerChoiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyPartnerChoicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DailyPartnerChoiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyPartnerChoicePayload>
          }
          findFirst: {
            args: Prisma.DailyPartnerChoiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyPartnerChoicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DailyPartnerChoiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyPartnerChoicePayload>
          }
          findMany: {
            args: Prisma.DailyPartnerChoiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyPartnerChoicePayload>[]
          }
          create: {
            args: Prisma.DailyPartnerChoiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyPartnerChoicePayload>
          }
          createMany: {
            args: Prisma.DailyPartnerChoiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DailyPartnerChoiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyPartnerChoicePayload>[]
          }
          delete: {
            args: Prisma.DailyPartnerChoiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyPartnerChoicePayload>
          }
          update: {
            args: Prisma.DailyPartnerChoiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyPartnerChoicePayload>
          }
          deleteMany: {
            args: Prisma.DailyPartnerChoiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DailyPartnerChoiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DailyPartnerChoiceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyPartnerChoicePayload>[]
          }
          upsert: {
            args: Prisma.DailyPartnerChoiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyPartnerChoicePayload>
          }
          aggregate: {
            args: Prisma.DailyPartnerChoiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDailyPartnerChoice>
          }
          groupBy: {
            args: Prisma.DailyPartnerChoiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<DailyPartnerChoiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.DailyPartnerChoiceCountArgs<ExtArgs>
            result: $Utils.Optional<DailyPartnerChoiceCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Transaction: {
        payload: Prisma.$TransactionPayload<ExtArgs>
        fields: Prisma.TransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findFirst: {
            args: Prisma.TransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findMany: {
            args: Prisma.TransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          create: {
            args: Prisma.TransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          createMany: {
            args: Prisma.TransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          delete: {
            args: Prisma.TransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          update: {
            args: Prisma.TransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          deleteMany: {
            args: Prisma.TransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TransactionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          upsert: {
            args: Prisma.TransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          aggregate: {
            args: Prisma.TransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransaction>
          }
          groupBy: {
            args: Prisma.TransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransactionCountArgs<ExtArgs>
            result: $Utils.Optional<TransactionCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      DailySnapshot: {
        payload: Prisma.$DailySnapshotPayload<ExtArgs>
        fields: Prisma.DailySnapshotFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DailySnapshotFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailySnapshotPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DailySnapshotFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailySnapshotPayload>
          }
          findFirst: {
            args: Prisma.DailySnapshotFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailySnapshotPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DailySnapshotFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailySnapshotPayload>
          }
          findMany: {
            args: Prisma.DailySnapshotFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailySnapshotPayload>[]
          }
          create: {
            args: Prisma.DailySnapshotCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailySnapshotPayload>
          }
          createMany: {
            args: Prisma.DailySnapshotCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DailySnapshotCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailySnapshotPayload>[]
          }
          delete: {
            args: Prisma.DailySnapshotDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailySnapshotPayload>
          }
          update: {
            args: Prisma.DailySnapshotUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailySnapshotPayload>
          }
          deleteMany: {
            args: Prisma.DailySnapshotDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DailySnapshotUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DailySnapshotUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailySnapshotPayload>[]
          }
          upsert: {
            args: Prisma.DailySnapshotUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailySnapshotPayload>
          }
          aggregate: {
            args: Prisma.DailySnapshotAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDailySnapshot>
          }
          groupBy: {
            args: Prisma.DailySnapshotGroupByArgs<ExtArgs>
            result: $Utils.Optional<DailySnapshotGroupByOutputType>[]
          }
          count: {
            args: Prisma.DailySnapshotCountArgs<ExtArgs>
            result: $Utils.Optional<DailySnapshotCountAggregateOutputType> | number
          }
        }
      }
      SystemConfig: {
        payload: Prisma.$SystemConfigPayload<ExtArgs>
        fields: Prisma.SystemConfigFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SystemConfigFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SystemConfigFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          findFirst: {
            args: Prisma.SystemConfigFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SystemConfigFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          findMany: {
            args: Prisma.SystemConfigFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>[]
          }
          create: {
            args: Prisma.SystemConfigCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          createMany: {
            args: Prisma.SystemConfigCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SystemConfigCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>[]
          }
          delete: {
            args: Prisma.SystemConfigDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          update: {
            args: Prisma.SystemConfigUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          deleteMany: {
            args: Prisma.SystemConfigDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SystemConfigUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SystemConfigUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>[]
          }
          upsert: {
            args: Prisma.SystemConfigUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          aggregate: {
            args: Prisma.SystemConfigAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSystemConfig>
          }
          groupBy: {
            args: Prisma.SystemConfigGroupByArgs<ExtArgs>
            result: $Utils.Optional<SystemConfigGroupByOutputType>[]
          }
          count: {
            args: Prisma.SystemConfigCountArgs<ExtArgs>
            result: $Utils.Optional<SystemConfigCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    registrationRequest?: RegistrationRequestOmit
    dailyPartnerChoice?: DailyPartnerChoiceOmit
    account?: AccountOmit
    transaction?: TransactionOmit
    notification?: NotificationOmit
    dailySnapshot?: DailySnapshotOmit
    systemConfig?: SystemConfigOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    accounts: number
    transactionsEnvoyees: number
    transactionsRecues: number
    transactionsPartenaire: number
    notifications: number
    demandesInscription: number
    dailySnapshots: number
    choixPartenaireQuotidiens: number
    choixSuperviseurQuotidiens: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    transactionsEnvoyees?: boolean | UserCountOutputTypeCountTransactionsEnvoyeesArgs
    transactionsRecues?: boolean | UserCountOutputTypeCountTransactionsRecuesArgs
    transactionsPartenaire?: boolean | UserCountOutputTypeCountTransactionsPartenaireArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    demandesInscription?: boolean | UserCountOutputTypeCountDemandesInscriptionArgs
    dailySnapshots?: boolean | UserCountOutputTypeCountDailySnapshotsArgs
    choixPartenaireQuotidiens?: boolean | UserCountOutputTypeCountChoixPartenaireQuotidiensArgs
    choixSuperviseurQuotidiens?: boolean | UserCountOutputTypeCountChoixSuperviseurQuotidiensArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTransactionsEnvoyeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTransactionsRecuesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTransactionsPartenaireArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDemandesInscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegistrationRequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDailySnapshotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DailySnapshotWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChoixPartenaireQuotidiensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DailyPartnerChoiceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChoixSuperviseurQuotidiensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DailyPartnerChoiceWhereInput
  }


  /**
   * Count Type AccountCountOutputType
   */

  export type AccountCountOutputType = {
    transactionsOrigine: number
    transactionsDestination: number
  }

  export type AccountCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transactionsOrigine?: boolean | AccountCountOutputTypeCountTransactionsOrigineArgs
    transactionsDestination?: boolean | AccountCountOutputTypeCountTransactionsDestinationArgs
  }

  // Custom InputTypes
  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountCountOutputType
     */
    select?: AccountCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeCountTransactionsOrigineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }

  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeCountTransactionsDestinationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    telephone: string | null
    code: string | null
    codeClair: string | null
    nomComplet: string | null
    adresse: string | null
    photo: string | null
    role: $Enums.UserRole | null
    status: $Enums.UserStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    telephone: string | null
    code: string | null
    codeClair: string | null
    nomComplet: string | null
    adresse: string | null
    photo: string | null
    role: $Enums.UserRole | null
    status: $Enums.UserStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    telephone: number
    code: number
    codeClair: number
    nomComplet: number
    adresse: number
    photo: number
    role: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    telephone?: true
    code?: true
    codeClair?: true
    nomComplet?: true
    adresse?: true
    photo?: true
    role?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    telephone?: true
    code?: true
    codeClair?: true
    nomComplet?: true
    adresse?: true
    photo?: true
    role?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    telephone?: true
    code?: true
    codeClair?: true
    nomComplet?: true
    adresse?: true
    photo?: true
    role?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    telephone: string
    code: string
    codeClair: string | null
    nomComplet: string
    adresse: string
    photo: string | null
    role: $Enums.UserRole
    status: $Enums.UserStatus
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    telephone?: boolean
    code?: boolean
    codeClair?: boolean
    nomComplet?: boolean
    adresse?: boolean
    photo?: boolean
    role?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    accounts?: boolean | User$accountsArgs<ExtArgs>
    transactionsEnvoyees?: boolean | User$transactionsEnvoyeesArgs<ExtArgs>
    transactionsRecues?: boolean | User$transactionsRecuesArgs<ExtArgs>
    transactionsPartenaire?: boolean | User$transactionsPartenaireArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    demandesInscription?: boolean | User$demandesInscriptionArgs<ExtArgs>
    dailySnapshots?: boolean | User$dailySnapshotsArgs<ExtArgs>
    choixPartenaireQuotidiens?: boolean | User$choixPartenaireQuotidiensArgs<ExtArgs>
    choixSuperviseurQuotidiens?: boolean | User$choixSuperviseurQuotidiensArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    telephone?: boolean
    code?: boolean
    codeClair?: boolean
    nomComplet?: boolean
    adresse?: boolean
    photo?: boolean
    role?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    telephone?: boolean
    code?: boolean
    codeClair?: boolean
    nomComplet?: boolean
    adresse?: boolean
    photo?: boolean
    role?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    telephone?: boolean
    code?: boolean
    codeClair?: boolean
    nomComplet?: boolean
    adresse?: boolean
    photo?: boolean
    role?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "telephone" | "code" | "codeClair" | "nomComplet" | "adresse" | "photo" | "role" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | User$accountsArgs<ExtArgs>
    transactionsEnvoyees?: boolean | User$transactionsEnvoyeesArgs<ExtArgs>
    transactionsRecues?: boolean | User$transactionsRecuesArgs<ExtArgs>
    transactionsPartenaire?: boolean | User$transactionsPartenaireArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    demandesInscription?: boolean | User$demandesInscriptionArgs<ExtArgs>
    dailySnapshots?: boolean | User$dailySnapshotsArgs<ExtArgs>
    choixPartenaireQuotidiens?: boolean | User$choixPartenaireQuotidiensArgs<ExtArgs>
    choixSuperviseurQuotidiens?: boolean | User$choixSuperviseurQuotidiensArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      transactionsEnvoyees: Prisma.$TransactionPayload<ExtArgs>[]
      transactionsRecues: Prisma.$TransactionPayload<ExtArgs>[]
      transactionsPartenaire: Prisma.$TransactionPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      demandesInscription: Prisma.$RegistrationRequestPayload<ExtArgs>[]
      dailySnapshots: Prisma.$DailySnapshotPayload<ExtArgs>[]
      choixPartenaireQuotidiens: Prisma.$DailyPartnerChoicePayload<ExtArgs>[]
      choixSuperviseurQuotidiens: Prisma.$DailyPartnerChoicePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      telephone: string
      code: string
      codeClair: string | null
      nomComplet: string
      adresse: string
      photo: string | null
      role: $Enums.UserRole
      status: $Enums.UserStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    transactionsEnvoyees<T extends User$transactionsEnvoyeesArgs<ExtArgs> = {}>(args?: Subset<T, User$transactionsEnvoyeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    transactionsRecues<T extends User$transactionsRecuesArgs<ExtArgs> = {}>(args?: Subset<T, User$transactionsRecuesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    transactionsPartenaire<T extends User$transactionsPartenaireArgs<ExtArgs> = {}>(args?: Subset<T, User$transactionsPartenaireArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    demandesInscription<T extends User$demandesInscriptionArgs<ExtArgs> = {}>(args?: Subset<T, User$demandesInscriptionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistrationRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    dailySnapshots<T extends User$dailySnapshotsArgs<ExtArgs> = {}>(args?: Subset<T, User$dailySnapshotsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailySnapshotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    choixPartenaireQuotidiens<T extends User$choixPartenaireQuotidiensArgs<ExtArgs> = {}>(args?: Subset<T, User$choixPartenaireQuotidiensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyPartnerChoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    choixSuperviseurQuotidiens<T extends User$choixSuperviseurQuotidiensArgs<ExtArgs> = {}>(args?: Subset<T, User$choixSuperviseurQuotidiensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyPartnerChoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly telephone: FieldRef<"User", 'String'>
    readonly code: FieldRef<"User", 'String'>
    readonly codeClair: FieldRef<"User", 'String'>
    readonly nomComplet: FieldRef<"User", 'String'>
    readonly adresse: FieldRef<"User", 'String'>
    readonly photo: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly status: FieldRef<"User", 'UserStatus'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.transactionsEnvoyees
   */
  export type User$transactionsEnvoyeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * User.transactionsRecues
   */
  export type User$transactionsRecuesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * User.transactionsPartenaire
   */
  export type User$transactionsPartenaireArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.demandesInscription
   */
  export type User$demandesInscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistrationRequest
     */
    select?: RegistrationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegistrationRequest
     */
    omit?: RegistrationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationRequestInclude<ExtArgs> | null
    where?: RegistrationRequestWhereInput
    orderBy?: RegistrationRequestOrderByWithRelationInput | RegistrationRequestOrderByWithRelationInput[]
    cursor?: RegistrationRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RegistrationRequestScalarFieldEnum | RegistrationRequestScalarFieldEnum[]
  }

  /**
   * User.dailySnapshots
   */
  export type User$dailySnapshotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailySnapshot
     */
    select?: DailySnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailySnapshot
     */
    omit?: DailySnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailySnapshotInclude<ExtArgs> | null
    where?: DailySnapshotWhereInput
    orderBy?: DailySnapshotOrderByWithRelationInput | DailySnapshotOrderByWithRelationInput[]
    cursor?: DailySnapshotWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DailySnapshotScalarFieldEnum | DailySnapshotScalarFieldEnum[]
  }

  /**
   * User.choixPartenaireQuotidiens
   */
  export type User$choixPartenaireQuotidiensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyPartnerChoice
     */
    select?: DailyPartnerChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyPartnerChoice
     */
    omit?: DailyPartnerChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyPartnerChoiceInclude<ExtArgs> | null
    where?: DailyPartnerChoiceWhereInput
    orderBy?: DailyPartnerChoiceOrderByWithRelationInput | DailyPartnerChoiceOrderByWithRelationInput[]
    cursor?: DailyPartnerChoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DailyPartnerChoiceScalarFieldEnum | DailyPartnerChoiceScalarFieldEnum[]
  }

  /**
   * User.choixSuperviseurQuotidiens
   */
  export type User$choixSuperviseurQuotidiensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyPartnerChoice
     */
    select?: DailyPartnerChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyPartnerChoice
     */
    omit?: DailyPartnerChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyPartnerChoiceInclude<ExtArgs> | null
    where?: DailyPartnerChoiceWhereInput
    orderBy?: DailyPartnerChoiceOrderByWithRelationInput | DailyPartnerChoiceOrderByWithRelationInput[]
    cursor?: DailyPartnerChoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DailyPartnerChoiceScalarFieldEnum | DailyPartnerChoiceScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model RegistrationRequest
   */

  export type AggregateRegistrationRequest = {
    _count: RegistrationRequestCountAggregateOutputType | null
    _min: RegistrationRequestMinAggregateOutputType | null
    _max: RegistrationRequestMaxAggregateOutputType | null
  }

  export type RegistrationRequestMinAggregateOutputType = {
    id: string | null
    telephone: string | null
    nomComplet: string | null
    adresse: string | null
    message: string | null
    status: $Enums.UserStatus | null
    codeGenere: string | null
    reviewedById: string | null
    reviewedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RegistrationRequestMaxAggregateOutputType = {
    id: string | null
    telephone: string | null
    nomComplet: string | null
    adresse: string | null
    message: string | null
    status: $Enums.UserStatus | null
    codeGenere: string | null
    reviewedById: string | null
    reviewedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RegistrationRequestCountAggregateOutputType = {
    id: number
    telephone: number
    nomComplet: number
    adresse: number
    message: number
    status: number
    codeGenere: number
    reviewedById: number
    reviewedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RegistrationRequestMinAggregateInputType = {
    id?: true
    telephone?: true
    nomComplet?: true
    adresse?: true
    message?: true
    status?: true
    codeGenere?: true
    reviewedById?: true
    reviewedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RegistrationRequestMaxAggregateInputType = {
    id?: true
    telephone?: true
    nomComplet?: true
    adresse?: true
    message?: true
    status?: true
    codeGenere?: true
    reviewedById?: true
    reviewedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RegistrationRequestCountAggregateInputType = {
    id?: true
    telephone?: true
    nomComplet?: true
    adresse?: true
    message?: true
    status?: true
    codeGenere?: true
    reviewedById?: true
    reviewedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RegistrationRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RegistrationRequest to aggregate.
     */
    where?: RegistrationRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegistrationRequests to fetch.
     */
    orderBy?: RegistrationRequestOrderByWithRelationInput | RegistrationRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RegistrationRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegistrationRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegistrationRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RegistrationRequests
    **/
    _count?: true | RegistrationRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RegistrationRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RegistrationRequestMaxAggregateInputType
  }

  export type GetRegistrationRequestAggregateType<T extends RegistrationRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateRegistrationRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRegistrationRequest[P]>
      : GetScalarType<T[P], AggregateRegistrationRequest[P]>
  }




  export type RegistrationRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegistrationRequestWhereInput
    orderBy?: RegistrationRequestOrderByWithAggregationInput | RegistrationRequestOrderByWithAggregationInput[]
    by: RegistrationRequestScalarFieldEnum[] | RegistrationRequestScalarFieldEnum
    having?: RegistrationRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RegistrationRequestCountAggregateInputType | true
    _min?: RegistrationRequestMinAggregateInputType
    _max?: RegistrationRequestMaxAggregateInputType
  }

  export type RegistrationRequestGroupByOutputType = {
    id: string
    telephone: string
    nomComplet: string
    adresse: string
    message: string | null
    status: $Enums.UserStatus
    codeGenere: string | null
    reviewedById: string | null
    reviewedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: RegistrationRequestCountAggregateOutputType | null
    _min: RegistrationRequestMinAggregateOutputType | null
    _max: RegistrationRequestMaxAggregateOutputType | null
  }

  type GetRegistrationRequestGroupByPayload<T extends RegistrationRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RegistrationRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RegistrationRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RegistrationRequestGroupByOutputType[P]>
            : GetScalarType<T[P], RegistrationRequestGroupByOutputType[P]>
        }
      >
    >


  export type RegistrationRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    telephone?: boolean
    nomComplet?: boolean
    adresse?: boolean
    message?: boolean
    status?: boolean
    codeGenere?: boolean
    reviewedById?: boolean
    reviewedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reviewedBy?: boolean | RegistrationRequest$reviewedByArgs<ExtArgs>
  }, ExtArgs["result"]["registrationRequest"]>

  export type RegistrationRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    telephone?: boolean
    nomComplet?: boolean
    adresse?: boolean
    message?: boolean
    status?: boolean
    codeGenere?: boolean
    reviewedById?: boolean
    reviewedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reviewedBy?: boolean | RegistrationRequest$reviewedByArgs<ExtArgs>
  }, ExtArgs["result"]["registrationRequest"]>

  export type RegistrationRequestSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    telephone?: boolean
    nomComplet?: boolean
    adresse?: boolean
    message?: boolean
    status?: boolean
    codeGenere?: boolean
    reviewedById?: boolean
    reviewedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reviewedBy?: boolean | RegistrationRequest$reviewedByArgs<ExtArgs>
  }, ExtArgs["result"]["registrationRequest"]>

  export type RegistrationRequestSelectScalar = {
    id?: boolean
    telephone?: boolean
    nomComplet?: boolean
    adresse?: boolean
    message?: boolean
    status?: boolean
    codeGenere?: boolean
    reviewedById?: boolean
    reviewedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RegistrationRequestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "telephone" | "nomComplet" | "adresse" | "message" | "status" | "codeGenere" | "reviewedById" | "reviewedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["registrationRequest"]>
  export type RegistrationRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reviewedBy?: boolean | RegistrationRequest$reviewedByArgs<ExtArgs>
  }
  export type RegistrationRequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reviewedBy?: boolean | RegistrationRequest$reviewedByArgs<ExtArgs>
  }
  export type RegistrationRequestIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reviewedBy?: boolean | RegistrationRequest$reviewedByArgs<ExtArgs>
  }

  export type $RegistrationRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RegistrationRequest"
    objects: {
      reviewedBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      telephone: string
      nomComplet: string
      adresse: string
      message: string | null
      status: $Enums.UserStatus
      codeGenere: string | null
      reviewedById: string | null
      reviewedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["registrationRequest"]>
    composites: {}
  }

  type RegistrationRequestGetPayload<S extends boolean | null | undefined | RegistrationRequestDefaultArgs> = $Result.GetResult<Prisma.$RegistrationRequestPayload, S>

  type RegistrationRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RegistrationRequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RegistrationRequestCountAggregateInputType | true
    }

  export interface RegistrationRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RegistrationRequest'], meta: { name: 'RegistrationRequest' } }
    /**
     * Find zero or one RegistrationRequest that matches the filter.
     * @param {RegistrationRequestFindUniqueArgs} args - Arguments to find a RegistrationRequest
     * @example
     * // Get one RegistrationRequest
     * const registrationRequest = await prisma.registrationRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RegistrationRequestFindUniqueArgs>(args: SelectSubset<T, RegistrationRequestFindUniqueArgs<ExtArgs>>): Prisma__RegistrationRequestClient<$Result.GetResult<Prisma.$RegistrationRequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RegistrationRequest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RegistrationRequestFindUniqueOrThrowArgs} args - Arguments to find a RegistrationRequest
     * @example
     * // Get one RegistrationRequest
     * const registrationRequest = await prisma.registrationRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RegistrationRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, RegistrationRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RegistrationRequestClient<$Result.GetResult<Prisma.$RegistrationRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RegistrationRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistrationRequestFindFirstArgs} args - Arguments to find a RegistrationRequest
     * @example
     * // Get one RegistrationRequest
     * const registrationRequest = await prisma.registrationRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RegistrationRequestFindFirstArgs>(args?: SelectSubset<T, RegistrationRequestFindFirstArgs<ExtArgs>>): Prisma__RegistrationRequestClient<$Result.GetResult<Prisma.$RegistrationRequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RegistrationRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistrationRequestFindFirstOrThrowArgs} args - Arguments to find a RegistrationRequest
     * @example
     * // Get one RegistrationRequest
     * const registrationRequest = await prisma.registrationRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RegistrationRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, RegistrationRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__RegistrationRequestClient<$Result.GetResult<Prisma.$RegistrationRequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RegistrationRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistrationRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RegistrationRequests
     * const registrationRequests = await prisma.registrationRequest.findMany()
     * 
     * // Get first 10 RegistrationRequests
     * const registrationRequests = await prisma.registrationRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const registrationRequestWithIdOnly = await prisma.registrationRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RegistrationRequestFindManyArgs>(args?: SelectSubset<T, RegistrationRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistrationRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RegistrationRequest.
     * @param {RegistrationRequestCreateArgs} args - Arguments to create a RegistrationRequest.
     * @example
     * // Create one RegistrationRequest
     * const RegistrationRequest = await prisma.registrationRequest.create({
     *   data: {
     *     // ... data to create a RegistrationRequest
     *   }
     * })
     * 
     */
    create<T extends RegistrationRequestCreateArgs>(args: SelectSubset<T, RegistrationRequestCreateArgs<ExtArgs>>): Prisma__RegistrationRequestClient<$Result.GetResult<Prisma.$RegistrationRequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RegistrationRequests.
     * @param {RegistrationRequestCreateManyArgs} args - Arguments to create many RegistrationRequests.
     * @example
     * // Create many RegistrationRequests
     * const registrationRequest = await prisma.registrationRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RegistrationRequestCreateManyArgs>(args?: SelectSubset<T, RegistrationRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RegistrationRequests and returns the data saved in the database.
     * @param {RegistrationRequestCreateManyAndReturnArgs} args - Arguments to create many RegistrationRequests.
     * @example
     * // Create many RegistrationRequests
     * const registrationRequest = await prisma.registrationRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RegistrationRequests and only return the `id`
     * const registrationRequestWithIdOnly = await prisma.registrationRequest.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RegistrationRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, RegistrationRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistrationRequestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RegistrationRequest.
     * @param {RegistrationRequestDeleteArgs} args - Arguments to delete one RegistrationRequest.
     * @example
     * // Delete one RegistrationRequest
     * const RegistrationRequest = await prisma.registrationRequest.delete({
     *   where: {
     *     // ... filter to delete one RegistrationRequest
     *   }
     * })
     * 
     */
    delete<T extends RegistrationRequestDeleteArgs>(args: SelectSubset<T, RegistrationRequestDeleteArgs<ExtArgs>>): Prisma__RegistrationRequestClient<$Result.GetResult<Prisma.$RegistrationRequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RegistrationRequest.
     * @param {RegistrationRequestUpdateArgs} args - Arguments to update one RegistrationRequest.
     * @example
     * // Update one RegistrationRequest
     * const registrationRequest = await prisma.registrationRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RegistrationRequestUpdateArgs>(args: SelectSubset<T, RegistrationRequestUpdateArgs<ExtArgs>>): Prisma__RegistrationRequestClient<$Result.GetResult<Prisma.$RegistrationRequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RegistrationRequests.
     * @param {RegistrationRequestDeleteManyArgs} args - Arguments to filter RegistrationRequests to delete.
     * @example
     * // Delete a few RegistrationRequests
     * const { count } = await prisma.registrationRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RegistrationRequestDeleteManyArgs>(args?: SelectSubset<T, RegistrationRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RegistrationRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistrationRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RegistrationRequests
     * const registrationRequest = await prisma.registrationRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RegistrationRequestUpdateManyArgs>(args: SelectSubset<T, RegistrationRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RegistrationRequests and returns the data updated in the database.
     * @param {RegistrationRequestUpdateManyAndReturnArgs} args - Arguments to update many RegistrationRequests.
     * @example
     * // Update many RegistrationRequests
     * const registrationRequest = await prisma.registrationRequest.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RegistrationRequests and only return the `id`
     * const registrationRequestWithIdOnly = await prisma.registrationRequest.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RegistrationRequestUpdateManyAndReturnArgs>(args: SelectSubset<T, RegistrationRequestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistrationRequestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RegistrationRequest.
     * @param {RegistrationRequestUpsertArgs} args - Arguments to update or create a RegistrationRequest.
     * @example
     * // Update or create a RegistrationRequest
     * const registrationRequest = await prisma.registrationRequest.upsert({
     *   create: {
     *     // ... data to create a RegistrationRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RegistrationRequest we want to update
     *   }
     * })
     */
    upsert<T extends RegistrationRequestUpsertArgs>(args: SelectSubset<T, RegistrationRequestUpsertArgs<ExtArgs>>): Prisma__RegistrationRequestClient<$Result.GetResult<Prisma.$RegistrationRequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RegistrationRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistrationRequestCountArgs} args - Arguments to filter RegistrationRequests to count.
     * @example
     * // Count the number of RegistrationRequests
     * const count = await prisma.registrationRequest.count({
     *   where: {
     *     // ... the filter for the RegistrationRequests we want to count
     *   }
     * })
    **/
    count<T extends RegistrationRequestCountArgs>(
      args?: Subset<T, RegistrationRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RegistrationRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RegistrationRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistrationRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RegistrationRequestAggregateArgs>(args: Subset<T, RegistrationRequestAggregateArgs>): Prisma.PrismaPromise<GetRegistrationRequestAggregateType<T>>

    /**
     * Group by RegistrationRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistrationRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RegistrationRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RegistrationRequestGroupByArgs['orderBy'] }
        : { orderBy?: RegistrationRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RegistrationRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegistrationRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RegistrationRequest model
   */
  readonly fields: RegistrationRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RegistrationRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RegistrationRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    reviewedBy<T extends RegistrationRequest$reviewedByArgs<ExtArgs> = {}>(args?: Subset<T, RegistrationRequest$reviewedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RegistrationRequest model
   */
  interface RegistrationRequestFieldRefs {
    readonly id: FieldRef<"RegistrationRequest", 'String'>
    readonly telephone: FieldRef<"RegistrationRequest", 'String'>
    readonly nomComplet: FieldRef<"RegistrationRequest", 'String'>
    readonly adresse: FieldRef<"RegistrationRequest", 'String'>
    readonly message: FieldRef<"RegistrationRequest", 'String'>
    readonly status: FieldRef<"RegistrationRequest", 'UserStatus'>
    readonly codeGenere: FieldRef<"RegistrationRequest", 'String'>
    readonly reviewedById: FieldRef<"RegistrationRequest", 'String'>
    readonly reviewedAt: FieldRef<"RegistrationRequest", 'DateTime'>
    readonly createdAt: FieldRef<"RegistrationRequest", 'DateTime'>
    readonly updatedAt: FieldRef<"RegistrationRequest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RegistrationRequest findUnique
   */
  export type RegistrationRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistrationRequest
     */
    select?: RegistrationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegistrationRequest
     */
    omit?: RegistrationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationRequestInclude<ExtArgs> | null
    /**
     * Filter, which RegistrationRequest to fetch.
     */
    where: RegistrationRequestWhereUniqueInput
  }

  /**
   * RegistrationRequest findUniqueOrThrow
   */
  export type RegistrationRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistrationRequest
     */
    select?: RegistrationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegistrationRequest
     */
    omit?: RegistrationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationRequestInclude<ExtArgs> | null
    /**
     * Filter, which RegistrationRequest to fetch.
     */
    where: RegistrationRequestWhereUniqueInput
  }

  /**
   * RegistrationRequest findFirst
   */
  export type RegistrationRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistrationRequest
     */
    select?: RegistrationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegistrationRequest
     */
    omit?: RegistrationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationRequestInclude<ExtArgs> | null
    /**
     * Filter, which RegistrationRequest to fetch.
     */
    where?: RegistrationRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegistrationRequests to fetch.
     */
    orderBy?: RegistrationRequestOrderByWithRelationInput | RegistrationRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RegistrationRequests.
     */
    cursor?: RegistrationRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegistrationRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegistrationRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RegistrationRequests.
     */
    distinct?: RegistrationRequestScalarFieldEnum | RegistrationRequestScalarFieldEnum[]
  }

  /**
   * RegistrationRequest findFirstOrThrow
   */
  export type RegistrationRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistrationRequest
     */
    select?: RegistrationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegistrationRequest
     */
    omit?: RegistrationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationRequestInclude<ExtArgs> | null
    /**
     * Filter, which RegistrationRequest to fetch.
     */
    where?: RegistrationRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegistrationRequests to fetch.
     */
    orderBy?: RegistrationRequestOrderByWithRelationInput | RegistrationRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RegistrationRequests.
     */
    cursor?: RegistrationRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegistrationRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegistrationRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RegistrationRequests.
     */
    distinct?: RegistrationRequestScalarFieldEnum | RegistrationRequestScalarFieldEnum[]
  }

  /**
   * RegistrationRequest findMany
   */
  export type RegistrationRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistrationRequest
     */
    select?: RegistrationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegistrationRequest
     */
    omit?: RegistrationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationRequestInclude<ExtArgs> | null
    /**
     * Filter, which RegistrationRequests to fetch.
     */
    where?: RegistrationRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegistrationRequests to fetch.
     */
    orderBy?: RegistrationRequestOrderByWithRelationInput | RegistrationRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RegistrationRequests.
     */
    cursor?: RegistrationRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegistrationRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegistrationRequests.
     */
    skip?: number
    distinct?: RegistrationRequestScalarFieldEnum | RegistrationRequestScalarFieldEnum[]
  }

  /**
   * RegistrationRequest create
   */
  export type RegistrationRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistrationRequest
     */
    select?: RegistrationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegistrationRequest
     */
    omit?: RegistrationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a RegistrationRequest.
     */
    data: XOR<RegistrationRequestCreateInput, RegistrationRequestUncheckedCreateInput>
  }

  /**
   * RegistrationRequest createMany
   */
  export type RegistrationRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RegistrationRequests.
     */
    data: RegistrationRequestCreateManyInput | RegistrationRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RegistrationRequest createManyAndReturn
   */
  export type RegistrationRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistrationRequest
     */
    select?: RegistrationRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RegistrationRequest
     */
    omit?: RegistrationRequestOmit<ExtArgs> | null
    /**
     * The data used to create many RegistrationRequests.
     */
    data: RegistrationRequestCreateManyInput | RegistrationRequestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationRequestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RegistrationRequest update
   */
  export type RegistrationRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistrationRequest
     */
    select?: RegistrationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegistrationRequest
     */
    omit?: RegistrationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a RegistrationRequest.
     */
    data: XOR<RegistrationRequestUpdateInput, RegistrationRequestUncheckedUpdateInput>
    /**
     * Choose, which RegistrationRequest to update.
     */
    where: RegistrationRequestWhereUniqueInput
  }

  /**
   * RegistrationRequest updateMany
   */
  export type RegistrationRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RegistrationRequests.
     */
    data: XOR<RegistrationRequestUpdateManyMutationInput, RegistrationRequestUncheckedUpdateManyInput>
    /**
     * Filter which RegistrationRequests to update
     */
    where?: RegistrationRequestWhereInput
    /**
     * Limit how many RegistrationRequests to update.
     */
    limit?: number
  }

  /**
   * RegistrationRequest updateManyAndReturn
   */
  export type RegistrationRequestUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistrationRequest
     */
    select?: RegistrationRequestSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RegistrationRequest
     */
    omit?: RegistrationRequestOmit<ExtArgs> | null
    /**
     * The data used to update RegistrationRequests.
     */
    data: XOR<RegistrationRequestUpdateManyMutationInput, RegistrationRequestUncheckedUpdateManyInput>
    /**
     * Filter which RegistrationRequests to update
     */
    where?: RegistrationRequestWhereInput
    /**
     * Limit how many RegistrationRequests to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationRequestIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RegistrationRequest upsert
   */
  export type RegistrationRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistrationRequest
     */
    select?: RegistrationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegistrationRequest
     */
    omit?: RegistrationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the RegistrationRequest to update in case it exists.
     */
    where: RegistrationRequestWhereUniqueInput
    /**
     * In case the RegistrationRequest found by the `where` argument doesn't exist, create a new RegistrationRequest with this data.
     */
    create: XOR<RegistrationRequestCreateInput, RegistrationRequestUncheckedCreateInput>
    /**
     * In case the RegistrationRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RegistrationRequestUpdateInput, RegistrationRequestUncheckedUpdateInput>
  }

  /**
   * RegistrationRequest delete
   */
  export type RegistrationRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistrationRequest
     */
    select?: RegistrationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegistrationRequest
     */
    omit?: RegistrationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationRequestInclude<ExtArgs> | null
    /**
     * Filter which RegistrationRequest to delete.
     */
    where: RegistrationRequestWhereUniqueInput
  }

  /**
   * RegistrationRequest deleteMany
   */
  export type RegistrationRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RegistrationRequests to delete
     */
    where?: RegistrationRequestWhereInput
    /**
     * Limit how many RegistrationRequests to delete.
     */
    limit?: number
  }

  /**
   * RegistrationRequest.reviewedBy
   */
  export type RegistrationRequest$reviewedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * RegistrationRequest without action
   */
  export type RegistrationRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistrationRequest
     */
    select?: RegistrationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegistrationRequest
     */
    omit?: RegistrationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationRequestInclude<ExtArgs> | null
  }


  /**
   * Model DailyPartnerChoice
   */

  export type AggregateDailyPartnerChoice = {
    _count: DailyPartnerChoiceCountAggregateOutputType | null
    _min: DailyPartnerChoiceMinAggregateOutputType | null
    _max: DailyPartnerChoiceMaxAggregateOutputType | null
  }

  export type DailyPartnerChoiceMinAggregateOutputType = {
    id: string | null
    date: Date | null
    partenaireId: string | null
    superviseurId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DailyPartnerChoiceMaxAggregateOutputType = {
    id: string | null
    date: Date | null
    partenaireId: string | null
    superviseurId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DailyPartnerChoiceCountAggregateOutputType = {
    id: number
    date: number
    partenaireId: number
    superviseurId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DailyPartnerChoiceMinAggregateInputType = {
    id?: true
    date?: true
    partenaireId?: true
    superviseurId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DailyPartnerChoiceMaxAggregateInputType = {
    id?: true
    date?: true
    partenaireId?: true
    superviseurId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DailyPartnerChoiceCountAggregateInputType = {
    id?: true
    date?: true
    partenaireId?: true
    superviseurId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DailyPartnerChoiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DailyPartnerChoice to aggregate.
     */
    where?: DailyPartnerChoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyPartnerChoices to fetch.
     */
    orderBy?: DailyPartnerChoiceOrderByWithRelationInput | DailyPartnerChoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DailyPartnerChoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyPartnerChoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyPartnerChoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DailyPartnerChoices
    **/
    _count?: true | DailyPartnerChoiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DailyPartnerChoiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DailyPartnerChoiceMaxAggregateInputType
  }

  export type GetDailyPartnerChoiceAggregateType<T extends DailyPartnerChoiceAggregateArgs> = {
        [P in keyof T & keyof AggregateDailyPartnerChoice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDailyPartnerChoice[P]>
      : GetScalarType<T[P], AggregateDailyPartnerChoice[P]>
  }




  export type DailyPartnerChoiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DailyPartnerChoiceWhereInput
    orderBy?: DailyPartnerChoiceOrderByWithAggregationInput | DailyPartnerChoiceOrderByWithAggregationInput[]
    by: DailyPartnerChoiceScalarFieldEnum[] | DailyPartnerChoiceScalarFieldEnum
    having?: DailyPartnerChoiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DailyPartnerChoiceCountAggregateInputType | true
    _min?: DailyPartnerChoiceMinAggregateInputType
    _max?: DailyPartnerChoiceMaxAggregateInputType
  }

  export type DailyPartnerChoiceGroupByOutputType = {
    id: string
    date: Date
    partenaireId: string
    superviseurId: string
    createdAt: Date
    updatedAt: Date
    _count: DailyPartnerChoiceCountAggregateOutputType | null
    _min: DailyPartnerChoiceMinAggregateOutputType | null
    _max: DailyPartnerChoiceMaxAggregateOutputType | null
  }

  type GetDailyPartnerChoiceGroupByPayload<T extends DailyPartnerChoiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DailyPartnerChoiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DailyPartnerChoiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DailyPartnerChoiceGroupByOutputType[P]>
            : GetScalarType<T[P], DailyPartnerChoiceGroupByOutputType[P]>
        }
      >
    >


  export type DailyPartnerChoiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    partenaireId?: boolean
    superviseurId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    partenaire?: boolean | UserDefaultArgs<ExtArgs>
    superviseur?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dailyPartnerChoice"]>

  export type DailyPartnerChoiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    partenaireId?: boolean
    superviseurId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    partenaire?: boolean | UserDefaultArgs<ExtArgs>
    superviseur?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dailyPartnerChoice"]>

  export type DailyPartnerChoiceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    partenaireId?: boolean
    superviseurId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    partenaire?: boolean | UserDefaultArgs<ExtArgs>
    superviseur?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dailyPartnerChoice"]>

  export type DailyPartnerChoiceSelectScalar = {
    id?: boolean
    date?: boolean
    partenaireId?: boolean
    superviseurId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DailyPartnerChoiceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "date" | "partenaireId" | "superviseurId" | "createdAt" | "updatedAt", ExtArgs["result"]["dailyPartnerChoice"]>
  export type DailyPartnerChoiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    partenaire?: boolean | UserDefaultArgs<ExtArgs>
    superviseur?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DailyPartnerChoiceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    partenaire?: boolean | UserDefaultArgs<ExtArgs>
    superviseur?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DailyPartnerChoiceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    partenaire?: boolean | UserDefaultArgs<ExtArgs>
    superviseur?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DailyPartnerChoicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DailyPartnerChoice"
    objects: {
      partenaire: Prisma.$UserPayload<ExtArgs>
      superviseur: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      date: Date
      partenaireId: string
      superviseurId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["dailyPartnerChoice"]>
    composites: {}
  }

  type DailyPartnerChoiceGetPayload<S extends boolean | null | undefined | DailyPartnerChoiceDefaultArgs> = $Result.GetResult<Prisma.$DailyPartnerChoicePayload, S>

  type DailyPartnerChoiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DailyPartnerChoiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DailyPartnerChoiceCountAggregateInputType | true
    }

  export interface DailyPartnerChoiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DailyPartnerChoice'], meta: { name: 'DailyPartnerChoice' } }
    /**
     * Find zero or one DailyPartnerChoice that matches the filter.
     * @param {DailyPartnerChoiceFindUniqueArgs} args - Arguments to find a DailyPartnerChoice
     * @example
     * // Get one DailyPartnerChoice
     * const dailyPartnerChoice = await prisma.dailyPartnerChoice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DailyPartnerChoiceFindUniqueArgs>(args: SelectSubset<T, DailyPartnerChoiceFindUniqueArgs<ExtArgs>>): Prisma__DailyPartnerChoiceClient<$Result.GetResult<Prisma.$DailyPartnerChoicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DailyPartnerChoice that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DailyPartnerChoiceFindUniqueOrThrowArgs} args - Arguments to find a DailyPartnerChoice
     * @example
     * // Get one DailyPartnerChoice
     * const dailyPartnerChoice = await prisma.dailyPartnerChoice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DailyPartnerChoiceFindUniqueOrThrowArgs>(args: SelectSubset<T, DailyPartnerChoiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DailyPartnerChoiceClient<$Result.GetResult<Prisma.$DailyPartnerChoicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DailyPartnerChoice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyPartnerChoiceFindFirstArgs} args - Arguments to find a DailyPartnerChoice
     * @example
     * // Get one DailyPartnerChoice
     * const dailyPartnerChoice = await prisma.dailyPartnerChoice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DailyPartnerChoiceFindFirstArgs>(args?: SelectSubset<T, DailyPartnerChoiceFindFirstArgs<ExtArgs>>): Prisma__DailyPartnerChoiceClient<$Result.GetResult<Prisma.$DailyPartnerChoicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DailyPartnerChoice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyPartnerChoiceFindFirstOrThrowArgs} args - Arguments to find a DailyPartnerChoice
     * @example
     * // Get one DailyPartnerChoice
     * const dailyPartnerChoice = await prisma.dailyPartnerChoice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DailyPartnerChoiceFindFirstOrThrowArgs>(args?: SelectSubset<T, DailyPartnerChoiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__DailyPartnerChoiceClient<$Result.GetResult<Prisma.$DailyPartnerChoicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DailyPartnerChoices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyPartnerChoiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DailyPartnerChoices
     * const dailyPartnerChoices = await prisma.dailyPartnerChoice.findMany()
     * 
     * // Get first 10 DailyPartnerChoices
     * const dailyPartnerChoices = await prisma.dailyPartnerChoice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dailyPartnerChoiceWithIdOnly = await prisma.dailyPartnerChoice.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DailyPartnerChoiceFindManyArgs>(args?: SelectSubset<T, DailyPartnerChoiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyPartnerChoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DailyPartnerChoice.
     * @param {DailyPartnerChoiceCreateArgs} args - Arguments to create a DailyPartnerChoice.
     * @example
     * // Create one DailyPartnerChoice
     * const DailyPartnerChoice = await prisma.dailyPartnerChoice.create({
     *   data: {
     *     // ... data to create a DailyPartnerChoice
     *   }
     * })
     * 
     */
    create<T extends DailyPartnerChoiceCreateArgs>(args: SelectSubset<T, DailyPartnerChoiceCreateArgs<ExtArgs>>): Prisma__DailyPartnerChoiceClient<$Result.GetResult<Prisma.$DailyPartnerChoicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DailyPartnerChoices.
     * @param {DailyPartnerChoiceCreateManyArgs} args - Arguments to create many DailyPartnerChoices.
     * @example
     * // Create many DailyPartnerChoices
     * const dailyPartnerChoice = await prisma.dailyPartnerChoice.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DailyPartnerChoiceCreateManyArgs>(args?: SelectSubset<T, DailyPartnerChoiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DailyPartnerChoices and returns the data saved in the database.
     * @param {DailyPartnerChoiceCreateManyAndReturnArgs} args - Arguments to create many DailyPartnerChoices.
     * @example
     * // Create many DailyPartnerChoices
     * const dailyPartnerChoice = await prisma.dailyPartnerChoice.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DailyPartnerChoices and only return the `id`
     * const dailyPartnerChoiceWithIdOnly = await prisma.dailyPartnerChoice.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DailyPartnerChoiceCreateManyAndReturnArgs>(args?: SelectSubset<T, DailyPartnerChoiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyPartnerChoicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DailyPartnerChoice.
     * @param {DailyPartnerChoiceDeleteArgs} args - Arguments to delete one DailyPartnerChoice.
     * @example
     * // Delete one DailyPartnerChoice
     * const DailyPartnerChoice = await prisma.dailyPartnerChoice.delete({
     *   where: {
     *     // ... filter to delete one DailyPartnerChoice
     *   }
     * })
     * 
     */
    delete<T extends DailyPartnerChoiceDeleteArgs>(args: SelectSubset<T, DailyPartnerChoiceDeleteArgs<ExtArgs>>): Prisma__DailyPartnerChoiceClient<$Result.GetResult<Prisma.$DailyPartnerChoicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DailyPartnerChoice.
     * @param {DailyPartnerChoiceUpdateArgs} args - Arguments to update one DailyPartnerChoice.
     * @example
     * // Update one DailyPartnerChoice
     * const dailyPartnerChoice = await prisma.dailyPartnerChoice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DailyPartnerChoiceUpdateArgs>(args: SelectSubset<T, DailyPartnerChoiceUpdateArgs<ExtArgs>>): Prisma__DailyPartnerChoiceClient<$Result.GetResult<Prisma.$DailyPartnerChoicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DailyPartnerChoices.
     * @param {DailyPartnerChoiceDeleteManyArgs} args - Arguments to filter DailyPartnerChoices to delete.
     * @example
     * // Delete a few DailyPartnerChoices
     * const { count } = await prisma.dailyPartnerChoice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DailyPartnerChoiceDeleteManyArgs>(args?: SelectSubset<T, DailyPartnerChoiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DailyPartnerChoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyPartnerChoiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DailyPartnerChoices
     * const dailyPartnerChoice = await prisma.dailyPartnerChoice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DailyPartnerChoiceUpdateManyArgs>(args: SelectSubset<T, DailyPartnerChoiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DailyPartnerChoices and returns the data updated in the database.
     * @param {DailyPartnerChoiceUpdateManyAndReturnArgs} args - Arguments to update many DailyPartnerChoices.
     * @example
     * // Update many DailyPartnerChoices
     * const dailyPartnerChoice = await prisma.dailyPartnerChoice.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DailyPartnerChoices and only return the `id`
     * const dailyPartnerChoiceWithIdOnly = await prisma.dailyPartnerChoice.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DailyPartnerChoiceUpdateManyAndReturnArgs>(args: SelectSubset<T, DailyPartnerChoiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyPartnerChoicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DailyPartnerChoice.
     * @param {DailyPartnerChoiceUpsertArgs} args - Arguments to update or create a DailyPartnerChoice.
     * @example
     * // Update or create a DailyPartnerChoice
     * const dailyPartnerChoice = await prisma.dailyPartnerChoice.upsert({
     *   create: {
     *     // ... data to create a DailyPartnerChoice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DailyPartnerChoice we want to update
     *   }
     * })
     */
    upsert<T extends DailyPartnerChoiceUpsertArgs>(args: SelectSubset<T, DailyPartnerChoiceUpsertArgs<ExtArgs>>): Prisma__DailyPartnerChoiceClient<$Result.GetResult<Prisma.$DailyPartnerChoicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DailyPartnerChoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyPartnerChoiceCountArgs} args - Arguments to filter DailyPartnerChoices to count.
     * @example
     * // Count the number of DailyPartnerChoices
     * const count = await prisma.dailyPartnerChoice.count({
     *   where: {
     *     // ... the filter for the DailyPartnerChoices we want to count
     *   }
     * })
    **/
    count<T extends DailyPartnerChoiceCountArgs>(
      args?: Subset<T, DailyPartnerChoiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DailyPartnerChoiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DailyPartnerChoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyPartnerChoiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DailyPartnerChoiceAggregateArgs>(args: Subset<T, DailyPartnerChoiceAggregateArgs>): Prisma.PrismaPromise<GetDailyPartnerChoiceAggregateType<T>>

    /**
     * Group by DailyPartnerChoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyPartnerChoiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DailyPartnerChoiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DailyPartnerChoiceGroupByArgs['orderBy'] }
        : { orderBy?: DailyPartnerChoiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DailyPartnerChoiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDailyPartnerChoiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DailyPartnerChoice model
   */
  readonly fields: DailyPartnerChoiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DailyPartnerChoice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DailyPartnerChoiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    partenaire<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    superviseur<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DailyPartnerChoice model
   */
  interface DailyPartnerChoiceFieldRefs {
    readonly id: FieldRef<"DailyPartnerChoice", 'String'>
    readonly date: FieldRef<"DailyPartnerChoice", 'DateTime'>
    readonly partenaireId: FieldRef<"DailyPartnerChoice", 'String'>
    readonly superviseurId: FieldRef<"DailyPartnerChoice", 'String'>
    readonly createdAt: FieldRef<"DailyPartnerChoice", 'DateTime'>
    readonly updatedAt: FieldRef<"DailyPartnerChoice", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DailyPartnerChoice findUnique
   */
  export type DailyPartnerChoiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyPartnerChoice
     */
    select?: DailyPartnerChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyPartnerChoice
     */
    omit?: DailyPartnerChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyPartnerChoiceInclude<ExtArgs> | null
    /**
     * Filter, which DailyPartnerChoice to fetch.
     */
    where: DailyPartnerChoiceWhereUniqueInput
  }

  /**
   * DailyPartnerChoice findUniqueOrThrow
   */
  export type DailyPartnerChoiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyPartnerChoice
     */
    select?: DailyPartnerChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyPartnerChoice
     */
    omit?: DailyPartnerChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyPartnerChoiceInclude<ExtArgs> | null
    /**
     * Filter, which DailyPartnerChoice to fetch.
     */
    where: DailyPartnerChoiceWhereUniqueInput
  }

  /**
   * DailyPartnerChoice findFirst
   */
  export type DailyPartnerChoiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyPartnerChoice
     */
    select?: DailyPartnerChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyPartnerChoice
     */
    omit?: DailyPartnerChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyPartnerChoiceInclude<ExtArgs> | null
    /**
     * Filter, which DailyPartnerChoice to fetch.
     */
    where?: DailyPartnerChoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyPartnerChoices to fetch.
     */
    orderBy?: DailyPartnerChoiceOrderByWithRelationInput | DailyPartnerChoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DailyPartnerChoices.
     */
    cursor?: DailyPartnerChoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyPartnerChoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyPartnerChoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DailyPartnerChoices.
     */
    distinct?: DailyPartnerChoiceScalarFieldEnum | DailyPartnerChoiceScalarFieldEnum[]
  }

  /**
   * DailyPartnerChoice findFirstOrThrow
   */
  export type DailyPartnerChoiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyPartnerChoice
     */
    select?: DailyPartnerChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyPartnerChoice
     */
    omit?: DailyPartnerChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyPartnerChoiceInclude<ExtArgs> | null
    /**
     * Filter, which DailyPartnerChoice to fetch.
     */
    where?: DailyPartnerChoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyPartnerChoices to fetch.
     */
    orderBy?: DailyPartnerChoiceOrderByWithRelationInput | DailyPartnerChoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DailyPartnerChoices.
     */
    cursor?: DailyPartnerChoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyPartnerChoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyPartnerChoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DailyPartnerChoices.
     */
    distinct?: DailyPartnerChoiceScalarFieldEnum | DailyPartnerChoiceScalarFieldEnum[]
  }

  /**
   * DailyPartnerChoice findMany
   */
  export type DailyPartnerChoiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyPartnerChoice
     */
    select?: DailyPartnerChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyPartnerChoice
     */
    omit?: DailyPartnerChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyPartnerChoiceInclude<ExtArgs> | null
    /**
     * Filter, which DailyPartnerChoices to fetch.
     */
    where?: DailyPartnerChoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyPartnerChoices to fetch.
     */
    orderBy?: DailyPartnerChoiceOrderByWithRelationInput | DailyPartnerChoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DailyPartnerChoices.
     */
    cursor?: DailyPartnerChoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyPartnerChoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyPartnerChoices.
     */
    skip?: number
    distinct?: DailyPartnerChoiceScalarFieldEnum | DailyPartnerChoiceScalarFieldEnum[]
  }

  /**
   * DailyPartnerChoice create
   */
  export type DailyPartnerChoiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyPartnerChoice
     */
    select?: DailyPartnerChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyPartnerChoice
     */
    omit?: DailyPartnerChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyPartnerChoiceInclude<ExtArgs> | null
    /**
     * The data needed to create a DailyPartnerChoice.
     */
    data: XOR<DailyPartnerChoiceCreateInput, DailyPartnerChoiceUncheckedCreateInput>
  }

  /**
   * DailyPartnerChoice createMany
   */
  export type DailyPartnerChoiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DailyPartnerChoices.
     */
    data: DailyPartnerChoiceCreateManyInput | DailyPartnerChoiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DailyPartnerChoice createManyAndReturn
   */
  export type DailyPartnerChoiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyPartnerChoice
     */
    select?: DailyPartnerChoiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DailyPartnerChoice
     */
    omit?: DailyPartnerChoiceOmit<ExtArgs> | null
    /**
     * The data used to create many DailyPartnerChoices.
     */
    data: DailyPartnerChoiceCreateManyInput | DailyPartnerChoiceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyPartnerChoiceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DailyPartnerChoice update
   */
  export type DailyPartnerChoiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyPartnerChoice
     */
    select?: DailyPartnerChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyPartnerChoice
     */
    omit?: DailyPartnerChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyPartnerChoiceInclude<ExtArgs> | null
    /**
     * The data needed to update a DailyPartnerChoice.
     */
    data: XOR<DailyPartnerChoiceUpdateInput, DailyPartnerChoiceUncheckedUpdateInput>
    /**
     * Choose, which DailyPartnerChoice to update.
     */
    where: DailyPartnerChoiceWhereUniqueInput
  }

  /**
   * DailyPartnerChoice updateMany
   */
  export type DailyPartnerChoiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DailyPartnerChoices.
     */
    data: XOR<DailyPartnerChoiceUpdateManyMutationInput, DailyPartnerChoiceUncheckedUpdateManyInput>
    /**
     * Filter which DailyPartnerChoices to update
     */
    where?: DailyPartnerChoiceWhereInput
    /**
     * Limit how many DailyPartnerChoices to update.
     */
    limit?: number
  }

  /**
   * DailyPartnerChoice updateManyAndReturn
   */
  export type DailyPartnerChoiceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyPartnerChoice
     */
    select?: DailyPartnerChoiceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DailyPartnerChoice
     */
    omit?: DailyPartnerChoiceOmit<ExtArgs> | null
    /**
     * The data used to update DailyPartnerChoices.
     */
    data: XOR<DailyPartnerChoiceUpdateManyMutationInput, DailyPartnerChoiceUncheckedUpdateManyInput>
    /**
     * Filter which DailyPartnerChoices to update
     */
    where?: DailyPartnerChoiceWhereInput
    /**
     * Limit how many DailyPartnerChoices to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyPartnerChoiceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DailyPartnerChoice upsert
   */
  export type DailyPartnerChoiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyPartnerChoice
     */
    select?: DailyPartnerChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyPartnerChoice
     */
    omit?: DailyPartnerChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyPartnerChoiceInclude<ExtArgs> | null
    /**
     * The filter to search for the DailyPartnerChoice to update in case it exists.
     */
    where: DailyPartnerChoiceWhereUniqueInput
    /**
     * In case the DailyPartnerChoice found by the `where` argument doesn't exist, create a new DailyPartnerChoice with this data.
     */
    create: XOR<DailyPartnerChoiceCreateInput, DailyPartnerChoiceUncheckedCreateInput>
    /**
     * In case the DailyPartnerChoice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DailyPartnerChoiceUpdateInput, DailyPartnerChoiceUncheckedUpdateInput>
  }

  /**
   * DailyPartnerChoice delete
   */
  export type DailyPartnerChoiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyPartnerChoice
     */
    select?: DailyPartnerChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyPartnerChoice
     */
    omit?: DailyPartnerChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyPartnerChoiceInclude<ExtArgs> | null
    /**
     * Filter which DailyPartnerChoice to delete.
     */
    where: DailyPartnerChoiceWhereUniqueInput
  }

  /**
   * DailyPartnerChoice deleteMany
   */
  export type DailyPartnerChoiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DailyPartnerChoices to delete
     */
    where?: DailyPartnerChoiceWhereInput
    /**
     * Limit how many DailyPartnerChoices to delete.
     */
    limit?: number
  }

  /**
   * DailyPartnerChoice without action
   */
  export type DailyPartnerChoiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyPartnerChoice
     */
    select?: DailyPartnerChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyPartnerChoice
     */
    omit?: DailyPartnerChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyPartnerChoiceInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    balance: number | null
    initialBalance: number | null
    previousInitialBalance: number | null
  }

  export type AccountSumAggregateOutputType = {
    balance: bigint | null
    initialBalance: bigint | null
    previousInitialBalance: bigint | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    type: $Enums.AccountType | null
    balance: bigint | null
    initialBalance: bigint | null
    previousInitialBalance: bigint | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    type: $Enums.AccountType | null
    balance: bigint | null
    initialBalance: bigint | null
    previousInitialBalance: bigint | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    type: number
    balance: number
    initialBalance: number
    previousInitialBalance: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    balance?: true
    initialBalance?: true
    previousInitialBalance?: true
  }

  export type AccountSumAggregateInputType = {
    balance?: true
    initialBalance?: true
    previousInitialBalance?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    type?: true
    balance?: true
    initialBalance?: true
    previousInitialBalance?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    type?: true
    balance?: true
    initialBalance?: true
    previousInitialBalance?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    type?: true
    balance?: true
    initialBalance?: true
    previousInitialBalance?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    type: $Enums.AccountType
    balance: bigint
    initialBalance: bigint
    previousInitialBalance: bigint
    userId: string
    createdAt: Date
    updatedAt: Date
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    balance?: boolean
    initialBalance?: boolean
    previousInitialBalance?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    transactionsOrigine?: boolean | Account$transactionsOrigineArgs<ExtArgs>
    transactionsDestination?: boolean | Account$transactionsDestinationArgs<ExtArgs>
    _count?: boolean | AccountCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    balance?: boolean
    initialBalance?: boolean
    previousInitialBalance?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    balance?: boolean
    initialBalance?: boolean
    previousInitialBalance?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    type?: boolean
    balance?: boolean
    initialBalance?: boolean
    previousInitialBalance?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "balance" | "initialBalance" | "previousInitialBalance" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    transactionsOrigine?: boolean | Account$transactionsOrigineArgs<ExtArgs>
    transactionsDestination?: boolean | Account$transactionsDestinationArgs<ExtArgs>
    _count?: boolean | AccountCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      transactionsOrigine: Prisma.$TransactionPayload<ExtArgs>[]
      transactionsDestination: Prisma.$TransactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: $Enums.AccountType
      balance: bigint
      initialBalance: bigint
      previousInitialBalance: bigint
      userId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts and returns the data updated in the database.
     * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    transactionsOrigine<T extends Account$transactionsOrigineArgs<ExtArgs> = {}>(args?: Subset<T, Account$transactionsOrigineArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    transactionsDestination<T extends Account$transactionsDestinationArgs<ExtArgs> = {}>(args?: Subset<T, Account$transactionsDestinationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly type: FieldRef<"Account", 'AccountType'>
    readonly balance: FieldRef<"Account", 'BigInt'>
    readonly initialBalance: FieldRef<"Account", 'BigInt'>
    readonly previousInitialBalance: FieldRef<"Account", 'BigInt'>
    readonly userId: FieldRef<"Account", 'String'>
    readonly createdAt: FieldRef<"Account", 'DateTime'>
    readonly updatedAt: FieldRef<"Account", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account updateManyAndReturn
   */
  export type AccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account.transactionsOrigine
   */
  export type Account$transactionsOrigineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Account.transactionsDestination
   */
  export type Account$transactionsDestinationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Transaction
   */

  export type AggregateTransaction = {
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  export type TransactionAvgAggregateOutputType = {
    montant: number | null
  }

  export type TransactionSumAggregateOutputType = {
    montant: bigint | null
  }

  export type TransactionMinAggregateOutputType = {
    id: string | null
    montant: bigint | null
    type: $Enums.TransactionType | null
    description: string | null
    archived: boolean | null
    archivedAt: Date | null
    envoyeurId: string | null
    destinataireId: string | null
    partenaireId: string | null
    compteOrigineId: string | null
    compteDestinationId: string | null
    isValidated: boolean | null
    metadata: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransactionMaxAggregateOutputType = {
    id: string | null
    montant: bigint | null
    type: $Enums.TransactionType | null
    description: string | null
    archived: boolean | null
    archivedAt: Date | null
    envoyeurId: string | null
    destinataireId: string | null
    partenaireId: string | null
    compteOrigineId: string | null
    compteDestinationId: string | null
    isValidated: boolean | null
    metadata: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransactionCountAggregateOutputType = {
    id: number
    montant: number
    type: number
    description: number
    archived: number
    archivedAt: number
    envoyeurId: number
    destinataireId: number
    partenaireId: number
    compteOrigineId: number
    compteDestinationId: number
    isValidated: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TransactionAvgAggregateInputType = {
    montant?: true
  }

  export type TransactionSumAggregateInputType = {
    montant?: true
  }

  export type TransactionMinAggregateInputType = {
    id?: true
    montant?: true
    type?: true
    description?: true
    archived?: true
    archivedAt?: true
    envoyeurId?: true
    destinataireId?: true
    partenaireId?: true
    compteOrigineId?: true
    compteDestinationId?: true
    isValidated?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransactionMaxAggregateInputType = {
    id?: true
    montant?: true
    type?: true
    description?: true
    archived?: true
    archivedAt?: true
    envoyeurId?: true
    destinataireId?: true
    partenaireId?: true
    compteOrigineId?: true
    compteDestinationId?: true
    isValidated?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransactionCountAggregateInputType = {
    id?: true
    montant?: true
    type?: true
    description?: true
    archived?: true
    archivedAt?: true
    envoyeurId?: true
    destinataireId?: true
    partenaireId?: true
    compteOrigineId?: true
    compteDestinationId?: true
    isValidated?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transaction to aggregate.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transactions
    **/
    _count?: true | TransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionMaxAggregateInputType
  }

  export type GetTransactionAggregateType<T extends TransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransaction[P]>
      : GetScalarType<T[P], AggregateTransaction[P]>
  }




  export type TransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithAggregationInput | TransactionOrderByWithAggregationInput[]
    by: TransactionScalarFieldEnum[] | TransactionScalarFieldEnum
    having?: TransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionCountAggregateInputType | true
    _avg?: TransactionAvgAggregateInputType
    _sum?: TransactionSumAggregateInputType
    _min?: TransactionMinAggregateInputType
    _max?: TransactionMaxAggregateInputType
  }

  export type TransactionGroupByOutputType = {
    id: string
    montant: bigint
    type: $Enums.TransactionType
    description: string | null
    archived: boolean | null
    archivedAt: Date | null
    envoyeurId: string
    destinataireId: string | null
    partenaireId: string | null
    compteOrigineId: string | null
    compteDestinationId: string | null
    isValidated: boolean
    metadata: string | null
    createdAt: Date
    updatedAt: Date
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  type GetTransactionGroupByPayload<T extends TransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionGroupByOutputType[P]>
        }
      >
    >


  export type TransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    montant?: boolean
    type?: boolean
    description?: boolean
    archived?: boolean
    archivedAt?: boolean
    envoyeurId?: boolean
    destinataireId?: boolean
    partenaireId?: boolean
    compteOrigineId?: boolean
    compteDestinationId?: boolean
    isValidated?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    envoyeur?: boolean | UserDefaultArgs<ExtArgs>
    destinataire?: boolean | Transaction$destinataireArgs<ExtArgs>
    partenaire?: boolean | Transaction$partenaireArgs<ExtArgs>
    compteOrigine?: boolean | Transaction$compteOrigineArgs<ExtArgs>
    compteDestination?: boolean | Transaction$compteDestinationArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    montant?: boolean
    type?: boolean
    description?: boolean
    archived?: boolean
    archivedAt?: boolean
    envoyeurId?: boolean
    destinataireId?: boolean
    partenaireId?: boolean
    compteOrigineId?: boolean
    compteDestinationId?: boolean
    isValidated?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    envoyeur?: boolean | UserDefaultArgs<ExtArgs>
    destinataire?: boolean | Transaction$destinataireArgs<ExtArgs>
    partenaire?: boolean | Transaction$partenaireArgs<ExtArgs>
    compteOrigine?: boolean | Transaction$compteOrigineArgs<ExtArgs>
    compteDestination?: boolean | Transaction$compteDestinationArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    montant?: boolean
    type?: boolean
    description?: boolean
    archived?: boolean
    archivedAt?: boolean
    envoyeurId?: boolean
    destinataireId?: boolean
    partenaireId?: boolean
    compteOrigineId?: boolean
    compteDestinationId?: boolean
    isValidated?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    envoyeur?: boolean | UserDefaultArgs<ExtArgs>
    destinataire?: boolean | Transaction$destinataireArgs<ExtArgs>
    partenaire?: boolean | Transaction$partenaireArgs<ExtArgs>
    compteOrigine?: boolean | Transaction$compteOrigineArgs<ExtArgs>
    compteDestination?: boolean | Transaction$compteDestinationArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectScalar = {
    id?: boolean
    montant?: boolean
    type?: boolean
    description?: boolean
    archived?: boolean
    archivedAt?: boolean
    envoyeurId?: boolean
    destinataireId?: boolean
    partenaireId?: boolean
    compteOrigineId?: boolean
    compteDestinationId?: boolean
    isValidated?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TransactionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "montant" | "type" | "description" | "archived" | "archivedAt" | "envoyeurId" | "destinataireId" | "partenaireId" | "compteOrigineId" | "compteDestinationId" | "isValidated" | "metadata" | "createdAt" | "updatedAt", ExtArgs["result"]["transaction"]>
  export type TransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    envoyeur?: boolean | UserDefaultArgs<ExtArgs>
    destinataire?: boolean | Transaction$destinataireArgs<ExtArgs>
    partenaire?: boolean | Transaction$partenaireArgs<ExtArgs>
    compteOrigine?: boolean | Transaction$compteOrigineArgs<ExtArgs>
    compteDestination?: boolean | Transaction$compteDestinationArgs<ExtArgs>
  }
  export type TransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    envoyeur?: boolean | UserDefaultArgs<ExtArgs>
    destinataire?: boolean | Transaction$destinataireArgs<ExtArgs>
    partenaire?: boolean | Transaction$partenaireArgs<ExtArgs>
    compteOrigine?: boolean | Transaction$compteOrigineArgs<ExtArgs>
    compteDestination?: boolean | Transaction$compteDestinationArgs<ExtArgs>
  }
  export type TransactionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    envoyeur?: boolean | UserDefaultArgs<ExtArgs>
    destinataire?: boolean | Transaction$destinataireArgs<ExtArgs>
    partenaire?: boolean | Transaction$partenaireArgs<ExtArgs>
    compteOrigine?: boolean | Transaction$compteOrigineArgs<ExtArgs>
    compteDestination?: boolean | Transaction$compteDestinationArgs<ExtArgs>
  }

  export type $TransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transaction"
    objects: {
      envoyeur: Prisma.$UserPayload<ExtArgs>
      destinataire: Prisma.$UserPayload<ExtArgs> | null
      partenaire: Prisma.$UserPayload<ExtArgs> | null
      compteOrigine: Prisma.$AccountPayload<ExtArgs> | null
      compteDestination: Prisma.$AccountPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      montant: bigint
      type: $Enums.TransactionType
      description: string | null
      archived: boolean | null
      archivedAt: Date | null
      envoyeurId: string
      destinataireId: string | null
      partenaireId: string | null
      compteOrigineId: string | null
      compteDestinationId: string | null
      isValidated: boolean
      metadata: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["transaction"]>
    composites: {}
  }

  type TransactionGetPayload<S extends boolean | null | undefined | TransactionDefaultArgs> = $Result.GetResult<Prisma.$TransactionPayload, S>

  type TransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TransactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TransactionCountAggregateInputType | true
    }

  export interface TransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transaction'], meta: { name: 'Transaction' } }
    /**
     * Find zero or one Transaction that matches the filter.
     * @param {TransactionFindUniqueArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransactionFindUniqueArgs>(args: SelectSubset<T, TransactionFindUniqueArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Transaction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TransactionFindUniqueOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, TransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransactionFindFirstArgs>(args?: SelectSubset<T, TransactionFindFirstArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, TransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transaction.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionWithIdOnly = await prisma.transaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransactionFindManyArgs>(args?: SelectSubset<T, TransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Transaction.
     * @param {TransactionCreateArgs} args - Arguments to create a Transaction.
     * @example
     * // Create one Transaction
     * const Transaction = await prisma.transaction.create({
     *   data: {
     *     // ... data to create a Transaction
     *   }
     * })
     * 
     */
    create<T extends TransactionCreateArgs>(args: SelectSubset<T, TransactionCreateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Transactions.
     * @param {TransactionCreateManyArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransactionCreateManyArgs>(args?: SelectSubset<T, TransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Transactions and returns the data saved in the database.
     * @param {TransactionCreateManyAndReturnArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Transactions and only return the `id`
     * const transactionWithIdOnly = await prisma.transaction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, TransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Transaction.
     * @param {TransactionDeleteArgs} args - Arguments to delete one Transaction.
     * @example
     * // Delete one Transaction
     * const Transaction = await prisma.transaction.delete({
     *   where: {
     *     // ... filter to delete one Transaction
     *   }
     * })
     * 
     */
    delete<T extends TransactionDeleteArgs>(args: SelectSubset<T, TransactionDeleteArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Transaction.
     * @param {TransactionUpdateArgs} args - Arguments to update one Transaction.
     * @example
     * // Update one Transaction
     * const transaction = await prisma.transaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransactionUpdateArgs>(args: SelectSubset<T, TransactionUpdateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Transactions.
     * @param {TransactionDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransactionDeleteManyArgs>(args?: SelectSubset<T, TransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransactionUpdateManyArgs>(args: SelectSubset<T, TransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions and returns the data updated in the database.
     * @param {TransactionUpdateManyAndReturnArgs} args - Arguments to update many Transactions.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Transactions and only return the `id`
     * const transactionWithIdOnly = await prisma.transaction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TransactionUpdateManyAndReturnArgs>(args: SelectSubset<T, TransactionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Transaction.
     * @param {TransactionUpsertArgs} args - Arguments to update or create a Transaction.
     * @example
     * // Update or create a Transaction
     * const transaction = await prisma.transaction.upsert({
     *   create: {
     *     // ... data to create a Transaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transaction we want to update
     *   }
     * })
     */
    upsert<T extends TransactionUpsertArgs>(args: SelectSubset<T, TransactionUpsertArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transaction.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends TransactionCountArgs>(
      args?: Subset<T, TransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionAggregateArgs>(args: Subset<T, TransactionAggregateArgs>): Prisma.PrismaPromise<GetTransactionAggregateType<T>>

    /**
     * Group by Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionGroupByArgs['orderBy'] }
        : { orderBy?: TransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transaction model
   */
  readonly fields: TransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    envoyeur<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    destinataire<T extends Transaction$destinataireArgs<ExtArgs> = {}>(args?: Subset<T, Transaction$destinataireArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    partenaire<T extends Transaction$partenaireArgs<ExtArgs> = {}>(args?: Subset<T, Transaction$partenaireArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    compteOrigine<T extends Transaction$compteOrigineArgs<ExtArgs> = {}>(args?: Subset<T, Transaction$compteOrigineArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    compteDestination<T extends Transaction$compteDestinationArgs<ExtArgs> = {}>(args?: Subset<T, Transaction$compteDestinationArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Transaction model
   */
  interface TransactionFieldRefs {
    readonly id: FieldRef<"Transaction", 'String'>
    readonly montant: FieldRef<"Transaction", 'BigInt'>
    readonly type: FieldRef<"Transaction", 'TransactionType'>
    readonly description: FieldRef<"Transaction", 'String'>
    readonly archived: FieldRef<"Transaction", 'Boolean'>
    readonly archivedAt: FieldRef<"Transaction", 'DateTime'>
    readonly envoyeurId: FieldRef<"Transaction", 'String'>
    readonly destinataireId: FieldRef<"Transaction", 'String'>
    readonly partenaireId: FieldRef<"Transaction", 'String'>
    readonly compteOrigineId: FieldRef<"Transaction", 'String'>
    readonly compteDestinationId: FieldRef<"Transaction", 'String'>
    readonly isValidated: FieldRef<"Transaction", 'Boolean'>
    readonly metadata: FieldRef<"Transaction", 'String'>
    readonly createdAt: FieldRef<"Transaction", 'DateTime'>
    readonly updatedAt: FieldRef<"Transaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Transaction findUnique
   */
  export type TransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findUniqueOrThrow
   */
  export type TransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findFirst
   */
  export type TransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findFirstOrThrow
   */
  export type TransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findMany
   */
  export type TransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transactions to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction create
   */
  export type TransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a Transaction.
     */
    data: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
  }

  /**
   * Transaction createMany
   */
  export type TransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Transaction createManyAndReturn
   */
  export type TransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transaction update
   */
  export type TransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a Transaction.
     */
    data: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
    /**
     * Choose, which Transaction to update.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction updateMany
   */
  export type TransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to update.
     */
    limit?: number
  }

  /**
   * Transaction updateManyAndReturn
   */
  export type TransactionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transaction upsert
   */
  export type TransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the Transaction to update in case it exists.
     */
    where: TransactionWhereUniqueInput
    /**
     * In case the Transaction found by the `where` argument doesn't exist, create a new Transaction with this data.
     */
    create: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
    /**
     * In case the Transaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
  }

  /**
   * Transaction delete
   */
  export type TransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter which Transaction to delete.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction deleteMany
   */
  export type TransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transactions to delete
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to delete.
     */
    limit?: number
  }

  /**
   * Transaction.destinataire
   */
  export type Transaction$destinataireArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Transaction.partenaire
   */
  export type Transaction$partenaireArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Transaction.compteOrigine
   */
  export type Transaction$compteOrigineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
  }

  /**
   * Transaction.compteDestination
   */
  export type Transaction$compteDestinationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
  }

  /**
   * Transaction without action
   */
  export type TransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    type: $Enums.NotificationType | null
    title: string | null
    message: string | null
    isRead: boolean | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    type: $Enums.NotificationType | null
    title: string | null
    message: string | null
    isRead: boolean | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    type: number
    title: number
    message: number
    isRead: number
    userId: number
    data: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    type?: true
    title?: true
    message?: true
    isRead?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    type?: true
    title?: true
    message?: true
    isRead?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    type?: true
    title?: true
    message?: true
    isRead?: true
    userId?: true
    data?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    type: $Enums.NotificationType
    title: string
    message: string
    isRead: boolean
    userId: string
    data: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    userId?: boolean
    data?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    userId?: boolean
    data?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    userId?: boolean
    data?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    userId?: boolean
    data?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type NotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "title" | "message" | "isRead" | "userId" | "data" | "createdAt" | "updatedAt", ExtArgs["result"]["notification"]>
  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: $Enums.NotificationType
      title: string
      message: string
      isRead: boolean
      userId: string
      data: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications and returns the data updated in the database.
     * @param {NotificationUpdateManyAndReturnArgs} args - Arguments to update many Notifications.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'NotificationType'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly data: FieldRef<"Notification", 'Json'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
    readonly updatedAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification updateManyAndReturn
   */
  export type NotificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to delete.
     */
    limit?: number
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model DailySnapshot
   */

  export type AggregateDailySnapshot = {
    _count: DailySnapshotCountAggregateOutputType | null
    _avg: DailySnapshotAvgAggregateOutputType | null
    _sum: DailySnapshotSumAggregateOutputType | null
    _min: DailySnapshotMinAggregateOutputType | null
    _max: DailySnapshotMaxAggregateOutputType | null
  }

  export type DailySnapshotAvgAggregateOutputType = {
    liquideDebut: number | null
    orangeMoneyDebut: number | null
    waveDebut: number | null
    uvMasterDebut: number | null
    autresDebut: number | null
    liquideFin: number | null
    orangeMoneyFin: number | null
    waveFin: number | null
    uvMasterFin: number | null
    autresFin: number | null
    debutTotal: number | null
    sortieTotal: number | null
    grTotal: number | null
  }

  export type DailySnapshotSumAggregateOutputType = {
    liquideDebut: bigint | null
    orangeMoneyDebut: bigint | null
    waveDebut: bigint | null
    uvMasterDebut: bigint | null
    autresDebut: bigint | null
    liquideFin: bigint | null
    orangeMoneyFin: bigint | null
    waveFin: bigint | null
    uvMasterFin: bigint | null
    autresFin: bigint | null
    debutTotal: bigint | null
    sortieTotal: bigint | null
    grTotal: bigint | null
  }

  export type DailySnapshotMinAggregateOutputType = {
    id: string | null
    date: Date | null
    userId: string | null
    liquideDebut: bigint | null
    orangeMoneyDebut: bigint | null
    waveDebut: bigint | null
    uvMasterDebut: bigint | null
    autresDebut: bigint | null
    liquideFin: bigint | null
    orangeMoneyFin: bigint | null
    waveFin: bigint | null
    uvMasterFin: bigint | null
    autresFin: bigint | null
    debutTotal: bigint | null
    sortieTotal: bigint | null
    grTotal: bigint | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DailySnapshotMaxAggregateOutputType = {
    id: string | null
    date: Date | null
    userId: string | null
    liquideDebut: bigint | null
    orangeMoneyDebut: bigint | null
    waveDebut: bigint | null
    uvMasterDebut: bigint | null
    autresDebut: bigint | null
    liquideFin: bigint | null
    orangeMoneyFin: bigint | null
    waveFin: bigint | null
    uvMasterFin: bigint | null
    autresFin: bigint | null
    debutTotal: bigint | null
    sortieTotal: bigint | null
    grTotal: bigint | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DailySnapshotCountAggregateOutputType = {
    id: number
    date: number
    userId: number
    liquideDebut: number
    orangeMoneyDebut: number
    waveDebut: number
    uvMasterDebut: number
    autresDebut: number
    liquideFin: number
    orangeMoneyFin: number
    waveFin: number
    uvMasterFin: number
    autresFin: number
    debutTotal: number
    sortieTotal: number
    grTotal: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DailySnapshotAvgAggregateInputType = {
    liquideDebut?: true
    orangeMoneyDebut?: true
    waveDebut?: true
    uvMasterDebut?: true
    autresDebut?: true
    liquideFin?: true
    orangeMoneyFin?: true
    waveFin?: true
    uvMasterFin?: true
    autresFin?: true
    debutTotal?: true
    sortieTotal?: true
    grTotal?: true
  }

  export type DailySnapshotSumAggregateInputType = {
    liquideDebut?: true
    orangeMoneyDebut?: true
    waveDebut?: true
    uvMasterDebut?: true
    autresDebut?: true
    liquideFin?: true
    orangeMoneyFin?: true
    waveFin?: true
    uvMasterFin?: true
    autresFin?: true
    debutTotal?: true
    sortieTotal?: true
    grTotal?: true
  }

  export type DailySnapshotMinAggregateInputType = {
    id?: true
    date?: true
    userId?: true
    liquideDebut?: true
    orangeMoneyDebut?: true
    waveDebut?: true
    uvMasterDebut?: true
    autresDebut?: true
    liquideFin?: true
    orangeMoneyFin?: true
    waveFin?: true
    uvMasterFin?: true
    autresFin?: true
    debutTotal?: true
    sortieTotal?: true
    grTotal?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DailySnapshotMaxAggregateInputType = {
    id?: true
    date?: true
    userId?: true
    liquideDebut?: true
    orangeMoneyDebut?: true
    waveDebut?: true
    uvMasterDebut?: true
    autresDebut?: true
    liquideFin?: true
    orangeMoneyFin?: true
    waveFin?: true
    uvMasterFin?: true
    autresFin?: true
    debutTotal?: true
    sortieTotal?: true
    grTotal?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DailySnapshotCountAggregateInputType = {
    id?: true
    date?: true
    userId?: true
    liquideDebut?: true
    orangeMoneyDebut?: true
    waveDebut?: true
    uvMasterDebut?: true
    autresDebut?: true
    liquideFin?: true
    orangeMoneyFin?: true
    waveFin?: true
    uvMasterFin?: true
    autresFin?: true
    debutTotal?: true
    sortieTotal?: true
    grTotal?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DailySnapshotAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DailySnapshot to aggregate.
     */
    where?: DailySnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailySnapshots to fetch.
     */
    orderBy?: DailySnapshotOrderByWithRelationInput | DailySnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DailySnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailySnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailySnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DailySnapshots
    **/
    _count?: true | DailySnapshotCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DailySnapshotAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DailySnapshotSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DailySnapshotMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DailySnapshotMaxAggregateInputType
  }

  export type GetDailySnapshotAggregateType<T extends DailySnapshotAggregateArgs> = {
        [P in keyof T & keyof AggregateDailySnapshot]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDailySnapshot[P]>
      : GetScalarType<T[P], AggregateDailySnapshot[P]>
  }




  export type DailySnapshotGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DailySnapshotWhereInput
    orderBy?: DailySnapshotOrderByWithAggregationInput | DailySnapshotOrderByWithAggregationInput[]
    by: DailySnapshotScalarFieldEnum[] | DailySnapshotScalarFieldEnum
    having?: DailySnapshotScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DailySnapshotCountAggregateInputType | true
    _avg?: DailySnapshotAvgAggregateInputType
    _sum?: DailySnapshotSumAggregateInputType
    _min?: DailySnapshotMinAggregateInputType
    _max?: DailySnapshotMaxAggregateInputType
  }

  export type DailySnapshotGroupByOutputType = {
    id: string
    date: Date
    userId: string
    liquideDebut: bigint
    orangeMoneyDebut: bigint
    waveDebut: bigint
    uvMasterDebut: bigint
    autresDebut: bigint
    liquideFin: bigint
    orangeMoneyFin: bigint
    waveFin: bigint
    uvMasterFin: bigint
    autresFin: bigint
    debutTotal: bigint
    sortieTotal: bigint
    grTotal: bigint
    createdAt: Date
    updatedAt: Date
    _count: DailySnapshotCountAggregateOutputType | null
    _avg: DailySnapshotAvgAggregateOutputType | null
    _sum: DailySnapshotSumAggregateOutputType | null
    _min: DailySnapshotMinAggregateOutputType | null
    _max: DailySnapshotMaxAggregateOutputType | null
  }

  type GetDailySnapshotGroupByPayload<T extends DailySnapshotGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DailySnapshotGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DailySnapshotGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DailySnapshotGroupByOutputType[P]>
            : GetScalarType<T[P], DailySnapshotGroupByOutputType[P]>
        }
      >
    >


  export type DailySnapshotSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    userId?: boolean
    liquideDebut?: boolean
    orangeMoneyDebut?: boolean
    waveDebut?: boolean
    uvMasterDebut?: boolean
    autresDebut?: boolean
    liquideFin?: boolean
    orangeMoneyFin?: boolean
    waveFin?: boolean
    uvMasterFin?: boolean
    autresFin?: boolean
    debutTotal?: boolean
    sortieTotal?: boolean
    grTotal?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dailySnapshot"]>

  export type DailySnapshotSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    userId?: boolean
    liquideDebut?: boolean
    orangeMoneyDebut?: boolean
    waveDebut?: boolean
    uvMasterDebut?: boolean
    autresDebut?: boolean
    liquideFin?: boolean
    orangeMoneyFin?: boolean
    waveFin?: boolean
    uvMasterFin?: boolean
    autresFin?: boolean
    debutTotal?: boolean
    sortieTotal?: boolean
    grTotal?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dailySnapshot"]>

  export type DailySnapshotSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    userId?: boolean
    liquideDebut?: boolean
    orangeMoneyDebut?: boolean
    waveDebut?: boolean
    uvMasterDebut?: boolean
    autresDebut?: boolean
    liquideFin?: boolean
    orangeMoneyFin?: boolean
    waveFin?: boolean
    uvMasterFin?: boolean
    autresFin?: boolean
    debutTotal?: boolean
    sortieTotal?: boolean
    grTotal?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dailySnapshot"]>

  export type DailySnapshotSelectScalar = {
    id?: boolean
    date?: boolean
    userId?: boolean
    liquideDebut?: boolean
    orangeMoneyDebut?: boolean
    waveDebut?: boolean
    uvMasterDebut?: boolean
    autresDebut?: boolean
    liquideFin?: boolean
    orangeMoneyFin?: boolean
    waveFin?: boolean
    uvMasterFin?: boolean
    autresFin?: boolean
    debutTotal?: boolean
    sortieTotal?: boolean
    grTotal?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DailySnapshotOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "date" | "userId" | "liquideDebut" | "orangeMoneyDebut" | "waveDebut" | "uvMasterDebut" | "autresDebut" | "liquideFin" | "orangeMoneyFin" | "waveFin" | "uvMasterFin" | "autresFin" | "debutTotal" | "sortieTotal" | "grTotal" | "createdAt" | "updatedAt", ExtArgs["result"]["dailySnapshot"]>
  export type DailySnapshotInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DailySnapshotIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DailySnapshotIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DailySnapshotPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DailySnapshot"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      date: Date
      userId: string
      liquideDebut: bigint
      orangeMoneyDebut: bigint
      waveDebut: bigint
      uvMasterDebut: bigint
      autresDebut: bigint
      liquideFin: bigint
      orangeMoneyFin: bigint
      waveFin: bigint
      uvMasterFin: bigint
      autresFin: bigint
      debutTotal: bigint
      sortieTotal: bigint
      grTotal: bigint
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["dailySnapshot"]>
    composites: {}
  }

  type DailySnapshotGetPayload<S extends boolean | null | undefined | DailySnapshotDefaultArgs> = $Result.GetResult<Prisma.$DailySnapshotPayload, S>

  type DailySnapshotCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DailySnapshotFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DailySnapshotCountAggregateInputType | true
    }

  export interface DailySnapshotDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DailySnapshot'], meta: { name: 'DailySnapshot' } }
    /**
     * Find zero or one DailySnapshot that matches the filter.
     * @param {DailySnapshotFindUniqueArgs} args - Arguments to find a DailySnapshot
     * @example
     * // Get one DailySnapshot
     * const dailySnapshot = await prisma.dailySnapshot.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DailySnapshotFindUniqueArgs>(args: SelectSubset<T, DailySnapshotFindUniqueArgs<ExtArgs>>): Prisma__DailySnapshotClient<$Result.GetResult<Prisma.$DailySnapshotPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DailySnapshot that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DailySnapshotFindUniqueOrThrowArgs} args - Arguments to find a DailySnapshot
     * @example
     * // Get one DailySnapshot
     * const dailySnapshot = await prisma.dailySnapshot.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DailySnapshotFindUniqueOrThrowArgs>(args: SelectSubset<T, DailySnapshotFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DailySnapshotClient<$Result.GetResult<Prisma.$DailySnapshotPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DailySnapshot that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailySnapshotFindFirstArgs} args - Arguments to find a DailySnapshot
     * @example
     * // Get one DailySnapshot
     * const dailySnapshot = await prisma.dailySnapshot.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DailySnapshotFindFirstArgs>(args?: SelectSubset<T, DailySnapshotFindFirstArgs<ExtArgs>>): Prisma__DailySnapshotClient<$Result.GetResult<Prisma.$DailySnapshotPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DailySnapshot that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailySnapshotFindFirstOrThrowArgs} args - Arguments to find a DailySnapshot
     * @example
     * // Get one DailySnapshot
     * const dailySnapshot = await prisma.dailySnapshot.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DailySnapshotFindFirstOrThrowArgs>(args?: SelectSubset<T, DailySnapshotFindFirstOrThrowArgs<ExtArgs>>): Prisma__DailySnapshotClient<$Result.GetResult<Prisma.$DailySnapshotPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DailySnapshots that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailySnapshotFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DailySnapshots
     * const dailySnapshots = await prisma.dailySnapshot.findMany()
     * 
     * // Get first 10 DailySnapshots
     * const dailySnapshots = await prisma.dailySnapshot.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dailySnapshotWithIdOnly = await prisma.dailySnapshot.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DailySnapshotFindManyArgs>(args?: SelectSubset<T, DailySnapshotFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailySnapshotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DailySnapshot.
     * @param {DailySnapshotCreateArgs} args - Arguments to create a DailySnapshot.
     * @example
     * // Create one DailySnapshot
     * const DailySnapshot = await prisma.dailySnapshot.create({
     *   data: {
     *     // ... data to create a DailySnapshot
     *   }
     * })
     * 
     */
    create<T extends DailySnapshotCreateArgs>(args: SelectSubset<T, DailySnapshotCreateArgs<ExtArgs>>): Prisma__DailySnapshotClient<$Result.GetResult<Prisma.$DailySnapshotPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DailySnapshots.
     * @param {DailySnapshotCreateManyArgs} args - Arguments to create many DailySnapshots.
     * @example
     * // Create many DailySnapshots
     * const dailySnapshot = await prisma.dailySnapshot.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DailySnapshotCreateManyArgs>(args?: SelectSubset<T, DailySnapshotCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DailySnapshots and returns the data saved in the database.
     * @param {DailySnapshotCreateManyAndReturnArgs} args - Arguments to create many DailySnapshots.
     * @example
     * // Create many DailySnapshots
     * const dailySnapshot = await prisma.dailySnapshot.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DailySnapshots and only return the `id`
     * const dailySnapshotWithIdOnly = await prisma.dailySnapshot.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DailySnapshotCreateManyAndReturnArgs>(args?: SelectSubset<T, DailySnapshotCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailySnapshotPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DailySnapshot.
     * @param {DailySnapshotDeleteArgs} args - Arguments to delete one DailySnapshot.
     * @example
     * // Delete one DailySnapshot
     * const DailySnapshot = await prisma.dailySnapshot.delete({
     *   where: {
     *     // ... filter to delete one DailySnapshot
     *   }
     * })
     * 
     */
    delete<T extends DailySnapshotDeleteArgs>(args: SelectSubset<T, DailySnapshotDeleteArgs<ExtArgs>>): Prisma__DailySnapshotClient<$Result.GetResult<Prisma.$DailySnapshotPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DailySnapshot.
     * @param {DailySnapshotUpdateArgs} args - Arguments to update one DailySnapshot.
     * @example
     * // Update one DailySnapshot
     * const dailySnapshot = await prisma.dailySnapshot.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DailySnapshotUpdateArgs>(args: SelectSubset<T, DailySnapshotUpdateArgs<ExtArgs>>): Prisma__DailySnapshotClient<$Result.GetResult<Prisma.$DailySnapshotPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DailySnapshots.
     * @param {DailySnapshotDeleteManyArgs} args - Arguments to filter DailySnapshots to delete.
     * @example
     * // Delete a few DailySnapshots
     * const { count } = await prisma.dailySnapshot.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DailySnapshotDeleteManyArgs>(args?: SelectSubset<T, DailySnapshotDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DailySnapshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailySnapshotUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DailySnapshots
     * const dailySnapshot = await prisma.dailySnapshot.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DailySnapshotUpdateManyArgs>(args: SelectSubset<T, DailySnapshotUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DailySnapshots and returns the data updated in the database.
     * @param {DailySnapshotUpdateManyAndReturnArgs} args - Arguments to update many DailySnapshots.
     * @example
     * // Update many DailySnapshots
     * const dailySnapshot = await prisma.dailySnapshot.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DailySnapshots and only return the `id`
     * const dailySnapshotWithIdOnly = await prisma.dailySnapshot.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DailySnapshotUpdateManyAndReturnArgs>(args: SelectSubset<T, DailySnapshotUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailySnapshotPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DailySnapshot.
     * @param {DailySnapshotUpsertArgs} args - Arguments to update or create a DailySnapshot.
     * @example
     * // Update or create a DailySnapshot
     * const dailySnapshot = await prisma.dailySnapshot.upsert({
     *   create: {
     *     // ... data to create a DailySnapshot
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DailySnapshot we want to update
     *   }
     * })
     */
    upsert<T extends DailySnapshotUpsertArgs>(args: SelectSubset<T, DailySnapshotUpsertArgs<ExtArgs>>): Prisma__DailySnapshotClient<$Result.GetResult<Prisma.$DailySnapshotPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DailySnapshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailySnapshotCountArgs} args - Arguments to filter DailySnapshots to count.
     * @example
     * // Count the number of DailySnapshots
     * const count = await prisma.dailySnapshot.count({
     *   where: {
     *     // ... the filter for the DailySnapshots we want to count
     *   }
     * })
    **/
    count<T extends DailySnapshotCountArgs>(
      args?: Subset<T, DailySnapshotCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DailySnapshotCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DailySnapshot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailySnapshotAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DailySnapshotAggregateArgs>(args: Subset<T, DailySnapshotAggregateArgs>): Prisma.PrismaPromise<GetDailySnapshotAggregateType<T>>

    /**
     * Group by DailySnapshot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailySnapshotGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DailySnapshotGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DailySnapshotGroupByArgs['orderBy'] }
        : { orderBy?: DailySnapshotGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DailySnapshotGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDailySnapshotGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DailySnapshot model
   */
  readonly fields: DailySnapshotFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DailySnapshot.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DailySnapshotClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DailySnapshot model
   */
  interface DailySnapshotFieldRefs {
    readonly id: FieldRef<"DailySnapshot", 'String'>
    readonly date: FieldRef<"DailySnapshot", 'DateTime'>
    readonly userId: FieldRef<"DailySnapshot", 'String'>
    readonly liquideDebut: FieldRef<"DailySnapshot", 'BigInt'>
    readonly orangeMoneyDebut: FieldRef<"DailySnapshot", 'BigInt'>
    readonly waveDebut: FieldRef<"DailySnapshot", 'BigInt'>
    readonly uvMasterDebut: FieldRef<"DailySnapshot", 'BigInt'>
    readonly autresDebut: FieldRef<"DailySnapshot", 'BigInt'>
    readonly liquideFin: FieldRef<"DailySnapshot", 'BigInt'>
    readonly orangeMoneyFin: FieldRef<"DailySnapshot", 'BigInt'>
    readonly waveFin: FieldRef<"DailySnapshot", 'BigInt'>
    readonly uvMasterFin: FieldRef<"DailySnapshot", 'BigInt'>
    readonly autresFin: FieldRef<"DailySnapshot", 'BigInt'>
    readonly debutTotal: FieldRef<"DailySnapshot", 'BigInt'>
    readonly sortieTotal: FieldRef<"DailySnapshot", 'BigInt'>
    readonly grTotal: FieldRef<"DailySnapshot", 'BigInt'>
    readonly createdAt: FieldRef<"DailySnapshot", 'DateTime'>
    readonly updatedAt: FieldRef<"DailySnapshot", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DailySnapshot findUnique
   */
  export type DailySnapshotFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailySnapshot
     */
    select?: DailySnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailySnapshot
     */
    omit?: DailySnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailySnapshotInclude<ExtArgs> | null
    /**
     * Filter, which DailySnapshot to fetch.
     */
    where: DailySnapshotWhereUniqueInput
  }

  /**
   * DailySnapshot findUniqueOrThrow
   */
  export type DailySnapshotFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailySnapshot
     */
    select?: DailySnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailySnapshot
     */
    omit?: DailySnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailySnapshotInclude<ExtArgs> | null
    /**
     * Filter, which DailySnapshot to fetch.
     */
    where: DailySnapshotWhereUniqueInput
  }

  /**
   * DailySnapshot findFirst
   */
  export type DailySnapshotFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailySnapshot
     */
    select?: DailySnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailySnapshot
     */
    omit?: DailySnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailySnapshotInclude<ExtArgs> | null
    /**
     * Filter, which DailySnapshot to fetch.
     */
    where?: DailySnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailySnapshots to fetch.
     */
    orderBy?: DailySnapshotOrderByWithRelationInput | DailySnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DailySnapshots.
     */
    cursor?: DailySnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailySnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailySnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DailySnapshots.
     */
    distinct?: DailySnapshotScalarFieldEnum | DailySnapshotScalarFieldEnum[]
  }

  /**
   * DailySnapshot findFirstOrThrow
   */
  export type DailySnapshotFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailySnapshot
     */
    select?: DailySnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailySnapshot
     */
    omit?: DailySnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailySnapshotInclude<ExtArgs> | null
    /**
     * Filter, which DailySnapshot to fetch.
     */
    where?: DailySnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailySnapshots to fetch.
     */
    orderBy?: DailySnapshotOrderByWithRelationInput | DailySnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DailySnapshots.
     */
    cursor?: DailySnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailySnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailySnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DailySnapshots.
     */
    distinct?: DailySnapshotScalarFieldEnum | DailySnapshotScalarFieldEnum[]
  }

  /**
   * DailySnapshot findMany
   */
  export type DailySnapshotFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailySnapshot
     */
    select?: DailySnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailySnapshot
     */
    omit?: DailySnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailySnapshotInclude<ExtArgs> | null
    /**
     * Filter, which DailySnapshots to fetch.
     */
    where?: DailySnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailySnapshots to fetch.
     */
    orderBy?: DailySnapshotOrderByWithRelationInput | DailySnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DailySnapshots.
     */
    cursor?: DailySnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailySnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailySnapshots.
     */
    skip?: number
    distinct?: DailySnapshotScalarFieldEnum | DailySnapshotScalarFieldEnum[]
  }

  /**
   * DailySnapshot create
   */
  export type DailySnapshotCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailySnapshot
     */
    select?: DailySnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailySnapshot
     */
    omit?: DailySnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailySnapshotInclude<ExtArgs> | null
    /**
     * The data needed to create a DailySnapshot.
     */
    data: XOR<DailySnapshotCreateInput, DailySnapshotUncheckedCreateInput>
  }

  /**
   * DailySnapshot createMany
   */
  export type DailySnapshotCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DailySnapshots.
     */
    data: DailySnapshotCreateManyInput | DailySnapshotCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DailySnapshot createManyAndReturn
   */
  export type DailySnapshotCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailySnapshot
     */
    select?: DailySnapshotSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DailySnapshot
     */
    omit?: DailySnapshotOmit<ExtArgs> | null
    /**
     * The data used to create many DailySnapshots.
     */
    data: DailySnapshotCreateManyInput | DailySnapshotCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailySnapshotIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DailySnapshot update
   */
  export type DailySnapshotUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailySnapshot
     */
    select?: DailySnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailySnapshot
     */
    omit?: DailySnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailySnapshotInclude<ExtArgs> | null
    /**
     * The data needed to update a DailySnapshot.
     */
    data: XOR<DailySnapshotUpdateInput, DailySnapshotUncheckedUpdateInput>
    /**
     * Choose, which DailySnapshot to update.
     */
    where: DailySnapshotWhereUniqueInput
  }

  /**
   * DailySnapshot updateMany
   */
  export type DailySnapshotUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DailySnapshots.
     */
    data: XOR<DailySnapshotUpdateManyMutationInput, DailySnapshotUncheckedUpdateManyInput>
    /**
     * Filter which DailySnapshots to update
     */
    where?: DailySnapshotWhereInput
    /**
     * Limit how many DailySnapshots to update.
     */
    limit?: number
  }

  /**
   * DailySnapshot updateManyAndReturn
   */
  export type DailySnapshotUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailySnapshot
     */
    select?: DailySnapshotSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DailySnapshot
     */
    omit?: DailySnapshotOmit<ExtArgs> | null
    /**
     * The data used to update DailySnapshots.
     */
    data: XOR<DailySnapshotUpdateManyMutationInput, DailySnapshotUncheckedUpdateManyInput>
    /**
     * Filter which DailySnapshots to update
     */
    where?: DailySnapshotWhereInput
    /**
     * Limit how many DailySnapshots to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailySnapshotIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DailySnapshot upsert
   */
  export type DailySnapshotUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailySnapshot
     */
    select?: DailySnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailySnapshot
     */
    omit?: DailySnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailySnapshotInclude<ExtArgs> | null
    /**
     * The filter to search for the DailySnapshot to update in case it exists.
     */
    where: DailySnapshotWhereUniqueInput
    /**
     * In case the DailySnapshot found by the `where` argument doesn't exist, create a new DailySnapshot with this data.
     */
    create: XOR<DailySnapshotCreateInput, DailySnapshotUncheckedCreateInput>
    /**
     * In case the DailySnapshot was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DailySnapshotUpdateInput, DailySnapshotUncheckedUpdateInput>
  }

  /**
   * DailySnapshot delete
   */
  export type DailySnapshotDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailySnapshot
     */
    select?: DailySnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailySnapshot
     */
    omit?: DailySnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailySnapshotInclude<ExtArgs> | null
    /**
     * Filter which DailySnapshot to delete.
     */
    where: DailySnapshotWhereUniqueInput
  }

  /**
   * DailySnapshot deleteMany
   */
  export type DailySnapshotDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DailySnapshots to delete
     */
    where?: DailySnapshotWhereInput
    /**
     * Limit how many DailySnapshots to delete.
     */
    limit?: number
  }

  /**
   * DailySnapshot without action
   */
  export type DailySnapshotDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailySnapshot
     */
    select?: DailySnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailySnapshot
     */
    omit?: DailySnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailySnapshotInclude<ExtArgs> | null
  }


  /**
   * Model SystemConfig
   */

  export type AggregateSystemConfig = {
    _count: SystemConfigCountAggregateOutputType | null
    _min: SystemConfigMinAggregateOutputType | null
    _max: SystemConfigMaxAggregateOutputType | null
  }

  export type SystemConfigMinAggregateOutputType = {
    id: string | null
    key: string | null
    value: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SystemConfigMaxAggregateOutputType = {
    id: string | null
    key: string | null
    value: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SystemConfigCountAggregateOutputType = {
    id: number
    key: number
    value: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SystemConfigMinAggregateInputType = {
    id?: true
    key?: true
    value?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SystemConfigMaxAggregateInputType = {
    id?: true
    key?: true
    value?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SystemConfigCountAggregateInputType = {
    id?: true
    key?: true
    value?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SystemConfigAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemConfig to aggregate.
     */
    where?: SystemConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemConfigs to fetch.
     */
    orderBy?: SystemConfigOrderByWithRelationInput | SystemConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SystemConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SystemConfigs
    **/
    _count?: true | SystemConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SystemConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SystemConfigMaxAggregateInputType
  }

  export type GetSystemConfigAggregateType<T extends SystemConfigAggregateArgs> = {
        [P in keyof T & keyof AggregateSystemConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSystemConfig[P]>
      : GetScalarType<T[P], AggregateSystemConfig[P]>
  }




  export type SystemConfigGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SystemConfigWhereInput
    orderBy?: SystemConfigOrderByWithAggregationInput | SystemConfigOrderByWithAggregationInput[]
    by: SystemConfigScalarFieldEnum[] | SystemConfigScalarFieldEnum
    having?: SystemConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SystemConfigCountAggregateInputType | true
    _min?: SystemConfigMinAggregateInputType
    _max?: SystemConfigMaxAggregateInputType
  }

  export type SystemConfigGroupByOutputType = {
    id: string
    key: string
    value: string
    createdAt: Date
    updatedAt: Date
    _count: SystemConfigCountAggregateOutputType | null
    _min: SystemConfigMinAggregateOutputType | null
    _max: SystemConfigMaxAggregateOutputType | null
  }

  type GetSystemConfigGroupByPayload<T extends SystemConfigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SystemConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SystemConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SystemConfigGroupByOutputType[P]>
            : GetScalarType<T[P], SystemConfigGroupByOutputType[P]>
        }
      >
    >


  export type SystemConfigSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["systemConfig"]>

  export type SystemConfigSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["systemConfig"]>

  export type SystemConfigSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["systemConfig"]>

  export type SystemConfigSelectScalar = {
    id?: boolean
    key?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SystemConfigOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "key" | "value" | "createdAt" | "updatedAt", ExtArgs["result"]["systemConfig"]>

  export type $SystemConfigPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SystemConfig"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      key: string
      value: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["systemConfig"]>
    composites: {}
  }

  type SystemConfigGetPayload<S extends boolean | null | undefined | SystemConfigDefaultArgs> = $Result.GetResult<Prisma.$SystemConfigPayload, S>

  type SystemConfigCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SystemConfigFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SystemConfigCountAggregateInputType | true
    }

  export interface SystemConfigDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SystemConfig'], meta: { name: 'SystemConfig' } }
    /**
     * Find zero or one SystemConfig that matches the filter.
     * @param {SystemConfigFindUniqueArgs} args - Arguments to find a SystemConfig
     * @example
     * // Get one SystemConfig
     * const systemConfig = await prisma.systemConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SystemConfigFindUniqueArgs>(args: SelectSubset<T, SystemConfigFindUniqueArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SystemConfig that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SystemConfigFindUniqueOrThrowArgs} args - Arguments to find a SystemConfig
     * @example
     * // Get one SystemConfig
     * const systemConfig = await prisma.systemConfig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SystemConfigFindUniqueOrThrowArgs>(args: SelectSubset<T, SystemConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SystemConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigFindFirstArgs} args - Arguments to find a SystemConfig
     * @example
     * // Get one SystemConfig
     * const systemConfig = await prisma.systemConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SystemConfigFindFirstArgs>(args?: SelectSubset<T, SystemConfigFindFirstArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SystemConfig that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigFindFirstOrThrowArgs} args - Arguments to find a SystemConfig
     * @example
     * // Get one SystemConfig
     * const systemConfig = await prisma.systemConfig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SystemConfigFindFirstOrThrowArgs>(args?: SelectSubset<T, SystemConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SystemConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SystemConfigs
     * const systemConfigs = await prisma.systemConfig.findMany()
     * 
     * // Get first 10 SystemConfigs
     * const systemConfigs = await prisma.systemConfig.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const systemConfigWithIdOnly = await prisma.systemConfig.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SystemConfigFindManyArgs>(args?: SelectSubset<T, SystemConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SystemConfig.
     * @param {SystemConfigCreateArgs} args - Arguments to create a SystemConfig.
     * @example
     * // Create one SystemConfig
     * const SystemConfig = await prisma.systemConfig.create({
     *   data: {
     *     // ... data to create a SystemConfig
     *   }
     * })
     * 
     */
    create<T extends SystemConfigCreateArgs>(args: SelectSubset<T, SystemConfigCreateArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SystemConfigs.
     * @param {SystemConfigCreateManyArgs} args - Arguments to create many SystemConfigs.
     * @example
     * // Create many SystemConfigs
     * const systemConfig = await prisma.systemConfig.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SystemConfigCreateManyArgs>(args?: SelectSubset<T, SystemConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SystemConfigs and returns the data saved in the database.
     * @param {SystemConfigCreateManyAndReturnArgs} args - Arguments to create many SystemConfigs.
     * @example
     * // Create many SystemConfigs
     * const systemConfig = await prisma.systemConfig.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SystemConfigs and only return the `id`
     * const systemConfigWithIdOnly = await prisma.systemConfig.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SystemConfigCreateManyAndReturnArgs>(args?: SelectSubset<T, SystemConfigCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SystemConfig.
     * @param {SystemConfigDeleteArgs} args - Arguments to delete one SystemConfig.
     * @example
     * // Delete one SystemConfig
     * const SystemConfig = await prisma.systemConfig.delete({
     *   where: {
     *     // ... filter to delete one SystemConfig
     *   }
     * })
     * 
     */
    delete<T extends SystemConfigDeleteArgs>(args: SelectSubset<T, SystemConfigDeleteArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SystemConfig.
     * @param {SystemConfigUpdateArgs} args - Arguments to update one SystemConfig.
     * @example
     * // Update one SystemConfig
     * const systemConfig = await prisma.systemConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SystemConfigUpdateArgs>(args: SelectSubset<T, SystemConfigUpdateArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SystemConfigs.
     * @param {SystemConfigDeleteManyArgs} args - Arguments to filter SystemConfigs to delete.
     * @example
     * // Delete a few SystemConfigs
     * const { count } = await prisma.systemConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SystemConfigDeleteManyArgs>(args?: SelectSubset<T, SystemConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SystemConfigs
     * const systemConfig = await prisma.systemConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SystemConfigUpdateManyArgs>(args: SelectSubset<T, SystemConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemConfigs and returns the data updated in the database.
     * @param {SystemConfigUpdateManyAndReturnArgs} args - Arguments to update many SystemConfigs.
     * @example
     * // Update many SystemConfigs
     * const systemConfig = await prisma.systemConfig.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SystemConfigs and only return the `id`
     * const systemConfigWithIdOnly = await prisma.systemConfig.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SystemConfigUpdateManyAndReturnArgs>(args: SelectSubset<T, SystemConfigUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SystemConfig.
     * @param {SystemConfigUpsertArgs} args - Arguments to update or create a SystemConfig.
     * @example
     * // Update or create a SystemConfig
     * const systemConfig = await prisma.systemConfig.upsert({
     *   create: {
     *     // ... data to create a SystemConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SystemConfig we want to update
     *   }
     * })
     */
    upsert<T extends SystemConfigUpsertArgs>(args: SelectSubset<T, SystemConfigUpsertArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SystemConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigCountArgs} args - Arguments to filter SystemConfigs to count.
     * @example
     * // Count the number of SystemConfigs
     * const count = await prisma.systemConfig.count({
     *   where: {
     *     // ... the filter for the SystemConfigs we want to count
     *   }
     * })
    **/
    count<T extends SystemConfigCountArgs>(
      args?: Subset<T, SystemConfigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SystemConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SystemConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SystemConfigAggregateArgs>(args: Subset<T, SystemConfigAggregateArgs>): Prisma.PrismaPromise<GetSystemConfigAggregateType<T>>

    /**
     * Group by SystemConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SystemConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SystemConfigGroupByArgs['orderBy'] }
        : { orderBy?: SystemConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SystemConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSystemConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SystemConfig model
   */
  readonly fields: SystemConfigFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SystemConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SystemConfigClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SystemConfig model
   */
  interface SystemConfigFieldRefs {
    readonly id: FieldRef<"SystemConfig", 'String'>
    readonly key: FieldRef<"SystemConfig", 'String'>
    readonly value: FieldRef<"SystemConfig", 'String'>
    readonly createdAt: FieldRef<"SystemConfig", 'DateTime'>
    readonly updatedAt: FieldRef<"SystemConfig", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SystemConfig findUnique
   */
  export type SystemConfigFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * Filter, which SystemConfig to fetch.
     */
    where: SystemConfigWhereUniqueInput
  }

  /**
   * SystemConfig findUniqueOrThrow
   */
  export type SystemConfigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * Filter, which SystemConfig to fetch.
     */
    where: SystemConfigWhereUniqueInput
  }

  /**
   * SystemConfig findFirst
   */
  export type SystemConfigFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * Filter, which SystemConfig to fetch.
     */
    where?: SystemConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemConfigs to fetch.
     */
    orderBy?: SystemConfigOrderByWithRelationInput | SystemConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemConfigs.
     */
    cursor?: SystemConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemConfigs.
     */
    distinct?: SystemConfigScalarFieldEnum | SystemConfigScalarFieldEnum[]
  }

  /**
   * SystemConfig findFirstOrThrow
   */
  export type SystemConfigFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * Filter, which SystemConfig to fetch.
     */
    where?: SystemConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemConfigs to fetch.
     */
    orderBy?: SystemConfigOrderByWithRelationInput | SystemConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemConfigs.
     */
    cursor?: SystemConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemConfigs.
     */
    distinct?: SystemConfigScalarFieldEnum | SystemConfigScalarFieldEnum[]
  }

  /**
   * SystemConfig findMany
   */
  export type SystemConfigFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * Filter, which SystemConfigs to fetch.
     */
    where?: SystemConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemConfigs to fetch.
     */
    orderBy?: SystemConfigOrderByWithRelationInput | SystemConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SystemConfigs.
     */
    cursor?: SystemConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemConfigs.
     */
    skip?: number
    distinct?: SystemConfigScalarFieldEnum | SystemConfigScalarFieldEnum[]
  }

  /**
   * SystemConfig create
   */
  export type SystemConfigCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * The data needed to create a SystemConfig.
     */
    data: XOR<SystemConfigCreateInput, SystemConfigUncheckedCreateInput>
  }

  /**
   * SystemConfig createMany
   */
  export type SystemConfigCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SystemConfigs.
     */
    data: SystemConfigCreateManyInput | SystemConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SystemConfig createManyAndReturn
   */
  export type SystemConfigCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * The data used to create many SystemConfigs.
     */
    data: SystemConfigCreateManyInput | SystemConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SystemConfig update
   */
  export type SystemConfigUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * The data needed to update a SystemConfig.
     */
    data: XOR<SystemConfigUpdateInput, SystemConfigUncheckedUpdateInput>
    /**
     * Choose, which SystemConfig to update.
     */
    where: SystemConfigWhereUniqueInput
  }

  /**
   * SystemConfig updateMany
   */
  export type SystemConfigUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SystemConfigs.
     */
    data: XOR<SystemConfigUpdateManyMutationInput, SystemConfigUncheckedUpdateManyInput>
    /**
     * Filter which SystemConfigs to update
     */
    where?: SystemConfigWhereInput
    /**
     * Limit how many SystemConfigs to update.
     */
    limit?: number
  }

  /**
   * SystemConfig updateManyAndReturn
   */
  export type SystemConfigUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * The data used to update SystemConfigs.
     */
    data: XOR<SystemConfigUpdateManyMutationInput, SystemConfigUncheckedUpdateManyInput>
    /**
     * Filter which SystemConfigs to update
     */
    where?: SystemConfigWhereInput
    /**
     * Limit how many SystemConfigs to update.
     */
    limit?: number
  }

  /**
   * SystemConfig upsert
   */
  export type SystemConfigUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * The filter to search for the SystemConfig to update in case it exists.
     */
    where: SystemConfigWhereUniqueInput
    /**
     * In case the SystemConfig found by the `where` argument doesn't exist, create a new SystemConfig with this data.
     */
    create: XOR<SystemConfigCreateInput, SystemConfigUncheckedCreateInput>
    /**
     * In case the SystemConfig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SystemConfigUpdateInput, SystemConfigUncheckedUpdateInput>
  }

  /**
   * SystemConfig delete
   */
  export type SystemConfigDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * Filter which SystemConfig to delete.
     */
    where: SystemConfigWhereUniqueInput
  }

  /**
   * SystemConfig deleteMany
   */
  export type SystemConfigDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemConfigs to delete
     */
    where?: SystemConfigWhereInput
    /**
     * Limit how many SystemConfigs to delete.
     */
    limit?: number
  }

  /**
   * SystemConfig without action
   */
  export type SystemConfigDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    telephone: 'telephone',
    code: 'code',
    codeClair: 'codeClair',
    nomComplet: 'nomComplet',
    adresse: 'adresse',
    photo: 'photo',
    role: 'role',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const RegistrationRequestScalarFieldEnum: {
    id: 'id',
    telephone: 'telephone',
    nomComplet: 'nomComplet',
    adresse: 'adresse',
    message: 'message',
    status: 'status',
    codeGenere: 'codeGenere',
    reviewedById: 'reviewedById',
    reviewedAt: 'reviewedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RegistrationRequestScalarFieldEnum = (typeof RegistrationRequestScalarFieldEnum)[keyof typeof RegistrationRequestScalarFieldEnum]


  export const DailyPartnerChoiceScalarFieldEnum: {
    id: 'id',
    date: 'date',
    partenaireId: 'partenaireId',
    superviseurId: 'superviseurId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DailyPartnerChoiceScalarFieldEnum = (typeof DailyPartnerChoiceScalarFieldEnum)[keyof typeof DailyPartnerChoiceScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    type: 'type',
    balance: 'balance',
    initialBalance: 'initialBalance',
    previousInitialBalance: 'previousInitialBalance',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const TransactionScalarFieldEnum: {
    id: 'id',
    montant: 'montant',
    type: 'type',
    description: 'description',
    archived: 'archived',
    archivedAt: 'archivedAt',
    envoyeurId: 'envoyeurId',
    destinataireId: 'destinataireId',
    partenaireId: 'partenaireId',
    compteOrigineId: 'compteOrigineId',
    compteDestinationId: 'compteDestinationId',
    isValidated: 'isValidated',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TransactionScalarFieldEnum = (typeof TransactionScalarFieldEnum)[keyof typeof TransactionScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    type: 'type',
    title: 'title',
    message: 'message',
    isRead: 'isRead',
    userId: 'userId',
    data: 'data',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const DailySnapshotScalarFieldEnum: {
    id: 'id',
    date: 'date',
    userId: 'userId',
    liquideDebut: 'liquideDebut',
    orangeMoneyDebut: 'orangeMoneyDebut',
    waveDebut: 'waveDebut',
    uvMasterDebut: 'uvMasterDebut',
    autresDebut: 'autresDebut',
    liquideFin: 'liquideFin',
    orangeMoneyFin: 'orangeMoneyFin',
    waveFin: 'waveFin',
    uvMasterFin: 'uvMasterFin',
    autresFin: 'autresFin',
    debutTotal: 'debutTotal',
    sortieTotal: 'sortieTotal',
    grTotal: 'grTotal',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DailySnapshotScalarFieldEnum = (typeof DailySnapshotScalarFieldEnum)[keyof typeof DailySnapshotScalarFieldEnum]


  export const SystemConfigScalarFieldEnum: {
    id: 'id',
    key: 'key',
    value: 'value',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SystemConfigScalarFieldEnum = (typeof SystemConfigScalarFieldEnum)[keyof typeof SystemConfigScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'UserStatus'
   */
  export type EnumUserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserStatus'>
    


  /**
   * Reference to a field of type 'UserStatus[]'
   */
  export type ListEnumUserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserStatus[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'AccountType'
   */
  export type EnumAccountTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AccountType'>
    


  /**
   * Reference to a field of type 'AccountType[]'
   */
  export type ListEnumAccountTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AccountType[]'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'TransactionType'
   */
  export type EnumTransactionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransactionType'>
    


  /**
   * Reference to a field of type 'TransactionType[]'
   */
  export type ListEnumTransactionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransactionType[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    


  /**
   * Reference to a field of type 'NotificationType[]'
   */
  export type ListEnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    telephone?: StringFilter<"User"> | string
    code?: StringFilter<"User"> | string
    codeClair?: StringNullableFilter<"User"> | string | null
    nomComplet?: StringFilter<"User"> | string
    adresse?: StringFilter<"User"> | string
    photo?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    status?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    accounts?: AccountListRelationFilter
    transactionsEnvoyees?: TransactionListRelationFilter
    transactionsRecues?: TransactionListRelationFilter
    transactionsPartenaire?: TransactionListRelationFilter
    notifications?: NotificationListRelationFilter
    demandesInscription?: RegistrationRequestListRelationFilter
    dailySnapshots?: DailySnapshotListRelationFilter
    choixPartenaireQuotidiens?: DailyPartnerChoiceListRelationFilter
    choixSuperviseurQuotidiens?: DailyPartnerChoiceListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    telephone?: SortOrder
    code?: SortOrder
    codeClair?: SortOrderInput | SortOrder
    nomComplet?: SortOrder
    adresse?: SortOrder
    photo?: SortOrderInput | SortOrder
    role?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    accounts?: AccountOrderByRelationAggregateInput
    transactionsEnvoyees?: TransactionOrderByRelationAggregateInput
    transactionsRecues?: TransactionOrderByRelationAggregateInput
    transactionsPartenaire?: TransactionOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    demandesInscription?: RegistrationRequestOrderByRelationAggregateInput
    dailySnapshots?: DailySnapshotOrderByRelationAggregateInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceOrderByRelationAggregateInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    telephone?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    code?: StringFilter<"User"> | string
    codeClair?: StringNullableFilter<"User"> | string | null
    nomComplet?: StringFilter<"User"> | string
    adresse?: StringFilter<"User"> | string
    photo?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    status?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    accounts?: AccountListRelationFilter
    transactionsEnvoyees?: TransactionListRelationFilter
    transactionsRecues?: TransactionListRelationFilter
    transactionsPartenaire?: TransactionListRelationFilter
    notifications?: NotificationListRelationFilter
    demandesInscription?: RegistrationRequestListRelationFilter
    dailySnapshots?: DailySnapshotListRelationFilter
    choixPartenaireQuotidiens?: DailyPartnerChoiceListRelationFilter
    choixSuperviseurQuotidiens?: DailyPartnerChoiceListRelationFilter
  }, "id" | "telephone">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    telephone?: SortOrder
    code?: SortOrder
    codeClair?: SortOrderInput | SortOrder
    nomComplet?: SortOrder
    adresse?: SortOrder
    photo?: SortOrderInput | SortOrder
    role?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    telephone?: StringWithAggregatesFilter<"User"> | string
    code?: StringWithAggregatesFilter<"User"> | string
    codeClair?: StringNullableWithAggregatesFilter<"User"> | string | null
    nomComplet?: StringWithAggregatesFilter<"User"> | string
    adresse?: StringWithAggregatesFilter<"User"> | string
    photo?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    status?: EnumUserStatusWithAggregatesFilter<"User"> | $Enums.UserStatus
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type RegistrationRequestWhereInput = {
    AND?: RegistrationRequestWhereInput | RegistrationRequestWhereInput[]
    OR?: RegistrationRequestWhereInput[]
    NOT?: RegistrationRequestWhereInput | RegistrationRequestWhereInput[]
    id?: StringFilter<"RegistrationRequest"> | string
    telephone?: StringFilter<"RegistrationRequest"> | string
    nomComplet?: StringFilter<"RegistrationRequest"> | string
    adresse?: StringFilter<"RegistrationRequest"> | string
    message?: StringNullableFilter<"RegistrationRequest"> | string | null
    status?: EnumUserStatusFilter<"RegistrationRequest"> | $Enums.UserStatus
    codeGenere?: StringNullableFilter<"RegistrationRequest"> | string | null
    reviewedById?: StringNullableFilter<"RegistrationRequest"> | string | null
    reviewedAt?: DateTimeNullableFilter<"RegistrationRequest"> | Date | string | null
    createdAt?: DateTimeFilter<"RegistrationRequest"> | Date | string
    updatedAt?: DateTimeFilter<"RegistrationRequest"> | Date | string
    reviewedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type RegistrationRequestOrderByWithRelationInput = {
    id?: SortOrder
    telephone?: SortOrder
    nomComplet?: SortOrder
    adresse?: SortOrder
    message?: SortOrderInput | SortOrder
    status?: SortOrder
    codeGenere?: SortOrderInput | SortOrder
    reviewedById?: SortOrderInput | SortOrder
    reviewedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reviewedBy?: UserOrderByWithRelationInput
  }

  export type RegistrationRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    telephone?: string
    AND?: RegistrationRequestWhereInput | RegistrationRequestWhereInput[]
    OR?: RegistrationRequestWhereInput[]
    NOT?: RegistrationRequestWhereInput | RegistrationRequestWhereInput[]
    nomComplet?: StringFilter<"RegistrationRequest"> | string
    adresse?: StringFilter<"RegistrationRequest"> | string
    message?: StringNullableFilter<"RegistrationRequest"> | string | null
    status?: EnumUserStatusFilter<"RegistrationRequest"> | $Enums.UserStatus
    codeGenere?: StringNullableFilter<"RegistrationRequest"> | string | null
    reviewedById?: StringNullableFilter<"RegistrationRequest"> | string | null
    reviewedAt?: DateTimeNullableFilter<"RegistrationRequest"> | Date | string | null
    createdAt?: DateTimeFilter<"RegistrationRequest"> | Date | string
    updatedAt?: DateTimeFilter<"RegistrationRequest"> | Date | string
    reviewedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id" | "telephone">

  export type RegistrationRequestOrderByWithAggregationInput = {
    id?: SortOrder
    telephone?: SortOrder
    nomComplet?: SortOrder
    adresse?: SortOrder
    message?: SortOrderInput | SortOrder
    status?: SortOrder
    codeGenere?: SortOrderInput | SortOrder
    reviewedById?: SortOrderInput | SortOrder
    reviewedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RegistrationRequestCountOrderByAggregateInput
    _max?: RegistrationRequestMaxOrderByAggregateInput
    _min?: RegistrationRequestMinOrderByAggregateInput
  }

  export type RegistrationRequestScalarWhereWithAggregatesInput = {
    AND?: RegistrationRequestScalarWhereWithAggregatesInput | RegistrationRequestScalarWhereWithAggregatesInput[]
    OR?: RegistrationRequestScalarWhereWithAggregatesInput[]
    NOT?: RegistrationRequestScalarWhereWithAggregatesInput | RegistrationRequestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RegistrationRequest"> | string
    telephone?: StringWithAggregatesFilter<"RegistrationRequest"> | string
    nomComplet?: StringWithAggregatesFilter<"RegistrationRequest"> | string
    adresse?: StringWithAggregatesFilter<"RegistrationRequest"> | string
    message?: StringNullableWithAggregatesFilter<"RegistrationRequest"> | string | null
    status?: EnumUserStatusWithAggregatesFilter<"RegistrationRequest"> | $Enums.UserStatus
    codeGenere?: StringNullableWithAggregatesFilter<"RegistrationRequest"> | string | null
    reviewedById?: StringNullableWithAggregatesFilter<"RegistrationRequest"> | string | null
    reviewedAt?: DateTimeNullableWithAggregatesFilter<"RegistrationRequest"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"RegistrationRequest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RegistrationRequest"> | Date | string
  }

  export type DailyPartnerChoiceWhereInput = {
    AND?: DailyPartnerChoiceWhereInput | DailyPartnerChoiceWhereInput[]
    OR?: DailyPartnerChoiceWhereInput[]
    NOT?: DailyPartnerChoiceWhereInput | DailyPartnerChoiceWhereInput[]
    id?: StringFilter<"DailyPartnerChoice"> | string
    date?: DateTimeFilter<"DailyPartnerChoice"> | Date | string
    partenaireId?: StringFilter<"DailyPartnerChoice"> | string
    superviseurId?: StringFilter<"DailyPartnerChoice"> | string
    createdAt?: DateTimeFilter<"DailyPartnerChoice"> | Date | string
    updatedAt?: DateTimeFilter<"DailyPartnerChoice"> | Date | string
    partenaire?: XOR<UserScalarRelationFilter, UserWhereInput>
    superviseur?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type DailyPartnerChoiceOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    partenaireId?: SortOrder
    superviseurId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    partenaire?: UserOrderByWithRelationInput
    superviseur?: UserOrderByWithRelationInput
  }

  export type DailyPartnerChoiceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    partenaireId_date?: DailyPartnerChoicePartenaireIdDateCompoundUniqueInput
    AND?: DailyPartnerChoiceWhereInput | DailyPartnerChoiceWhereInput[]
    OR?: DailyPartnerChoiceWhereInput[]
    NOT?: DailyPartnerChoiceWhereInput | DailyPartnerChoiceWhereInput[]
    date?: DateTimeFilter<"DailyPartnerChoice"> | Date | string
    partenaireId?: StringFilter<"DailyPartnerChoice"> | string
    superviseurId?: StringFilter<"DailyPartnerChoice"> | string
    createdAt?: DateTimeFilter<"DailyPartnerChoice"> | Date | string
    updatedAt?: DateTimeFilter<"DailyPartnerChoice"> | Date | string
    partenaire?: XOR<UserScalarRelationFilter, UserWhereInput>
    superviseur?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "partenaireId_date">

  export type DailyPartnerChoiceOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    partenaireId?: SortOrder
    superviseurId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DailyPartnerChoiceCountOrderByAggregateInput
    _max?: DailyPartnerChoiceMaxOrderByAggregateInput
    _min?: DailyPartnerChoiceMinOrderByAggregateInput
  }

  export type DailyPartnerChoiceScalarWhereWithAggregatesInput = {
    AND?: DailyPartnerChoiceScalarWhereWithAggregatesInput | DailyPartnerChoiceScalarWhereWithAggregatesInput[]
    OR?: DailyPartnerChoiceScalarWhereWithAggregatesInput[]
    NOT?: DailyPartnerChoiceScalarWhereWithAggregatesInput | DailyPartnerChoiceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DailyPartnerChoice"> | string
    date?: DateTimeWithAggregatesFilter<"DailyPartnerChoice"> | Date | string
    partenaireId?: StringWithAggregatesFilter<"DailyPartnerChoice"> | string
    superviseurId?: StringWithAggregatesFilter<"DailyPartnerChoice"> | string
    createdAt?: DateTimeWithAggregatesFilter<"DailyPartnerChoice"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DailyPartnerChoice"> | Date | string
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    type?: EnumAccountTypeFilter<"Account"> | $Enums.AccountType
    balance?: BigIntFilter<"Account"> | bigint | number
    initialBalance?: BigIntFilter<"Account"> | bigint | number
    previousInitialBalance?: BigIntFilter<"Account"> | bigint | number
    userId?: StringFilter<"Account"> | string
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    transactionsOrigine?: TransactionListRelationFilter
    transactionsDestination?: TransactionListRelationFilter
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    balance?: SortOrder
    initialBalance?: SortOrder
    previousInitialBalance?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    transactionsOrigine?: TransactionOrderByRelationAggregateInput
    transactionsDestination?: TransactionOrderByRelationAggregateInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_type?: AccountUserIdTypeCompoundUniqueInput
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    type?: EnumAccountTypeFilter<"Account"> | $Enums.AccountType
    balance?: BigIntFilter<"Account"> | bigint | number
    initialBalance?: BigIntFilter<"Account"> | bigint | number
    previousInitialBalance?: BigIntFilter<"Account"> | bigint | number
    userId?: StringFilter<"Account"> | string
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    transactionsOrigine?: TransactionListRelationFilter
    transactionsDestination?: TransactionListRelationFilter
  }, "id" | "userId_type">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    balance?: SortOrder
    initialBalance?: SortOrder
    previousInitialBalance?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    type?: EnumAccountTypeWithAggregatesFilter<"Account"> | $Enums.AccountType
    balance?: BigIntWithAggregatesFilter<"Account"> | bigint | number
    initialBalance?: BigIntWithAggregatesFilter<"Account"> | bigint | number
    previousInitialBalance?: BigIntWithAggregatesFilter<"Account"> | bigint | number
    userId?: StringWithAggregatesFilter<"Account"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
  }

  export type TransactionWhereInput = {
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    id?: StringFilter<"Transaction"> | string
    montant?: BigIntFilter<"Transaction"> | bigint | number
    type?: EnumTransactionTypeFilter<"Transaction"> | $Enums.TransactionType
    description?: StringNullableFilter<"Transaction"> | string | null
    archived?: BoolNullableFilter<"Transaction"> | boolean | null
    archivedAt?: DateTimeNullableFilter<"Transaction"> | Date | string | null
    envoyeurId?: StringFilter<"Transaction"> | string
    destinataireId?: StringNullableFilter<"Transaction"> | string | null
    partenaireId?: StringNullableFilter<"Transaction"> | string | null
    compteOrigineId?: StringNullableFilter<"Transaction"> | string | null
    compteDestinationId?: StringNullableFilter<"Transaction"> | string | null
    isValidated?: BoolFilter<"Transaction"> | boolean
    metadata?: StringNullableFilter<"Transaction"> | string | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
    envoyeur?: XOR<UserScalarRelationFilter, UserWhereInput>
    destinataire?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    partenaire?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    compteOrigine?: XOR<AccountNullableScalarRelationFilter, AccountWhereInput> | null
    compteDestination?: XOR<AccountNullableScalarRelationFilter, AccountWhereInput> | null
  }

  export type TransactionOrderByWithRelationInput = {
    id?: SortOrder
    montant?: SortOrder
    type?: SortOrder
    description?: SortOrderInput | SortOrder
    archived?: SortOrderInput | SortOrder
    archivedAt?: SortOrderInput | SortOrder
    envoyeurId?: SortOrder
    destinataireId?: SortOrderInput | SortOrder
    partenaireId?: SortOrderInput | SortOrder
    compteOrigineId?: SortOrderInput | SortOrder
    compteDestinationId?: SortOrderInput | SortOrder
    isValidated?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    envoyeur?: UserOrderByWithRelationInput
    destinataire?: UserOrderByWithRelationInput
    partenaire?: UserOrderByWithRelationInput
    compteOrigine?: AccountOrderByWithRelationInput
    compteDestination?: AccountOrderByWithRelationInput
  }

  export type TransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    montant?: BigIntFilter<"Transaction"> | bigint | number
    type?: EnumTransactionTypeFilter<"Transaction"> | $Enums.TransactionType
    description?: StringNullableFilter<"Transaction"> | string | null
    archived?: BoolNullableFilter<"Transaction"> | boolean | null
    archivedAt?: DateTimeNullableFilter<"Transaction"> | Date | string | null
    envoyeurId?: StringFilter<"Transaction"> | string
    destinataireId?: StringNullableFilter<"Transaction"> | string | null
    partenaireId?: StringNullableFilter<"Transaction"> | string | null
    compteOrigineId?: StringNullableFilter<"Transaction"> | string | null
    compteDestinationId?: StringNullableFilter<"Transaction"> | string | null
    isValidated?: BoolFilter<"Transaction"> | boolean
    metadata?: StringNullableFilter<"Transaction"> | string | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
    envoyeur?: XOR<UserScalarRelationFilter, UserWhereInput>
    destinataire?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    partenaire?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    compteOrigine?: XOR<AccountNullableScalarRelationFilter, AccountWhereInput> | null
    compteDestination?: XOR<AccountNullableScalarRelationFilter, AccountWhereInput> | null
  }, "id">

  export type TransactionOrderByWithAggregationInput = {
    id?: SortOrder
    montant?: SortOrder
    type?: SortOrder
    description?: SortOrderInput | SortOrder
    archived?: SortOrderInput | SortOrder
    archivedAt?: SortOrderInput | SortOrder
    envoyeurId?: SortOrder
    destinataireId?: SortOrderInput | SortOrder
    partenaireId?: SortOrderInput | SortOrder
    compteOrigineId?: SortOrderInput | SortOrder
    compteDestinationId?: SortOrderInput | SortOrder
    isValidated?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TransactionCountOrderByAggregateInput
    _avg?: TransactionAvgOrderByAggregateInput
    _max?: TransactionMaxOrderByAggregateInput
    _min?: TransactionMinOrderByAggregateInput
    _sum?: TransactionSumOrderByAggregateInput
  }

  export type TransactionScalarWhereWithAggregatesInput = {
    AND?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    OR?: TransactionScalarWhereWithAggregatesInput[]
    NOT?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Transaction"> | string
    montant?: BigIntWithAggregatesFilter<"Transaction"> | bigint | number
    type?: EnumTransactionTypeWithAggregatesFilter<"Transaction"> | $Enums.TransactionType
    description?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    archived?: BoolNullableWithAggregatesFilter<"Transaction"> | boolean | null
    archivedAt?: DateTimeNullableWithAggregatesFilter<"Transaction"> | Date | string | null
    envoyeurId?: StringWithAggregatesFilter<"Transaction"> | string
    destinataireId?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    partenaireId?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    compteOrigineId?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    compteDestinationId?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    isValidated?: BoolWithAggregatesFilter<"Transaction"> | boolean
    metadata?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    userId?: StringFilter<"Notification"> | string
    data?: JsonNullableFilter<"Notification">
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    userId?: SortOrder
    data?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    userId?: StringFilter<"Notification"> | string
    data?: JsonNullableFilter<"Notification">
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    userId?: SortOrder
    data?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    type?: EnumNotificationTypeWithAggregatesFilter<"Notification"> | $Enums.NotificationType
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    userId?: StringWithAggregatesFilter<"Notification"> | string
    data?: JsonNullableWithAggregatesFilter<"Notification">
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type DailySnapshotWhereInput = {
    AND?: DailySnapshotWhereInput | DailySnapshotWhereInput[]
    OR?: DailySnapshotWhereInput[]
    NOT?: DailySnapshotWhereInput | DailySnapshotWhereInput[]
    id?: StringFilter<"DailySnapshot"> | string
    date?: DateTimeFilter<"DailySnapshot"> | Date | string
    userId?: StringFilter<"DailySnapshot"> | string
    liquideDebut?: BigIntFilter<"DailySnapshot"> | bigint | number
    orangeMoneyDebut?: BigIntFilter<"DailySnapshot"> | bigint | number
    waveDebut?: BigIntFilter<"DailySnapshot"> | bigint | number
    uvMasterDebut?: BigIntFilter<"DailySnapshot"> | bigint | number
    autresDebut?: BigIntFilter<"DailySnapshot"> | bigint | number
    liquideFin?: BigIntFilter<"DailySnapshot"> | bigint | number
    orangeMoneyFin?: BigIntFilter<"DailySnapshot"> | bigint | number
    waveFin?: BigIntFilter<"DailySnapshot"> | bigint | number
    uvMasterFin?: BigIntFilter<"DailySnapshot"> | bigint | number
    autresFin?: BigIntFilter<"DailySnapshot"> | bigint | number
    debutTotal?: BigIntFilter<"DailySnapshot"> | bigint | number
    sortieTotal?: BigIntFilter<"DailySnapshot"> | bigint | number
    grTotal?: BigIntFilter<"DailySnapshot"> | bigint | number
    createdAt?: DateTimeFilter<"DailySnapshot"> | Date | string
    updatedAt?: DateTimeFilter<"DailySnapshot"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type DailySnapshotOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    userId?: SortOrder
    liquideDebut?: SortOrder
    orangeMoneyDebut?: SortOrder
    waveDebut?: SortOrder
    uvMasterDebut?: SortOrder
    autresDebut?: SortOrder
    liquideFin?: SortOrder
    orangeMoneyFin?: SortOrder
    waveFin?: SortOrder
    uvMasterFin?: SortOrder
    autresFin?: SortOrder
    debutTotal?: SortOrder
    sortieTotal?: SortOrder
    grTotal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type DailySnapshotWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_date?: DailySnapshotUserIdDateCompoundUniqueInput
    AND?: DailySnapshotWhereInput | DailySnapshotWhereInput[]
    OR?: DailySnapshotWhereInput[]
    NOT?: DailySnapshotWhereInput | DailySnapshotWhereInput[]
    date?: DateTimeFilter<"DailySnapshot"> | Date | string
    userId?: StringFilter<"DailySnapshot"> | string
    liquideDebut?: BigIntFilter<"DailySnapshot"> | bigint | number
    orangeMoneyDebut?: BigIntFilter<"DailySnapshot"> | bigint | number
    waveDebut?: BigIntFilter<"DailySnapshot"> | bigint | number
    uvMasterDebut?: BigIntFilter<"DailySnapshot"> | bigint | number
    autresDebut?: BigIntFilter<"DailySnapshot"> | bigint | number
    liquideFin?: BigIntFilter<"DailySnapshot"> | bigint | number
    orangeMoneyFin?: BigIntFilter<"DailySnapshot"> | bigint | number
    waveFin?: BigIntFilter<"DailySnapshot"> | bigint | number
    uvMasterFin?: BigIntFilter<"DailySnapshot"> | bigint | number
    autresFin?: BigIntFilter<"DailySnapshot"> | bigint | number
    debutTotal?: BigIntFilter<"DailySnapshot"> | bigint | number
    sortieTotal?: BigIntFilter<"DailySnapshot"> | bigint | number
    grTotal?: BigIntFilter<"DailySnapshot"> | bigint | number
    createdAt?: DateTimeFilter<"DailySnapshot"> | Date | string
    updatedAt?: DateTimeFilter<"DailySnapshot"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId_date">

  export type DailySnapshotOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    userId?: SortOrder
    liquideDebut?: SortOrder
    orangeMoneyDebut?: SortOrder
    waveDebut?: SortOrder
    uvMasterDebut?: SortOrder
    autresDebut?: SortOrder
    liquideFin?: SortOrder
    orangeMoneyFin?: SortOrder
    waveFin?: SortOrder
    uvMasterFin?: SortOrder
    autresFin?: SortOrder
    debutTotal?: SortOrder
    sortieTotal?: SortOrder
    grTotal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DailySnapshotCountOrderByAggregateInput
    _avg?: DailySnapshotAvgOrderByAggregateInput
    _max?: DailySnapshotMaxOrderByAggregateInput
    _min?: DailySnapshotMinOrderByAggregateInput
    _sum?: DailySnapshotSumOrderByAggregateInput
  }

  export type DailySnapshotScalarWhereWithAggregatesInput = {
    AND?: DailySnapshotScalarWhereWithAggregatesInput | DailySnapshotScalarWhereWithAggregatesInput[]
    OR?: DailySnapshotScalarWhereWithAggregatesInput[]
    NOT?: DailySnapshotScalarWhereWithAggregatesInput | DailySnapshotScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DailySnapshot"> | string
    date?: DateTimeWithAggregatesFilter<"DailySnapshot"> | Date | string
    userId?: StringWithAggregatesFilter<"DailySnapshot"> | string
    liquideDebut?: BigIntWithAggregatesFilter<"DailySnapshot"> | bigint | number
    orangeMoneyDebut?: BigIntWithAggregatesFilter<"DailySnapshot"> | bigint | number
    waveDebut?: BigIntWithAggregatesFilter<"DailySnapshot"> | bigint | number
    uvMasterDebut?: BigIntWithAggregatesFilter<"DailySnapshot"> | bigint | number
    autresDebut?: BigIntWithAggregatesFilter<"DailySnapshot"> | bigint | number
    liquideFin?: BigIntWithAggregatesFilter<"DailySnapshot"> | bigint | number
    orangeMoneyFin?: BigIntWithAggregatesFilter<"DailySnapshot"> | bigint | number
    waveFin?: BigIntWithAggregatesFilter<"DailySnapshot"> | bigint | number
    uvMasterFin?: BigIntWithAggregatesFilter<"DailySnapshot"> | bigint | number
    autresFin?: BigIntWithAggregatesFilter<"DailySnapshot"> | bigint | number
    debutTotal?: BigIntWithAggregatesFilter<"DailySnapshot"> | bigint | number
    sortieTotal?: BigIntWithAggregatesFilter<"DailySnapshot"> | bigint | number
    grTotal?: BigIntWithAggregatesFilter<"DailySnapshot"> | bigint | number
    createdAt?: DateTimeWithAggregatesFilter<"DailySnapshot"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DailySnapshot"> | Date | string
  }

  export type SystemConfigWhereInput = {
    AND?: SystemConfigWhereInput | SystemConfigWhereInput[]
    OR?: SystemConfigWhereInput[]
    NOT?: SystemConfigWhereInput | SystemConfigWhereInput[]
    id?: StringFilter<"SystemConfig"> | string
    key?: StringFilter<"SystemConfig"> | string
    value?: StringFilter<"SystemConfig"> | string
    createdAt?: DateTimeFilter<"SystemConfig"> | Date | string
    updatedAt?: DateTimeFilter<"SystemConfig"> | Date | string
  }

  export type SystemConfigOrderByWithRelationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemConfigWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    key?: string
    AND?: SystemConfigWhereInput | SystemConfigWhereInput[]
    OR?: SystemConfigWhereInput[]
    NOT?: SystemConfigWhereInput | SystemConfigWhereInput[]
    value?: StringFilter<"SystemConfig"> | string
    createdAt?: DateTimeFilter<"SystemConfig"> | Date | string
    updatedAt?: DateTimeFilter<"SystemConfig"> | Date | string
  }, "id" | "key">

  export type SystemConfigOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SystemConfigCountOrderByAggregateInput
    _max?: SystemConfigMaxOrderByAggregateInput
    _min?: SystemConfigMinOrderByAggregateInput
  }

  export type SystemConfigScalarWhereWithAggregatesInput = {
    AND?: SystemConfigScalarWhereWithAggregatesInput | SystemConfigScalarWhereWithAggregatesInput[]
    OR?: SystemConfigScalarWhereWithAggregatesInput[]
    NOT?: SystemConfigScalarWhereWithAggregatesInput | SystemConfigScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SystemConfig"> | string
    key?: StringWithAggregatesFilter<"SystemConfig"> | string
    value?: StringWithAggregatesFilter<"SystemConfig"> | string
    createdAt?: DateTimeWithAggregatesFilter<"SystemConfig"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SystemConfig"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    telephone: string
    code: string
    codeClair?: string | null
    nomComplet: string
    adresse: string
    photo?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    transactionsEnvoyees?: TransactionCreateNestedManyWithoutEnvoyeurInput
    transactionsRecues?: TransactionCreateNestedManyWithoutDestinataireInput
    transactionsPartenaire?: TransactionCreateNestedManyWithoutPartenaireInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    demandesInscription?: RegistrationRequestCreateNestedManyWithoutReviewedByInput
    dailySnapshots?: DailySnapshotCreateNestedManyWithoutUserInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceCreateNestedManyWithoutPartenaireInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceCreateNestedManyWithoutSuperviseurInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    telephone: string
    code: string
    codeClair?: string | null
    nomComplet: string
    adresse: string
    photo?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    transactionsEnvoyees?: TransactionUncheckedCreateNestedManyWithoutEnvoyeurInput
    transactionsRecues?: TransactionUncheckedCreateNestedManyWithoutDestinataireInput
    transactionsPartenaire?: TransactionUncheckedCreateNestedManyWithoutPartenaireInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    demandesInscription?: RegistrationRequestUncheckedCreateNestedManyWithoutReviewedByInput
    dailySnapshots?: DailySnapshotUncheckedCreateNestedManyWithoutUserInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceUncheckedCreateNestedManyWithoutPartenaireInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceUncheckedCreateNestedManyWithoutSuperviseurInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    codeClair?: NullableStringFieldUpdateOperationsInput | string | null
    nomComplet?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    transactionsEnvoyees?: TransactionUpdateManyWithoutEnvoyeurNestedInput
    transactionsRecues?: TransactionUpdateManyWithoutDestinataireNestedInput
    transactionsPartenaire?: TransactionUpdateManyWithoutPartenaireNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    demandesInscription?: RegistrationRequestUpdateManyWithoutReviewedByNestedInput
    dailySnapshots?: DailySnapshotUpdateManyWithoutUserNestedInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceUpdateManyWithoutPartenaireNestedInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceUpdateManyWithoutSuperviseurNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    codeClair?: NullableStringFieldUpdateOperationsInput | string | null
    nomComplet?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    transactionsEnvoyees?: TransactionUncheckedUpdateManyWithoutEnvoyeurNestedInput
    transactionsRecues?: TransactionUncheckedUpdateManyWithoutDestinataireNestedInput
    transactionsPartenaire?: TransactionUncheckedUpdateManyWithoutPartenaireNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    demandesInscription?: RegistrationRequestUncheckedUpdateManyWithoutReviewedByNestedInput
    dailySnapshots?: DailySnapshotUncheckedUpdateManyWithoutUserNestedInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceUncheckedUpdateManyWithoutPartenaireNestedInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceUncheckedUpdateManyWithoutSuperviseurNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    telephone: string
    code: string
    codeClair?: string | null
    nomComplet: string
    adresse: string
    photo?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    codeClair?: NullableStringFieldUpdateOperationsInput | string | null
    nomComplet?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    codeClair?: NullableStringFieldUpdateOperationsInput | string | null
    nomComplet?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegistrationRequestCreateInput = {
    id?: string
    telephone: string
    nomComplet: string
    adresse: string
    message?: string | null
    status?: $Enums.UserStatus
    codeGenere?: string | null
    reviewedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reviewedBy?: UserCreateNestedOneWithoutDemandesInscriptionInput
  }

  export type RegistrationRequestUncheckedCreateInput = {
    id?: string
    telephone: string
    nomComplet: string
    adresse: string
    message?: string | null
    status?: $Enums.UserStatus
    codeGenere?: string | null
    reviewedById?: string | null
    reviewedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RegistrationRequestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    nomComplet?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    codeGenere?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedBy?: UserUpdateOneWithoutDemandesInscriptionNestedInput
  }

  export type RegistrationRequestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    nomComplet?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    codeGenere?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedById?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegistrationRequestCreateManyInput = {
    id?: string
    telephone: string
    nomComplet: string
    adresse: string
    message?: string | null
    status?: $Enums.UserStatus
    codeGenere?: string | null
    reviewedById?: string | null
    reviewedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RegistrationRequestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    nomComplet?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    codeGenere?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegistrationRequestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    nomComplet?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    codeGenere?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedById?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyPartnerChoiceCreateInput = {
    id?: string
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    partenaire: UserCreateNestedOneWithoutChoixPartenaireQuotidiensInput
    superviseur: UserCreateNestedOneWithoutChoixSuperviseurQuotidiensInput
  }

  export type DailyPartnerChoiceUncheckedCreateInput = {
    id?: string
    date: Date | string
    partenaireId: string
    superviseurId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DailyPartnerChoiceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    partenaire?: UserUpdateOneRequiredWithoutChoixPartenaireQuotidiensNestedInput
    superviseur?: UserUpdateOneRequiredWithoutChoixSuperviseurQuotidiensNestedInput
  }

  export type DailyPartnerChoiceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    partenaireId?: StringFieldUpdateOperationsInput | string
    superviseurId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyPartnerChoiceCreateManyInput = {
    id?: string
    date: Date | string
    partenaireId: string
    superviseurId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DailyPartnerChoiceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyPartnerChoiceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    partenaireId?: StringFieldUpdateOperationsInput | string
    superviseurId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateInput = {
    id?: string
    type: $Enums.AccountType
    balance?: bigint | number
    initialBalance?: bigint | number
    previousInitialBalance?: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAccountsInput
    transactionsOrigine?: TransactionCreateNestedManyWithoutCompteOrigineInput
    transactionsDestination?: TransactionCreateNestedManyWithoutCompteDestinationInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    type: $Enums.AccountType
    balance?: bigint | number
    initialBalance?: bigint | number
    previousInitialBalance?: bigint | number
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    transactionsOrigine?: TransactionUncheckedCreateNestedManyWithoutCompteOrigineInput
    transactionsDestination?: TransactionUncheckedCreateNestedManyWithoutCompteDestinationInput
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    balance?: BigIntFieldUpdateOperationsInput | bigint | number
    initialBalance?: BigIntFieldUpdateOperationsInput | bigint | number
    previousInitialBalance?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
    transactionsOrigine?: TransactionUpdateManyWithoutCompteOrigineNestedInput
    transactionsDestination?: TransactionUpdateManyWithoutCompteDestinationNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    balance?: BigIntFieldUpdateOperationsInput | bigint | number
    initialBalance?: BigIntFieldUpdateOperationsInput | bigint | number
    previousInitialBalance?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactionsOrigine?: TransactionUncheckedUpdateManyWithoutCompteOrigineNestedInput
    transactionsDestination?: TransactionUncheckedUpdateManyWithoutCompteDestinationNestedInput
  }

  export type AccountCreateManyInput = {
    id?: string
    type: $Enums.AccountType
    balance?: bigint | number
    initialBalance?: bigint | number
    previousInitialBalance?: bigint | number
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    balance?: BigIntFieldUpdateOperationsInput | bigint | number
    initialBalance?: BigIntFieldUpdateOperationsInput | bigint | number
    previousInitialBalance?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    balance?: BigIntFieldUpdateOperationsInput | bigint | number
    initialBalance?: BigIntFieldUpdateOperationsInput | bigint | number
    previousInitialBalance?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateInput = {
    id?: string
    montant: bigint | number
    type: $Enums.TransactionType
    description?: string | null
    archived?: boolean | null
    archivedAt?: Date | string | null
    isValidated?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    envoyeur: UserCreateNestedOneWithoutTransactionsEnvoyeesInput
    destinataire?: UserCreateNestedOneWithoutTransactionsRecuesInput
    partenaire?: UserCreateNestedOneWithoutTransactionsPartenaireInput
    compteOrigine?: AccountCreateNestedOneWithoutTransactionsOrigineInput
    compteDestination?: AccountCreateNestedOneWithoutTransactionsDestinationInput
  }

  export type TransactionUncheckedCreateInput = {
    id?: string
    montant: bigint | number
    type: $Enums.TransactionType
    description?: string | null
    archived?: boolean | null
    archivedAt?: Date | string | null
    envoyeurId: string
    destinataireId?: string | null
    partenaireId?: string | null
    compteOrigineId?: string | null
    compteDestinationId?: string | null
    isValidated?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    montant?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isValidated?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    envoyeur?: UserUpdateOneRequiredWithoutTransactionsEnvoyeesNestedInput
    destinataire?: UserUpdateOneWithoutTransactionsRecuesNestedInput
    partenaire?: UserUpdateOneWithoutTransactionsPartenaireNestedInput
    compteOrigine?: AccountUpdateOneWithoutTransactionsOrigineNestedInput
    compteDestination?: AccountUpdateOneWithoutTransactionsDestinationNestedInput
  }

  export type TransactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    montant?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    envoyeurId?: StringFieldUpdateOperationsInput | string
    destinataireId?: NullableStringFieldUpdateOperationsInput | string | null
    partenaireId?: NullableStringFieldUpdateOperationsInput | string | null
    compteOrigineId?: NullableStringFieldUpdateOperationsInput | string | null
    compteDestinationId?: NullableStringFieldUpdateOperationsInput | string | null
    isValidated?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateManyInput = {
    id?: string
    montant: bigint | number
    type: $Enums.TransactionType
    description?: string | null
    archived?: boolean | null
    archivedAt?: Date | string | null
    envoyeurId: string
    destinataireId?: string | null
    partenaireId?: string | null
    compteOrigineId?: string | null
    compteDestinationId?: string | null
    isValidated?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    montant?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isValidated?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    montant?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    envoyeurId?: StringFieldUpdateOperationsInput | string
    destinataireId?: NullableStringFieldUpdateOperationsInput | string | null
    partenaireId?: NullableStringFieldUpdateOperationsInput | string | null
    compteOrigineId?: NullableStringFieldUpdateOperationsInput | string | null
    compteDestinationId?: NullableStringFieldUpdateOperationsInput | string | null
    isValidated?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    id?: string
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    userId: string
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: string
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    userId: string
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailySnapshotCreateInput = {
    id?: string
    date: Date | string
    liquideDebut?: bigint | number
    orangeMoneyDebut?: bigint | number
    waveDebut?: bigint | number
    uvMasterDebut?: bigint | number
    autresDebut?: bigint | number
    liquideFin?: bigint | number
    orangeMoneyFin?: bigint | number
    waveFin?: bigint | number
    uvMasterFin?: bigint | number
    autresFin?: bigint | number
    debutTotal?: bigint | number
    sortieTotal?: bigint | number
    grTotal?: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutDailySnapshotsInput
  }

  export type DailySnapshotUncheckedCreateInput = {
    id?: string
    date: Date | string
    userId: string
    liquideDebut?: bigint | number
    orangeMoneyDebut?: bigint | number
    waveDebut?: bigint | number
    uvMasterDebut?: bigint | number
    autresDebut?: bigint | number
    liquideFin?: bigint | number
    orangeMoneyFin?: bigint | number
    waveFin?: bigint | number
    uvMasterFin?: bigint | number
    autresFin?: bigint | number
    debutTotal?: bigint | number
    sortieTotal?: bigint | number
    grTotal?: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DailySnapshotUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    liquideDebut?: BigIntFieldUpdateOperationsInput | bigint | number
    orangeMoneyDebut?: BigIntFieldUpdateOperationsInput | bigint | number
    waveDebut?: BigIntFieldUpdateOperationsInput | bigint | number
    uvMasterDebut?: BigIntFieldUpdateOperationsInput | bigint | number
    autresDebut?: BigIntFieldUpdateOperationsInput | bigint | number
    liquideFin?: BigIntFieldUpdateOperationsInput | bigint | number
    orangeMoneyFin?: BigIntFieldUpdateOperationsInput | bigint | number
    waveFin?: BigIntFieldUpdateOperationsInput | bigint | number
    uvMasterFin?: BigIntFieldUpdateOperationsInput | bigint | number
    autresFin?: BigIntFieldUpdateOperationsInput | bigint | number
    debutTotal?: BigIntFieldUpdateOperationsInput | bigint | number
    sortieTotal?: BigIntFieldUpdateOperationsInput | bigint | number
    grTotal?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDailySnapshotsNestedInput
  }

  export type DailySnapshotUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    liquideDebut?: BigIntFieldUpdateOperationsInput | bigint | number
    orangeMoneyDebut?: BigIntFieldUpdateOperationsInput | bigint | number
    waveDebut?: BigIntFieldUpdateOperationsInput | bigint | number
    uvMasterDebut?: BigIntFieldUpdateOperationsInput | bigint | number
    autresDebut?: BigIntFieldUpdateOperationsInput | bigint | number
    liquideFin?: BigIntFieldUpdateOperationsInput | bigint | number
    orangeMoneyFin?: BigIntFieldUpdateOperationsInput | bigint | number
    waveFin?: BigIntFieldUpdateOperationsInput | bigint | number
    uvMasterFin?: BigIntFieldUpdateOperationsInput | bigint | number
    autresFin?: BigIntFieldUpdateOperationsInput | bigint | number
    debutTotal?: BigIntFieldUpdateOperationsInput | bigint | number
    sortieTotal?: BigIntFieldUpdateOperationsInput | bigint | number
    grTotal?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailySnapshotCreateManyInput = {
    id?: string
    date: Date | string
    userId: string
    liquideDebut?: bigint | number
    orangeMoneyDebut?: bigint | number
    waveDebut?: bigint | number
    uvMasterDebut?: bigint | number
    autresDebut?: bigint | number
    liquideFin?: bigint | number
    orangeMoneyFin?: bigint | number
    waveFin?: bigint | number
    uvMasterFin?: bigint | number
    autresFin?: bigint | number
    debutTotal?: bigint | number
    sortieTotal?: bigint | number
    grTotal?: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DailySnapshotUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    liquideDebut?: BigIntFieldUpdateOperationsInput | bigint | number
    orangeMoneyDebut?: BigIntFieldUpdateOperationsInput | bigint | number
    waveDebut?: BigIntFieldUpdateOperationsInput | bigint | number
    uvMasterDebut?: BigIntFieldUpdateOperationsInput | bigint | number
    autresDebut?: BigIntFieldUpdateOperationsInput | bigint | number
    liquideFin?: BigIntFieldUpdateOperationsInput | bigint | number
    orangeMoneyFin?: BigIntFieldUpdateOperationsInput | bigint | number
    waveFin?: BigIntFieldUpdateOperationsInput | bigint | number
    uvMasterFin?: BigIntFieldUpdateOperationsInput | bigint | number
    autresFin?: BigIntFieldUpdateOperationsInput | bigint | number
    debutTotal?: BigIntFieldUpdateOperationsInput | bigint | number
    sortieTotal?: BigIntFieldUpdateOperationsInput | bigint | number
    grTotal?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailySnapshotUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    liquideDebut?: BigIntFieldUpdateOperationsInput | bigint | number
    orangeMoneyDebut?: BigIntFieldUpdateOperationsInput | bigint | number
    waveDebut?: BigIntFieldUpdateOperationsInput | bigint | number
    uvMasterDebut?: BigIntFieldUpdateOperationsInput | bigint | number
    autresDebut?: BigIntFieldUpdateOperationsInput | bigint | number
    liquideFin?: BigIntFieldUpdateOperationsInput | bigint | number
    orangeMoneyFin?: BigIntFieldUpdateOperationsInput | bigint | number
    waveFin?: BigIntFieldUpdateOperationsInput | bigint | number
    uvMasterFin?: BigIntFieldUpdateOperationsInput | bigint | number
    autresFin?: BigIntFieldUpdateOperationsInput | bigint | number
    debutTotal?: BigIntFieldUpdateOperationsInput | bigint | number
    sortieTotal?: BigIntFieldUpdateOperationsInput | bigint | number
    grTotal?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemConfigCreateInput = {
    id?: string
    key: string
    value: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemConfigUncheckedCreateInput = {
    id?: string
    key: string
    value: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemConfigUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemConfigUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemConfigCreateManyInput = {
    id?: string
    key: string
    value: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemConfigUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemConfigUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type EnumUserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusFilter<$PrismaModel> | $Enums.UserStatus
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type TransactionListRelationFilter = {
    every?: TransactionWhereInput
    some?: TransactionWhereInput
    none?: TransactionWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type RegistrationRequestListRelationFilter = {
    every?: RegistrationRequestWhereInput
    some?: RegistrationRequestWhereInput
    none?: RegistrationRequestWhereInput
  }

  export type DailySnapshotListRelationFilter = {
    every?: DailySnapshotWhereInput
    some?: DailySnapshotWhereInput
    none?: DailySnapshotWhereInput
  }

  export type DailyPartnerChoiceListRelationFilter = {
    every?: DailyPartnerChoiceWhereInput
    some?: DailyPartnerChoiceWhereInput
    none?: DailyPartnerChoiceWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RegistrationRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DailySnapshotOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DailyPartnerChoiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    telephone?: SortOrder
    code?: SortOrder
    codeClair?: SortOrder
    nomComplet?: SortOrder
    adresse?: SortOrder
    photo?: SortOrder
    role?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    telephone?: SortOrder
    code?: SortOrder
    codeClair?: SortOrder
    nomComplet?: SortOrder
    adresse?: SortOrder
    photo?: SortOrder
    role?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    telephone?: SortOrder
    code?: SortOrder
    codeClair?: SortOrder
    nomComplet?: SortOrder
    adresse?: SortOrder
    photo?: SortOrder
    role?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type EnumUserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusWithAggregatesFilter<$PrismaModel> | $Enums.UserStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserStatusFilter<$PrismaModel>
    _max?: NestedEnumUserStatusFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type RegistrationRequestCountOrderByAggregateInput = {
    id?: SortOrder
    telephone?: SortOrder
    nomComplet?: SortOrder
    adresse?: SortOrder
    message?: SortOrder
    status?: SortOrder
    codeGenere?: SortOrder
    reviewedById?: SortOrder
    reviewedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RegistrationRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    telephone?: SortOrder
    nomComplet?: SortOrder
    adresse?: SortOrder
    message?: SortOrder
    status?: SortOrder
    codeGenere?: SortOrder
    reviewedById?: SortOrder
    reviewedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RegistrationRequestMinOrderByAggregateInput = {
    id?: SortOrder
    telephone?: SortOrder
    nomComplet?: SortOrder
    adresse?: SortOrder
    message?: SortOrder
    status?: SortOrder
    codeGenere?: SortOrder
    reviewedById?: SortOrder
    reviewedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type DailyPartnerChoicePartenaireIdDateCompoundUniqueInput = {
    partenaireId: string
    date: Date | string
  }

  export type DailyPartnerChoiceCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    partenaireId?: SortOrder
    superviseurId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DailyPartnerChoiceMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    partenaireId?: SortOrder
    superviseurId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DailyPartnerChoiceMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    partenaireId?: SortOrder
    superviseurId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumAccountTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountType | EnumAccountTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAccountTypeFilter<$PrismaModel> | $Enums.AccountType
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type AccountUserIdTypeCompoundUniqueInput = {
    userId: string
    type: $Enums.AccountType
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    balance?: SortOrder
    initialBalance?: SortOrder
    previousInitialBalance?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    balance?: SortOrder
    initialBalance?: SortOrder
    previousInitialBalance?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    balance?: SortOrder
    initialBalance?: SortOrder
    previousInitialBalance?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    balance?: SortOrder
    initialBalance?: SortOrder
    previousInitialBalance?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    balance?: SortOrder
    initialBalance?: SortOrder
    previousInitialBalance?: SortOrder
  }

  export type EnumAccountTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountType | EnumAccountTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAccountTypeWithAggregatesFilter<$PrismaModel> | $Enums.AccountType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAccountTypeFilter<$PrismaModel>
    _max?: NestedEnumAccountTypeFilter<$PrismaModel>
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type EnumTransactionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeFilter<$PrismaModel> | $Enums.TransactionType
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type AccountNullableScalarRelationFilter = {
    is?: AccountWhereInput | null
    isNot?: AccountWhereInput | null
  }

  export type TransactionCountOrderByAggregateInput = {
    id?: SortOrder
    montant?: SortOrder
    type?: SortOrder
    description?: SortOrder
    archived?: SortOrder
    archivedAt?: SortOrder
    envoyeurId?: SortOrder
    destinataireId?: SortOrder
    partenaireId?: SortOrder
    compteOrigineId?: SortOrder
    compteDestinationId?: SortOrder
    isValidated?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionAvgOrderByAggregateInput = {
    montant?: SortOrder
  }

  export type TransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    montant?: SortOrder
    type?: SortOrder
    description?: SortOrder
    archived?: SortOrder
    archivedAt?: SortOrder
    envoyeurId?: SortOrder
    destinataireId?: SortOrder
    partenaireId?: SortOrder
    compteOrigineId?: SortOrder
    compteDestinationId?: SortOrder
    isValidated?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionMinOrderByAggregateInput = {
    id?: SortOrder
    montant?: SortOrder
    type?: SortOrder
    description?: SortOrder
    archived?: SortOrder
    archivedAt?: SortOrder
    envoyeurId?: SortOrder
    destinataireId?: SortOrder
    partenaireId?: SortOrder
    compteOrigineId?: SortOrder
    compteDestinationId?: SortOrder
    isValidated?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionSumOrderByAggregateInput = {
    montant?: SortOrder
  }

  export type EnumTransactionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeWithAggregatesFilter<$PrismaModel> | $Enums.TransactionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransactionTypeFilter<$PrismaModel>
    _max?: NestedEnumTransactionTypeFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    userId?: SortOrder
    data?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type DailySnapshotUserIdDateCompoundUniqueInput = {
    userId: string
    date: Date | string
  }

  export type DailySnapshotCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    userId?: SortOrder
    liquideDebut?: SortOrder
    orangeMoneyDebut?: SortOrder
    waveDebut?: SortOrder
    uvMasterDebut?: SortOrder
    autresDebut?: SortOrder
    liquideFin?: SortOrder
    orangeMoneyFin?: SortOrder
    waveFin?: SortOrder
    uvMasterFin?: SortOrder
    autresFin?: SortOrder
    debutTotal?: SortOrder
    sortieTotal?: SortOrder
    grTotal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DailySnapshotAvgOrderByAggregateInput = {
    liquideDebut?: SortOrder
    orangeMoneyDebut?: SortOrder
    waveDebut?: SortOrder
    uvMasterDebut?: SortOrder
    autresDebut?: SortOrder
    liquideFin?: SortOrder
    orangeMoneyFin?: SortOrder
    waveFin?: SortOrder
    uvMasterFin?: SortOrder
    autresFin?: SortOrder
    debutTotal?: SortOrder
    sortieTotal?: SortOrder
    grTotal?: SortOrder
  }

  export type DailySnapshotMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    userId?: SortOrder
    liquideDebut?: SortOrder
    orangeMoneyDebut?: SortOrder
    waveDebut?: SortOrder
    uvMasterDebut?: SortOrder
    autresDebut?: SortOrder
    liquideFin?: SortOrder
    orangeMoneyFin?: SortOrder
    waveFin?: SortOrder
    uvMasterFin?: SortOrder
    autresFin?: SortOrder
    debutTotal?: SortOrder
    sortieTotal?: SortOrder
    grTotal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DailySnapshotMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    userId?: SortOrder
    liquideDebut?: SortOrder
    orangeMoneyDebut?: SortOrder
    waveDebut?: SortOrder
    uvMasterDebut?: SortOrder
    autresDebut?: SortOrder
    liquideFin?: SortOrder
    orangeMoneyFin?: SortOrder
    waveFin?: SortOrder
    uvMasterFin?: SortOrder
    autresFin?: SortOrder
    debutTotal?: SortOrder
    sortieTotal?: SortOrder
    grTotal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DailySnapshotSumOrderByAggregateInput = {
    liquideDebut?: SortOrder
    orangeMoneyDebut?: SortOrder
    waveDebut?: SortOrder
    uvMasterDebut?: SortOrder
    autresDebut?: SortOrder
    liquideFin?: SortOrder
    orangeMoneyFin?: SortOrder
    waveFin?: SortOrder
    uvMasterFin?: SortOrder
    autresFin?: SortOrder
    debutTotal?: SortOrder
    sortieTotal?: SortOrder
    grTotal?: SortOrder
  }

  export type SystemConfigCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemConfigMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemConfigMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type TransactionCreateNestedManyWithoutEnvoyeurInput = {
    create?: XOR<TransactionCreateWithoutEnvoyeurInput, TransactionUncheckedCreateWithoutEnvoyeurInput> | TransactionCreateWithoutEnvoyeurInput[] | TransactionUncheckedCreateWithoutEnvoyeurInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutEnvoyeurInput | TransactionCreateOrConnectWithoutEnvoyeurInput[]
    createMany?: TransactionCreateManyEnvoyeurInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type TransactionCreateNestedManyWithoutDestinataireInput = {
    create?: XOR<TransactionCreateWithoutDestinataireInput, TransactionUncheckedCreateWithoutDestinataireInput> | TransactionCreateWithoutDestinataireInput[] | TransactionUncheckedCreateWithoutDestinataireInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutDestinataireInput | TransactionCreateOrConnectWithoutDestinataireInput[]
    createMany?: TransactionCreateManyDestinataireInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type TransactionCreateNestedManyWithoutPartenaireInput = {
    create?: XOR<TransactionCreateWithoutPartenaireInput, TransactionUncheckedCreateWithoutPartenaireInput> | TransactionCreateWithoutPartenaireInput[] | TransactionUncheckedCreateWithoutPartenaireInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutPartenaireInput | TransactionCreateOrConnectWithoutPartenaireInput[]
    createMany?: TransactionCreateManyPartenaireInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type RegistrationRequestCreateNestedManyWithoutReviewedByInput = {
    create?: XOR<RegistrationRequestCreateWithoutReviewedByInput, RegistrationRequestUncheckedCreateWithoutReviewedByInput> | RegistrationRequestCreateWithoutReviewedByInput[] | RegistrationRequestUncheckedCreateWithoutReviewedByInput[]
    connectOrCreate?: RegistrationRequestCreateOrConnectWithoutReviewedByInput | RegistrationRequestCreateOrConnectWithoutReviewedByInput[]
    createMany?: RegistrationRequestCreateManyReviewedByInputEnvelope
    connect?: RegistrationRequestWhereUniqueInput | RegistrationRequestWhereUniqueInput[]
  }

  export type DailySnapshotCreateNestedManyWithoutUserInput = {
    create?: XOR<DailySnapshotCreateWithoutUserInput, DailySnapshotUncheckedCreateWithoutUserInput> | DailySnapshotCreateWithoutUserInput[] | DailySnapshotUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DailySnapshotCreateOrConnectWithoutUserInput | DailySnapshotCreateOrConnectWithoutUserInput[]
    createMany?: DailySnapshotCreateManyUserInputEnvelope
    connect?: DailySnapshotWhereUniqueInput | DailySnapshotWhereUniqueInput[]
  }

  export type DailyPartnerChoiceCreateNestedManyWithoutPartenaireInput = {
    create?: XOR<DailyPartnerChoiceCreateWithoutPartenaireInput, DailyPartnerChoiceUncheckedCreateWithoutPartenaireInput> | DailyPartnerChoiceCreateWithoutPartenaireInput[] | DailyPartnerChoiceUncheckedCreateWithoutPartenaireInput[]
    connectOrCreate?: DailyPartnerChoiceCreateOrConnectWithoutPartenaireInput | DailyPartnerChoiceCreateOrConnectWithoutPartenaireInput[]
    createMany?: DailyPartnerChoiceCreateManyPartenaireInputEnvelope
    connect?: DailyPartnerChoiceWhereUniqueInput | DailyPartnerChoiceWhereUniqueInput[]
  }

  export type DailyPartnerChoiceCreateNestedManyWithoutSuperviseurInput = {
    create?: XOR<DailyPartnerChoiceCreateWithoutSuperviseurInput, DailyPartnerChoiceUncheckedCreateWithoutSuperviseurInput> | DailyPartnerChoiceCreateWithoutSuperviseurInput[] | DailyPartnerChoiceUncheckedCreateWithoutSuperviseurInput[]
    connectOrCreate?: DailyPartnerChoiceCreateOrConnectWithoutSuperviseurInput | DailyPartnerChoiceCreateOrConnectWithoutSuperviseurInput[]
    createMany?: DailyPartnerChoiceCreateManySuperviseurInputEnvelope
    connect?: DailyPartnerChoiceWhereUniqueInput | DailyPartnerChoiceWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutEnvoyeurInput = {
    create?: XOR<TransactionCreateWithoutEnvoyeurInput, TransactionUncheckedCreateWithoutEnvoyeurInput> | TransactionCreateWithoutEnvoyeurInput[] | TransactionUncheckedCreateWithoutEnvoyeurInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutEnvoyeurInput | TransactionCreateOrConnectWithoutEnvoyeurInput[]
    createMany?: TransactionCreateManyEnvoyeurInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutDestinataireInput = {
    create?: XOR<TransactionCreateWithoutDestinataireInput, TransactionUncheckedCreateWithoutDestinataireInput> | TransactionCreateWithoutDestinataireInput[] | TransactionUncheckedCreateWithoutDestinataireInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutDestinataireInput | TransactionCreateOrConnectWithoutDestinataireInput[]
    createMany?: TransactionCreateManyDestinataireInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutPartenaireInput = {
    create?: XOR<TransactionCreateWithoutPartenaireInput, TransactionUncheckedCreateWithoutPartenaireInput> | TransactionCreateWithoutPartenaireInput[] | TransactionUncheckedCreateWithoutPartenaireInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutPartenaireInput | TransactionCreateOrConnectWithoutPartenaireInput[]
    createMany?: TransactionCreateManyPartenaireInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type RegistrationRequestUncheckedCreateNestedManyWithoutReviewedByInput = {
    create?: XOR<RegistrationRequestCreateWithoutReviewedByInput, RegistrationRequestUncheckedCreateWithoutReviewedByInput> | RegistrationRequestCreateWithoutReviewedByInput[] | RegistrationRequestUncheckedCreateWithoutReviewedByInput[]
    connectOrCreate?: RegistrationRequestCreateOrConnectWithoutReviewedByInput | RegistrationRequestCreateOrConnectWithoutReviewedByInput[]
    createMany?: RegistrationRequestCreateManyReviewedByInputEnvelope
    connect?: RegistrationRequestWhereUniqueInput | RegistrationRequestWhereUniqueInput[]
  }

  export type DailySnapshotUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<DailySnapshotCreateWithoutUserInput, DailySnapshotUncheckedCreateWithoutUserInput> | DailySnapshotCreateWithoutUserInput[] | DailySnapshotUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DailySnapshotCreateOrConnectWithoutUserInput | DailySnapshotCreateOrConnectWithoutUserInput[]
    createMany?: DailySnapshotCreateManyUserInputEnvelope
    connect?: DailySnapshotWhereUniqueInput | DailySnapshotWhereUniqueInput[]
  }

  export type DailyPartnerChoiceUncheckedCreateNestedManyWithoutPartenaireInput = {
    create?: XOR<DailyPartnerChoiceCreateWithoutPartenaireInput, DailyPartnerChoiceUncheckedCreateWithoutPartenaireInput> | DailyPartnerChoiceCreateWithoutPartenaireInput[] | DailyPartnerChoiceUncheckedCreateWithoutPartenaireInput[]
    connectOrCreate?: DailyPartnerChoiceCreateOrConnectWithoutPartenaireInput | DailyPartnerChoiceCreateOrConnectWithoutPartenaireInput[]
    createMany?: DailyPartnerChoiceCreateManyPartenaireInputEnvelope
    connect?: DailyPartnerChoiceWhereUniqueInput | DailyPartnerChoiceWhereUniqueInput[]
  }

  export type DailyPartnerChoiceUncheckedCreateNestedManyWithoutSuperviseurInput = {
    create?: XOR<DailyPartnerChoiceCreateWithoutSuperviseurInput, DailyPartnerChoiceUncheckedCreateWithoutSuperviseurInput> | DailyPartnerChoiceCreateWithoutSuperviseurInput[] | DailyPartnerChoiceUncheckedCreateWithoutSuperviseurInput[]
    connectOrCreate?: DailyPartnerChoiceCreateOrConnectWithoutSuperviseurInput | DailyPartnerChoiceCreateOrConnectWithoutSuperviseurInput[]
    createMany?: DailyPartnerChoiceCreateManySuperviseurInputEnvelope
    connect?: DailyPartnerChoiceWhereUniqueInput | DailyPartnerChoiceWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type EnumUserStatusFieldUpdateOperationsInput = {
    set?: $Enums.UserStatus
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type TransactionUpdateManyWithoutEnvoyeurNestedInput = {
    create?: XOR<TransactionCreateWithoutEnvoyeurInput, TransactionUncheckedCreateWithoutEnvoyeurInput> | TransactionCreateWithoutEnvoyeurInput[] | TransactionUncheckedCreateWithoutEnvoyeurInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutEnvoyeurInput | TransactionCreateOrConnectWithoutEnvoyeurInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutEnvoyeurInput | TransactionUpsertWithWhereUniqueWithoutEnvoyeurInput[]
    createMany?: TransactionCreateManyEnvoyeurInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutEnvoyeurInput | TransactionUpdateWithWhereUniqueWithoutEnvoyeurInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutEnvoyeurInput | TransactionUpdateManyWithWhereWithoutEnvoyeurInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type TransactionUpdateManyWithoutDestinataireNestedInput = {
    create?: XOR<TransactionCreateWithoutDestinataireInput, TransactionUncheckedCreateWithoutDestinataireInput> | TransactionCreateWithoutDestinataireInput[] | TransactionUncheckedCreateWithoutDestinataireInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutDestinataireInput | TransactionCreateOrConnectWithoutDestinataireInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutDestinataireInput | TransactionUpsertWithWhereUniqueWithoutDestinataireInput[]
    createMany?: TransactionCreateManyDestinataireInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutDestinataireInput | TransactionUpdateWithWhereUniqueWithoutDestinataireInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutDestinataireInput | TransactionUpdateManyWithWhereWithoutDestinataireInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type TransactionUpdateManyWithoutPartenaireNestedInput = {
    create?: XOR<TransactionCreateWithoutPartenaireInput, TransactionUncheckedCreateWithoutPartenaireInput> | TransactionCreateWithoutPartenaireInput[] | TransactionUncheckedCreateWithoutPartenaireInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutPartenaireInput | TransactionCreateOrConnectWithoutPartenaireInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutPartenaireInput | TransactionUpsertWithWhereUniqueWithoutPartenaireInput[]
    createMany?: TransactionCreateManyPartenaireInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutPartenaireInput | TransactionUpdateWithWhereUniqueWithoutPartenaireInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutPartenaireInput | TransactionUpdateManyWithWhereWithoutPartenaireInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type RegistrationRequestUpdateManyWithoutReviewedByNestedInput = {
    create?: XOR<RegistrationRequestCreateWithoutReviewedByInput, RegistrationRequestUncheckedCreateWithoutReviewedByInput> | RegistrationRequestCreateWithoutReviewedByInput[] | RegistrationRequestUncheckedCreateWithoutReviewedByInput[]
    connectOrCreate?: RegistrationRequestCreateOrConnectWithoutReviewedByInput | RegistrationRequestCreateOrConnectWithoutReviewedByInput[]
    upsert?: RegistrationRequestUpsertWithWhereUniqueWithoutReviewedByInput | RegistrationRequestUpsertWithWhereUniqueWithoutReviewedByInput[]
    createMany?: RegistrationRequestCreateManyReviewedByInputEnvelope
    set?: RegistrationRequestWhereUniqueInput | RegistrationRequestWhereUniqueInput[]
    disconnect?: RegistrationRequestWhereUniqueInput | RegistrationRequestWhereUniqueInput[]
    delete?: RegistrationRequestWhereUniqueInput | RegistrationRequestWhereUniqueInput[]
    connect?: RegistrationRequestWhereUniqueInput | RegistrationRequestWhereUniqueInput[]
    update?: RegistrationRequestUpdateWithWhereUniqueWithoutReviewedByInput | RegistrationRequestUpdateWithWhereUniqueWithoutReviewedByInput[]
    updateMany?: RegistrationRequestUpdateManyWithWhereWithoutReviewedByInput | RegistrationRequestUpdateManyWithWhereWithoutReviewedByInput[]
    deleteMany?: RegistrationRequestScalarWhereInput | RegistrationRequestScalarWhereInput[]
  }

  export type DailySnapshotUpdateManyWithoutUserNestedInput = {
    create?: XOR<DailySnapshotCreateWithoutUserInput, DailySnapshotUncheckedCreateWithoutUserInput> | DailySnapshotCreateWithoutUserInput[] | DailySnapshotUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DailySnapshotCreateOrConnectWithoutUserInput | DailySnapshotCreateOrConnectWithoutUserInput[]
    upsert?: DailySnapshotUpsertWithWhereUniqueWithoutUserInput | DailySnapshotUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DailySnapshotCreateManyUserInputEnvelope
    set?: DailySnapshotWhereUniqueInput | DailySnapshotWhereUniqueInput[]
    disconnect?: DailySnapshotWhereUniqueInput | DailySnapshotWhereUniqueInput[]
    delete?: DailySnapshotWhereUniqueInput | DailySnapshotWhereUniqueInput[]
    connect?: DailySnapshotWhereUniqueInput | DailySnapshotWhereUniqueInput[]
    update?: DailySnapshotUpdateWithWhereUniqueWithoutUserInput | DailySnapshotUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DailySnapshotUpdateManyWithWhereWithoutUserInput | DailySnapshotUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DailySnapshotScalarWhereInput | DailySnapshotScalarWhereInput[]
  }

  export type DailyPartnerChoiceUpdateManyWithoutPartenaireNestedInput = {
    create?: XOR<DailyPartnerChoiceCreateWithoutPartenaireInput, DailyPartnerChoiceUncheckedCreateWithoutPartenaireInput> | DailyPartnerChoiceCreateWithoutPartenaireInput[] | DailyPartnerChoiceUncheckedCreateWithoutPartenaireInput[]
    connectOrCreate?: DailyPartnerChoiceCreateOrConnectWithoutPartenaireInput | DailyPartnerChoiceCreateOrConnectWithoutPartenaireInput[]
    upsert?: DailyPartnerChoiceUpsertWithWhereUniqueWithoutPartenaireInput | DailyPartnerChoiceUpsertWithWhereUniqueWithoutPartenaireInput[]
    createMany?: DailyPartnerChoiceCreateManyPartenaireInputEnvelope
    set?: DailyPartnerChoiceWhereUniqueInput | DailyPartnerChoiceWhereUniqueInput[]
    disconnect?: DailyPartnerChoiceWhereUniqueInput | DailyPartnerChoiceWhereUniqueInput[]
    delete?: DailyPartnerChoiceWhereUniqueInput | DailyPartnerChoiceWhereUniqueInput[]
    connect?: DailyPartnerChoiceWhereUniqueInput | DailyPartnerChoiceWhereUniqueInput[]
    update?: DailyPartnerChoiceUpdateWithWhereUniqueWithoutPartenaireInput | DailyPartnerChoiceUpdateWithWhereUniqueWithoutPartenaireInput[]
    updateMany?: DailyPartnerChoiceUpdateManyWithWhereWithoutPartenaireInput | DailyPartnerChoiceUpdateManyWithWhereWithoutPartenaireInput[]
    deleteMany?: DailyPartnerChoiceScalarWhereInput | DailyPartnerChoiceScalarWhereInput[]
  }

  export type DailyPartnerChoiceUpdateManyWithoutSuperviseurNestedInput = {
    create?: XOR<DailyPartnerChoiceCreateWithoutSuperviseurInput, DailyPartnerChoiceUncheckedCreateWithoutSuperviseurInput> | DailyPartnerChoiceCreateWithoutSuperviseurInput[] | DailyPartnerChoiceUncheckedCreateWithoutSuperviseurInput[]
    connectOrCreate?: DailyPartnerChoiceCreateOrConnectWithoutSuperviseurInput | DailyPartnerChoiceCreateOrConnectWithoutSuperviseurInput[]
    upsert?: DailyPartnerChoiceUpsertWithWhereUniqueWithoutSuperviseurInput | DailyPartnerChoiceUpsertWithWhereUniqueWithoutSuperviseurInput[]
    createMany?: DailyPartnerChoiceCreateManySuperviseurInputEnvelope
    set?: DailyPartnerChoiceWhereUniqueInput | DailyPartnerChoiceWhereUniqueInput[]
    disconnect?: DailyPartnerChoiceWhereUniqueInput | DailyPartnerChoiceWhereUniqueInput[]
    delete?: DailyPartnerChoiceWhereUniqueInput | DailyPartnerChoiceWhereUniqueInput[]
    connect?: DailyPartnerChoiceWhereUniqueInput | DailyPartnerChoiceWhereUniqueInput[]
    update?: DailyPartnerChoiceUpdateWithWhereUniqueWithoutSuperviseurInput | DailyPartnerChoiceUpdateWithWhereUniqueWithoutSuperviseurInput[]
    updateMany?: DailyPartnerChoiceUpdateManyWithWhereWithoutSuperviseurInput | DailyPartnerChoiceUpdateManyWithWhereWithoutSuperviseurInput[]
    deleteMany?: DailyPartnerChoiceScalarWhereInput | DailyPartnerChoiceScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutEnvoyeurNestedInput = {
    create?: XOR<TransactionCreateWithoutEnvoyeurInput, TransactionUncheckedCreateWithoutEnvoyeurInput> | TransactionCreateWithoutEnvoyeurInput[] | TransactionUncheckedCreateWithoutEnvoyeurInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutEnvoyeurInput | TransactionCreateOrConnectWithoutEnvoyeurInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutEnvoyeurInput | TransactionUpsertWithWhereUniqueWithoutEnvoyeurInput[]
    createMany?: TransactionCreateManyEnvoyeurInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutEnvoyeurInput | TransactionUpdateWithWhereUniqueWithoutEnvoyeurInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutEnvoyeurInput | TransactionUpdateManyWithWhereWithoutEnvoyeurInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutDestinataireNestedInput = {
    create?: XOR<TransactionCreateWithoutDestinataireInput, TransactionUncheckedCreateWithoutDestinataireInput> | TransactionCreateWithoutDestinataireInput[] | TransactionUncheckedCreateWithoutDestinataireInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutDestinataireInput | TransactionCreateOrConnectWithoutDestinataireInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutDestinataireInput | TransactionUpsertWithWhereUniqueWithoutDestinataireInput[]
    createMany?: TransactionCreateManyDestinataireInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutDestinataireInput | TransactionUpdateWithWhereUniqueWithoutDestinataireInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutDestinataireInput | TransactionUpdateManyWithWhereWithoutDestinataireInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutPartenaireNestedInput = {
    create?: XOR<TransactionCreateWithoutPartenaireInput, TransactionUncheckedCreateWithoutPartenaireInput> | TransactionCreateWithoutPartenaireInput[] | TransactionUncheckedCreateWithoutPartenaireInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutPartenaireInput | TransactionCreateOrConnectWithoutPartenaireInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutPartenaireInput | TransactionUpsertWithWhereUniqueWithoutPartenaireInput[]
    createMany?: TransactionCreateManyPartenaireInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutPartenaireInput | TransactionUpdateWithWhereUniqueWithoutPartenaireInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutPartenaireInput | TransactionUpdateManyWithWhereWithoutPartenaireInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type RegistrationRequestUncheckedUpdateManyWithoutReviewedByNestedInput = {
    create?: XOR<RegistrationRequestCreateWithoutReviewedByInput, RegistrationRequestUncheckedCreateWithoutReviewedByInput> | RegistrationRequestCreateWithoutReviewedByInput[] | RegistrationRequestUncheckedCreateWithoutReviewedByInput[]
    connectOrCreate?: RegistrationRequestCreateOrConnectWithoutReviewedByInput | RegistrationRequestCreateOrConnectWithoutReviewedByInput[]
    upsert?: RegistrationRequestUpsertWithWhereUniqueWithoutReviewedByInput | RegistrationRequestUpsertWithWhereUniqueWithoutReviewedByInput[]
    createMany?: RegistrationRequestCreateManyReviewedByInputEnvelope
    set?: RegistrationRequestWhereUniqueInput | RegistrationRequestWhereUniqueInput[]
    disconnect?: RegistrationRequestWhereUniqueInput | RegistrationRequestWhereUniqueInput[]
    delete?: RegistrationRequestWhereUniqueInput | RegistrationRequestWhereUniqueInput[]
    connect?: RegistrationRequestWhereUniqueInput | RegistrationRequestWhereUniqueInput[]
    update?: RegistrationRequestUpdateWithWhereUniqueWithoutReviewedByInput | RegistrationRequestUpdateWithWhereUniqueWithoutReviewedByInput[]
    updateMany?: RegistrationRequestUpdateManyWithWhereWithoutReviewedByInput | RegistrationRequestUpdateManyWithWhereWithoutReviewedByInput[]
    deleteMany?: RegistrationRequestScalarWhereInput | RegistrationRequestScalarWhereInput[]
  }

  export type DailySnapshotUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<DailySnapshotCreateWithoutUserInput, DailySnapshotUncheckedCreateWithoutUserInput> | DailySnapshotCreateWithoutUserInput[] | DailySnapshotUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DailySnapshotCreateOrConnectWithoutUserInput | DailySnapshotCreateOrConnectWithoutUserInput[]
    upsert?: DailySnapshotUpsertWithWhereUniqueWithoutUserInput | DailySnapshotUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DailySnapshotCreateManyUserInputEnvelope
    set?: DailySnapshotWhereUniqueInput | DailySnapshotWhereUniqueInput[]
    disconnect?: DailySnapshotWhereUniqueInput | DailySnapshotWhereUniqueInput[]
    delete?: DailySnapshotWhereUniqueInput | DailySnapshotWhereUniqueInput[]
    connect?: DailySnapshotWhereUniqueInput | DailySnapshotWhereUniqueInput[]
    update?: DailySnapshotUpdateWithWhereUniqueWithoutUserInput | DailySnapshotUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DailySnapshotUpdateManyWithWhereWithoutUserInput | DailySnapshotUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DailySnapshotScalarWhereInput | DailySnapshotScalarWhereInput[]
  }

  export type DailyPartnerChoiceUncheckedUpdateManyWithoutPartenaireNestedInput = {
    create?: XOR<DailyPartnerChoiceCreateWithoutPartenaireInput, DailyPartnerChoiceUncheckedCreateWithoutPartenaireInput> | DailyPartnerChoiceCreateWithoutPartenaireInput[] | DailyPartnerChoiceUncheckedCreateWithoutPartenaireInput[]
    connectOrCreate?: DailyPartnerChoiceCreateOrConnectWithoutPartenaireInput | DailyPartnerChoiceCreateOrConnectWithoutPartenaireInput[]
    upsert?: DailyPartnerChoiceUpsertWithWhereUniqueWithoutPartenaireInput | DailyPartnerChoiceUpsertWithWhereUniqueWithoutPartenaireInput[]
    createMany?: DailyPartnerChoiceCreateManyPartenaireInputEnvelope
    set?: DailyPartnerChoiceWhereUniqueInput | DailyPartnerChoiceWhereUniqueInput[]
    disconnect?: DailyPartnerChoiceWhereUniqueInput | DailyPartnerChoiceWhereUniqueInput[]
    delete?: DailyPartnerChoiceWhereUniqueInput | DailyPartnerChoiceWhereUniqueInput[]
    connect?: DailyPartnerChoiceWhereUniqueInput | DailyPartnerChoiceWhereUniqueInput[]
    update?: DailyPartnerChoiceUpdateWithWhereUniqueWithoutPartenaireInput | DailyPartnerChoiceUpdateWithWhereUniqueWithoutPartenaireInput[]
    updateMany?: DailyPartnerChoiceUpdateManyWithWhereWithoutPartenaireInput | DailyPartnerChoiceUpdateManyWithWhereWithoutPartenaireInput[]
    deleteMany?: DailyPartnerChoiceScalarWhereInput | DailyPartnerChoiceScalarWhereInput[]
  }

  export type DailyPartnerChoiceUncheckedUpdateManyWithoutSuperviseurNestedInput = {
    create?: XOR<DailyPartnerChoiceCreateWithoutSuperviseurInput, DailyPartnerChoiceUncheckedCreateWithoutSuperviseurInput> | DailyPartnerChoiceCreateWithoutSuperviseurInput[] | DailyPartnerChoiceUncheckedCreateWithoutSuperviseurInput[]
    connectOrCreate?: DailyPartnerChoiceCreateOrConnectWithoutSuperviseurInput | DailyPartnerChoiceCreateOrConnectWithoutSuperviseurInput[]
    upsert?: DailyPartnerChoiceUpsertWithWhereUniqueWithoutSuperviseurInput | DailyPartnerChoiceUpsertWithWhereUniqueWithoutSuperviseurInput[]
    createMany?: DailyPartnerChoiceCreateManySuperviseurInputEnvelope
    set?: DailyPartnerChoiceWhereUniqueInput | DailyPartnerChoiceWhereUniqueInput[]
    disconnect?: DailyPartnerChoiceWhereUniqueInput | DailyPartnerChoiceWhereUniqueInput[]
    delete?: DailyPartnerChoiceWhereUniqueInput | DailyPartnerChoiceWhereUniqueInput[]
    connect?: DailyPartnerChoiceWhereUniqueInput | DailyPartnerChoiceWhereUniqueInput[]
    update?: DailyPartnerChoiceUpdateWithWhereUniqueWithoutSuperviseurInput | DailyPartnerChoiceUpdateWithWhereUniqueWithoutSuperviseurInput[]
    updateMany?: DailyPartnerChoiceUpdateManyWithWhereWithoutSuperviseurInput | DailyPartnerChoiceUpdateManyWithWhereWithoutSuperviseurInput[]
    deleteMany?: DailyPartnerChoiceScalarWhereInput | DailyPartnerChoiceScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutDemandesInscriptionInput = {
    create?: XOR<UserCreateWithoutDemandesInscriptionInput, UserUncheckedCreateWithoutDemandesInscriptionInput>
    connectOrCreate?: UserCreateOrConnectWithoutDemandesInscriptionInput
    connect?: UserWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneWithoutDemandesInscriptionNestedInput = {
    create?: XOR<UserCreateWithoutDemandesInscriptionInput, UserUncheckedCreateWithoutDemandesInscriptionInput>
    connectOrCreate?: UserCreateOrConnectWithoutDemandesInscriptionInput
    upsert?: UserUpsertWithoutDemandesInscriptionInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDemandesInscriptionInput, UserUpdateWithoutDemandesInscriptionInput>, UserUncheckedUpdateWithoutDemandesInscriptionInput>
  }

  export type UserCreateNestedOneWithoutChoixPartenaireQuotidiensInput = {
    create?: XOR<UserCreateWithoutChoixPartenaireQuotidiensInput, UserUncheckedCreateWithoutChoixPartenaireQuotidiensInput>
    connectOrCreate?: UserCreateOrConnectWithoutChoixPartenaireQuotidiensInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutChoixSuperviseurQuotidiensInput = {
    create?: XOR<UserCreateWithoutChoixSuperviseurQuotidiensInput, UserUncheckedCreateWithoutChoixSuperviseurQuotidiensInput>
    connectOrCreate?: UserCreateOrConnectWithoutChoixSuperviseurQuotidiensInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutChoixPartenaireQuotidiensNestedInput = {
    create?: XOR<UserCreateWithoutChoixPartenaireQuotidiensInput, UserUncheckedCreateWithoutChoixPartenaireQuotidiensInput>
    connectOrCreate?: UserCreateOrConnectWithoutChoixPartenaireQuotidiensInput
    upsert?: UserUpsertWithoutChoixPartenaireQuotidiensInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChoixPartenaireQuotidiensInput, UserUpdateWithoutChoixPartenaireQuotidiensInput>, UserUncheckedUpdateWithoutChoixPartenaireQuotidiensInput>
  }

  export type UserUpdateOneRequiredWithoutChoixSuperviseurQuotidiensNestedInput = {
    create?: XOR<UserCreateWithoutChoixSuperviseurQuotidiensInput, UserUncheckedCreateWithoutChoixSuperviseurQuotidiensInput>
    connectOrCreate?: UserCreateOrConnectWithoutChoixSuperviseurQuotidiensInput
    upsert?: UserUpsertWithoutChoixSuperviseurQuotidiensInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChoixSuperviseurQuotidiensInput, UserUpdateWithoutChoixSuperviseurQuotidiensInput>, UserUncheckedUpdateWithoutChoixSuperviseurQuotidiensInput>
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type TransactionCreateNestedManyWithoutCompteOrigineInput = {
    create?: XOR<TransactionCreateWithoutCompteOrigineInput, TransactionUncheckedCreateWithoutCompteOrigineInput> | TransactionCreateWithoutCompteOrigineInput[] | TransactionUncheckedCreateWithoutCompteOrigineInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCompteOrigineInput | TransactionCreateOrConnectWithoutCompteOrigineInput[]
    createMany?: TransactionCreateManyCompteOrigineInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type TransactionCreateNestedManyWithoutCompteDestinationInput = {
    create?: XOR<TransactionCreateWithoutCompteDestinationInput, TransactionUncheckedCreateWithoutCompteDestinationInput> | TransactionCreateWithoutCompteDestinationInput[] | TransactionUncheckedCreateWithoutCompteDestinationInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCompteDestinationInput | TransactionCreateOrConnectWithoutCompteDestinationInput[]
    createMany?: TransactionCreateManyCompteDestinationInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutCompteOrigineInput = {
    create?: XOR<TransactionCreateWithoutCompteOrigineInput, TransactionUncheckedCreateWithoutCompteOrigineInput> | TransactionCreateWithoutCompteOrigineInput[] | TransactionUncheckedCreateWithoutCompteOrigineInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCompteOrigineInput | TransactionCreateOrConnectWithoutCompteOrigineInput[]
    createMany?: TransactionCreateManyCompteOrigineInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutCompteDestinationInput = {
    create?: XOR<TransactionCreateWithoutCompteDestinationInput, TransactionUncheckedCreateWithoutCompteDestinationInput> | TransactionCreateWithoutCompteDestinationInput[] | TransactionUncheckedCreateWithoutCompteDestinationInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCompteDestinationInput | TransactionCreateOrConnectWithoutCompteDestinationInput[]
    createMany?: TransactionCreateManyCompteDestinationInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type EnumAccountTypeFieldUpdateOperationsInput = {
    set?: $Enums.AccountType
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type TransactionUpdateManyWithoutCompteOrigineNestedInput = {
    create?: XOR<TransactionCreateWithoutCompteOrigineInput, TransactionUncheckedCreateWithoutCompteOrigineInput> | TransactionCreateWithoutCompteOrigineInput[] | TransactionUncheckedCreateWithoutCompteOrigineInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCompteOrigineInput | TransactionCreateOrConnectWithoutCompteOrigineInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutCompteOrigineInput | TransactionUpsertWithWhereUniqueWithoutCompteOrigineInput[]
    createMany?: TransactionCreateManyCompteOrigineInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutCompteOrigineInput | TransactionUpdateWithWhereUniqueWithoutCompteOrigineInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutCompteOrigineInput | TransactionUpdateManyWithWhereWithoutCompteOrigineInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type TransactionUpdateManyWithoutCompteDestinationNestedInput = {
    create?: XOR<TransactionCreateWithoutCompteDestinationInput, TransactionUncheckedCreateWithoutCompteDestinationInput> | TransactionCreateWithoutCompteDestinationInput[] | TransactionUncheckedCreateWithoutCompteDestinationInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCompteDestinationInput | TransactionCreateOrConnectWithoutCompteDestinationInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutCompteDestinationInput | TransactionUpsertWithWhereUniqueWithoutCompteDestinationInput[]
    createMany?: TransactionCreateManyCompteDestinationInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutCompteDestinationInput | TransactionUpdateWithWhereUniqueWithoutCompteDestinationInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutCompteDestinationInput | TransactionUpdateManyWithWhereWithoutCompteDestinationInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutCompteOrigineNestedInput = {
    create?: XOR<TransactionCreateWithoutCompteOrigineInput, TransactionUncheckedCreateWithoutCompteOrigineInput> | TransactionCreateWithoutCompteOrigineInput[] | TransactionUncheckedCreateWithoutCompteOrigineInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCompteOrigineInput | TransactionCreateOrConnectWithoutCompteOrigineInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutCompteOrigineInput | TransactionUpsertWithWhereUniqueWithoutCompteOrigineInput[]
    createMany?: TransactionCreateManyCompteOrigineInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutCompteOrigineInput | TransactionUpdateWithWhereUniqueWithoutCompteOrigineInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutCompteOrigineInput | TransactionUpdateManyWithWhereWithoutCompteOrigineInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutCompteDestinationNestedInput = {
    create?: XOR<TransactionCreateWithoutCompteDestinationInput, TransactionUncheckedCreateWithoutCompteDestinationInput> | TransactionCreateWithoutCompteDestinationInput[] | TransactionUncheckedCreateWithoutCompteDestinationInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCompteDestinationInput | TransactionCreateOrConnectWithoutCompteDestinationInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutCompteDestinationInput | TransactionUpsertWithWhereUniqueWithoutCompteDestinationInput[]
    createMany?: TransactionCreateManyCompteDestinationInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutCompteDestinationInput | TransactionUpdateWithWhereUniqueWithoutCompteDestinationInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutCompteDestinationInput | TransactionUpdateManyWithWhereWithoutCompteDestinationInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutTransactionsEnvoyeesInput = {
    create?: XOR<UserCreateWithoutTransactionsEnvoyeesInput, UserUncheckedCreateWithoutTransactionsEnvoyeesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsEnvoyeesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTransactionsRecuesInput = {
    create?: XOR<UserCreateWithoutTransactionsRecuesInput, UserUncheckedCreateWithoutTransactionsRecuesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsRecuesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTransactionsPartenaireInput = {
    create?: XOR<UserCreateWithoutTransactionsPartenaireInput, UserUncheckedCreateWithoutTransactionsPartenaireInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsPartenaireInput
    connect?: UserWhereUniqueInput
  }

  export type AccountCreateNestedOneWithoutTransactionsOrigineInput = {
    create?: XOR<AccountCreateWithoutTransactionsOrigineInput, AccountUncheckedCreateWithoutTransactionsOrigineInput>
    connectOrCreate?: AccountCreateOrConnectWithoutTransactionsOrigineInput
    connect?: AccountWhereUniqueInput
  }

  export type AccountCreateNestedOneWithoutTransactionsDestinationInput = {
    create?: XOR<AccountCreateWithoutTransactionsDestinationInput, AccountUncheckedCreateWithoutTransactionsDestinationInput>
    connectOrCreate?: AccountCreateOrConnectWithoutTransactionsDestinationInput
    connect?: AccountWhereUniqueInput
  }

  export type EnumTransactionTypeFieldUpdateOperationsInput = {
    set?: $Enums.TransactionType
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutTransactionsEnvoyeesNestedInput = {
    create?: XOR<UserCreateWithoutTransactionsEnvoyeesInput, UserUncheckedCreateWithoutTransactionsEnvoyeesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsEnvoyeesInput
    upsert?: UserUpsertWithoutTransactionsEnvoyeesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTransactionsEnvoyeesInput, UserUpdateWithoutTransactionsEnvoyeesInput>, UserUncheckedUpdateWithoutTransactionsEnvoyeesInput>
  }

  export type UserUpdateOneWithoutTransactionsRecuesNestedInput = {
    create?: XOR<UserCreateWithoutTransactionsRecuesInput, UserUncheckedCreateWithoutTransactionsRecuesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsRecuesInput
    upsert?: UserUpsertWithoutTransactionsRecuesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTransactionsRecuesInput, UserUpdateWithoutTransactionsRecuesInput>, UserUncheckedUpdateWithoutTransactionsRecuesInput>
  }

  export type UserUpdateOneWithoutTransactionsPartenaireNestedInput = {
    create?: XOR<UserCreateWithoutTransactionsPartenaireInput, UserUncheckedCreateWithoutTransactionsPartenaireInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsPartenaireInput
    upsert?: UserUpsertWithoutTransactionsPartenaireInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTransactionsPartenaireInput, UserUpdateWithoutTransactionsPartenaireInput>, UserUncheckedUpdateWithoutTransactionsPartenaireInput>
  }

  export type AccountUpdateOneWithoutTransactionsOrigineNestedInput = {
    create?: XOR<AccountCreateWithoutTransactionsOrigineInput, AccountUncheckedCreateWithoutTransactionsOrigineInput>
    connectOrCreate?: AccountCreateOrConnectWithoutTransactionsOrigineInput
    upsert?: AccountUpsertWithoutTransactionsOrigineInput
    disconnect?: AccountWhereInput | boolean
    delete?: AccountWhereInput | boolean
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutTransactionsOrigineInput, AccountUpdateWithoutTransactionsOrigineInput>, AccountUncheckedUpdateWithoutTransactionsOrigineInput>
  }

  export type AccountUpdateOneWithoutTransactionsDestinationNestedInput = {
    create?: XOR<AccountCreateWithoutTransactionsDestinationInput, AccountUncheckedCreateWithoutTransactionsDestinationInput>
    connectOrCreate?: AccountCreateOrConnectWithoutTransactionsDestinationInput
    upsert?: AccountUpsertWithoutTransactionsDestinationInput
    disconnect?: AccountWhereInput | boolean
    delete?: AccountWhereInput | boolean
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutTransactionsDestinationInput, AccountUpdateWithoutTransactionsDestinationInput>, AccountUncheckedUpdateWithoutTransactionsDestinationInput>
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationType
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserCreateNestedOneWithoutDailySnapshotsInput = {
    create?: XOR<UserCreateWithoutDailySnapshotsInput, UserUncheckedCreateWithoutDailySnapshotsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDailySnapshotsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutDailySnapshotsNestedInput = {
    create?: XOR<UserCreateWithoutDailySnapshotsInput, UserUncheckedCreateWithoutDailySnapshotsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDailySnapshotsInput
    upsert?: UserUpsertWithoutDailySnapshotsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDailySnapshotsInput, UserUpdateWithoutDailySnapshotsInput>, UserUncheckedUpdateWithoutDailySnapshotsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedEnumUserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusFilter<$PrismaModel> | $Enums.UserStatus
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedEnumUserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusWithAggregatesFilter<$PrismaModel> | $Enums.UserStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserStatusFilter<$PrismaModel>
    _max?: NestedEnumUserStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumAccountTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountType | EnumAccountTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAccountTypeFilter<$PrismaModel> | $Enums.AccountType
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedEnumAccountTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountType | EnumAccountTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAccountTypeWithAggregatesFilter<$PrismaModel> | $Enums.AccountType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAccountTypeFilter<$PrismaModel>
    _max?: NestedEnumAccountTypeFilter<$PrismaModel>
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumTransactionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeFilter<$PrismaModel> | $Enums.TransactionType
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumTransactionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeWithAggregatesFilter<$PrismaModel> | $Enums.TransactionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransactionTypeFilter<$PrismaModel>
    _max?: NestedEnumTransactionTypeFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    type: $Enums.AccountType
    balance?: bigint | number
    initialBalance?: bigint | number
    previousInitialBalance?: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    transactionsOrigine?: TransactionCreateNestedManyWithoutCompteOrigineInput
    transactionsDestination?: TransactionCreateNestedManyWithoutCompteDestinationInput
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    type: $Enums.AccountType
    balance?: bigint | number
    initialBalance?: bigint | number
    previousInitialBalance?: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    transactionsOrigine?: TransactionUncheckedCreateNestedManyWithoutCompteOrigineInput
    transactionsDestination?: TransactionUncheckedCreateNestedManyWithoutCompteDestinationInput
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TransactionCreateWithoutEnvoyeurInput = {
    id?: string
    montant: bigint | number
    type: $Enums.TransactionType
    description?: string | null
    archived?: boolean | null
    archivedAt?: Date | string | null
    isValidated?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    destinataire?: UserCreateNestedOneWithoutTransactionsRecuesInput
    partenaire?: UserCreateNestedOneWithoutTransactionsPartenaireInput
    compteOrigine?: AccountCreateNestedOneWithoutTransactionsOrigineInput
    compteDestination?: AccountCreateNestedOneWithoutTransactionsDestinationInput
  }

  export type TransactionUncheckedCreateWithoutEnvoyeurInput = {
    id?: string
    montant: bigint | number
    type: $Enums.TransactionType
    description?: string | null
    archived?: boolean | null
    archivedAt?: Date | string | null
    destinataireId?: string | null
    partenaireId?: string | null
    compteOrigineId?: string | null
    compteDestinationId?: string | null
    isValidated?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateOrConnectWithoutEnvoyeurInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutEnvoyeurInput, TransactionUncheckedCreateWithoutEnvoyeurInput>
  }

  export type TransactionCreateManyEnvoyeurInputEnvelope = {
    data: TransactionCreateManyEnvoyeurInput | TransactionCreateManyEnvoyeurInput[]
    skipDuplicates?: boolean
  }

  export type TransactionCreateWithoutDestinataireInput = {
    id?: string
    montant: bigint | number
    type: $Enums.TransactionType
    description?: string | null
    archived?: boolean | null
    archivedAt?: Date | string | null
    isValidated?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    envoyeur: UserCreateNestedOneWithoutTransactionsEnvoyeesInput
    partenaire?: UserCreateNestedOneWithoutTransactionsPartenaireInput
    compteOrigine?: AccountCreateNestedOneWithoutTransactionsOrigineInput
    compteDestination?: AccountCreateNestedOneWithoutTransactionsDestinationInput
  }

  export type TransactionUncheckedCreateWithoutDestinataireInput = {
    id?: string
    montant: bigint | number
    type: $Enums.TransactionType
    description?: string | null
    archived?: boolean | null
    archivedAt?: Date | string | null
    envoyeurId: string
    partenaireId?: string | null
    compteOrigineId?: string | null
    compteDestinationId?: string | null
    isValidated?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateOrConnectWithoutDestinataireInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutDestinataireInput, TransactionUncheckedCreateWithoutDestinataireInput>
  }

  export type TransactionCreateManyDestinataireInputEnvelope = {
    data: TransactionCreateManyDestinataireInput | TransactionCreateManyDestinataireInput[]
    skipDuplicates?: boolean
  }

  export type TransactionCreateWithoutPartenaireInput = {
    id?: string
    montant: bigint | number
    type: $Enums.TransactionType
    description?: string | null
    archived?: boolean | null
    archivedAt?: Date | string | null
    isValidated?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    envoyeur: UserCreateNestedOneWithoutTransactionsEnvoyeesInput
    destinataire?: UserCreateNestedOneWithoutTransactionsRecuesInput
    compteOrigine?: AccountCreateNestedOneWithoutTransactionsOrigineInput
    compteDestination?: AccountCreateNestedOneWithoutTransactionsDestinationInput
  }

  export type TransactionUncheckedCreateWithoutPartenaireInput = {
    id?: string
    montant: bigint | number
    type: $Enums.TransactionType
    description?: string | null
    archived?: boolean | null
    archivedAt?: Date | string | null
    envoyeurId: string
    destinataireId?: string | null
    compteOrigineId?: string | null
    compteDestinationId?: string | null
    isValidated?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateOrConnectWithoutPartenaireInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutPartenaireInput, TransactionUncheckedCreateWithoutPartenaireInput>
  }

  export type TransactionCreateManyPartenaireInputEnvelope = {
    data: TransactionCreateManyPartenaireInput | TransactionCreateManyPartenaireInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RegistrationRequestCreateWithoutReviewedByInput = {
    id?: string
    telephone: string
    nomComplet: string
    adresse: string
    message?: string | null
    status?: $Enums.UserStatus
    codeGenere?: string | null
    reviewedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RegistrationRequestUncheckedCreateWithoutReviewedByInput = {
    id?: string
    telephone: string
    nomComplet: string
    adresse: string
    message?: string | null
    status?: $Enums.UserStatus
    codeGenere?: string | null
    reviewedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RegistrationRequestCreateOrConnectWithoutReviewedByInput = {
    where: RegistrationRequestWhereUniqueInput
    create: XOR<RegistrationRequestCreateWithoutReviewedByInput, RegistrationRequestUncheckedCreateWithoutReviewedByInput>
  }

  export type RegistrationRequestCreateManyReviewedByInputEnvelope = {
    data: RegistrationRequestCreateManyReviewedByInput | RegistrationRequestCreateManyReviewedByInput[]
    skipDuplicates?: boolean
  }

  export type DailySnapshotCreateWithoutUserInput = {
    id?: string
    date: Date | string
    liquideDebut?: bigint | number
    orangeMoneyDebut?: bigint | number
    waveDebut?: bigint | number
    uvMasterDebut?: bigint | number
    autresDebut?: bigint | number
    liquideFin?: bigint | number
    orangeMoneyFin?: bigint | number
    waveFin?: bigint | number
    uvMasterFin?: bigint | number
    autresFin?: bigint | number
    debutTotal?: bigint | number
    sortieTotal?: bigint | number
    grTotal?: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DailySnapshotUncheckedCreateWithoutUserInput = {
    id?: string
    date: Date | string
    liquideDebut?: bigint | number
    orangeMoneyDebut?: bigint | number
    waveDebut?: bigint | number
    uvMasterDebut?: bigint | number
    autresDebut?: bigint | number
    liquideFin?: bigint | number
    orangeMoneyFin?: bigint | number
    waveFin?: bigint | number
    uvMasterFin?: bigint | number
    autresFin?: bigint | number
    debutTotal?: bigint | number
    sortieTotal?: bigint | number
    grTotal?: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DailySnapshotCreateOrConnectWithoutUserInput = {
    where: DailySnapshotWhereUniqueInput
    create: XOR<DailySnapshotCreateWithoutUserInput, DailySnapshotUncheckedCreateWithoutUserInput>
  }

  export type DailySnapshotCreateManyUserInputEnvelope = {
    data: DailySnapshotCreateManyUserInput | DailySnapshotCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DailyPartnerChoiceCreateWithoutPartenaireInput = {
    id?: string
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    superviseur: UserCreateNestedOneWithoutChoixSuperviseurQuotidiensInput
  }

  export type DailyPartnerChoiceUncheckedCreateWithoutPartenaireInput = {
    id?: string
    date: Date | string
    superviseurId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DailyPartnerChoiceCreateOrConnectWithoutPartenaireInput = {
    where: DailyPartnerChoiceWhereUniqueInput
    create: XOR<DailyPartnerChoiceCreateWithoutPartenaireInput, DailyPartnerChoiceUncheckedCreateWithoutPartenaireInput>
  }

  export type DailyPartnerChoiceCreateManyPartenaireInputEnvelope = {
    data: DailyPartnerChoiceCreateManyPartenaireInput | DailyPartnerChoiceCreateManyPartenaireInput[]
    skipDuplicates?: boolean
  }

  export type DailyPartnerChoiceCreateWithoutSuperviseurInput = {
    id?: string
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    partenaire: UserCreateNestedOneWithoutChoixPartenaireQuotidiensInput
  }

  export type DailyPartnerChoiceUncheckedCreateWithoutSuperviseurInput = {
    id?: string
    date: Date | string
    partenaireId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DailyPartnerChoiceCreateOrConnectWithoutSuperviseurInput = {
    where: DailyPartnerChoiceWhereUniqueInput
    create: XOR<DailyPartnerChoiceCreateWithoutSuperviseurInput, DailyPartnerChoiceUncheckedCreateWithoutSuperviseurInput>
  }

  export type DailyPartnerChoiceCreateManySuperviseurInputEnvelope = {
    data: DailyPartnerChoiceCreateManySuperviseurInput | DailyPartnerChoiceCreateManySuperviseurInput[]
    skipDuplicates?: boolean
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    type?: EnumAccountTypeFilter<"Account"> | $Enums.AccountType
    balance?: BigIntFilter<"Account"> | bigint | number
    initialBalance?: BigIntFilter<"Account"> | bigint | number
    previousInitialBalance?: BigIntFilter<"Account"> | bigint | number
    userId?: StringFilter<"Account"> | string
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
  }

  export type TransactionUpsertWithWhereUniqueWithoutEnvoyeurInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutEnvoyeurInput, TransactionUncheckedUpdateWithoutEnvoyeurInput>
    create: XOR<TransactionCreateWithoutEnvoyeurInput, TransactionUncheckedCreateWithoutEnvoyeurInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutEnvoyeurInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutEnvoyeurInput, TransactionUncheckedUpdateWithoutEnvoyeurInput>
  }

  export type TransactionUpdateManyWithWhereWithoutEnvoyeurInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutEnvoyeurInput>
  }

  export type TransactionScalarWhereInput = {
    AND?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    OR?: TransactionScalarWhereInput[]
    NOT?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    id?: StringFilter<"Transaction"> | string
    montant?: BigIntFilter<"Transaction"> | bigint | number
    type?: EnumTransactionTypeFilter<"Transaction"> | $Enums.TransactionType
    description?: StringNullableFilter<"Transaction"> | string | null
    archived?: BoolNullableFilter<"Transaction"> | boolean | null
    archivedAt?: DateTimeNullableFilter<"Transaction"> | Date | string | null
    envoyeurId?: StringFilter<"Transaction"> | string
    destinataireId?: StringNullableFilter<"Transaction"> | string | null
    partenaireId?: StringNullableFilter<"Transaction"> | string | null
    compteOrigineId?: StringNullableFilter<"Transaction"> | string | null
    compteDestinationId?: StringNullableFilter<"Transaction"> | string | null
    isValidated?: BoolFilter<"Transaction"> | boolean
    metadata?: StringNullableFilter<"Transaction"> | string | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
  }

  export type TransactionUpsertWithWhereUniqueWithoutDestinataireInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutDestinataireInput, TransactionUncheckedUpdateWithoutDestinataireInput>
    create: XOR<TransactionCreateWithoutDestinataireInput, TransactionUncheckedCreateWithoutDestinataireInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutDestinataireInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutDestinataireInput, TransactionUncheckedUpdateWithoutDestinataireInput>
  }

  export type TransactionUpdateManyWithWhereWithoutDestinataireInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutDestinataireInput>
  }

  export type TransactionUpsertWithWhereUniqueWithoutPartenaireInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutPartenaireInput, TransactionUncheckedUpdateWithoutPartenaireInput>
    create: XOR<TransactionCreateWithoutPartenaireInput, TransactionUncheckedCreateWithoutPartenaireInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutPartenaireInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutPartenaireInput, TransactionUncheckedUpdateWithoutPartenaireInput>
  }

  export type TransactionUpdateManyWithWhereWithoutPartenaireInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutPartenaireInput>
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    userId?: StringFilter<"Notification"> | string
    data?: JsonNullableFilter<"Notification">
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type RegistrationRequestUpsertWithWhereUniqueWithoutReviewedByInput = {
    where: RegistrationRequestWhereUniqueInput
    update: XOR<RegistrationRequestUpdateWithoutReviewedByInput, RegistrationRequestUncheckedUpdateWithoutReviewedByInput>
    create: XOR<RegistrationRequestCreateWithoutReviewedByInput, RegistrationRequestUncheckedCreateWithoutReviewedByInput>
  }

  export type RegistrationRequestUpdateWithWhereUniqueWithoutReviewedByInput = {
    where: RegistrationRequestWhereUniqueInput
    data: XOR<RegistrationRequestUpdateWithoutReviewedByInput, RegistrationRequestUncheckedUpdateWithoutReviewedByInput>
  }

  export type RegistrationRequestUpdateManyWithWhereWithoutReviewedByInput = {
    where: RegistrationRequestScalarWhereInput
    data: XOR<RegistrationRequestUpdateManyMutationInput, RegistrationRequestUncheckedUpdateManyWithoutReviewedByInput>
  }

  export type RegistrationRequestScalarWhereInput = {
    AND?: RegistrationRequestScalarWhereInput | RegistrationRequestScalarWhereInput[]
    OR?: RegistrationRequestScalarWhereInput[]
    NOT?: RegistrationRequestScalarWhereInput | RegistrationRequestScalarWhereInput[]
    id?: StringFilter<"RegistrationRequest"> | string
    telephone?: StringFilter<"RegistrationRequest"> | string
    nomComplet?: StringFilter<"RegistrationRequest"> | string
    adresse?: StringFilter<"RegistrationRequest"> | string
    message?: StringNullableFilter<"RegistrationRequest"> | string | null
    status?: EnumUserStatusFilter<"RegistrationRequest"> | $Enums.UserStatus
    codeGenere?: StringNullableFilter<"RegistrationRequest"> | string | null
    reviewedById?: StringNullableFilter<"RegistrationRequest"> | string | null
    reviewedAt?: DateTimeNullableFilter<"RegistrationRequest"> | Date | string | null
    createdAt?: DateTimeFilter<"RegistrationRequest"> | Date | string
    updatedAt?: DateTimeFilter<"RegistrationRequest"> | Date | string
  }

  export type DailySnapshotUpsertWithWhereUniqueWithoutUserInput = {
    where: DailySnapshotWhereUniqueInput
    update: XOR<DailySnapshotUpdateWithoutUserInput, DailySnapshotUncheckedUpdateWithoutUserInput>
    create: XOR<DailySnapshotCreateWithoutUserInput, DailySnapshotUncheckedCreateWithoutUserInput>
  }

  export type DailySnapshotUpdateWithWhereUniqueWithoutUserInput = {
    where: DailySnapshotWhereUniqueInput
    data: XOR<DailySnapshotUpdateWithoutUserInput, DailySnapshotUncheckedUpdateWithoutUserInput>
  }

  export type DailySnapshotUpdateManyWithWhereWithoutUserInput = {
    where: DailySnapshotScalarWhereInput
    data: XOR<DailySnapshotUpdateManyMutationInput, DailySnapshotUncheckedUpdateManyWithoutUserInput>
  }

  export type DailySnapshotScalarWhereInput = {
    AND?: DailySnapshotScalarWhereInput | DailySnapshotScalarWhereInput[]
    OR?: DailySnapshotScalarWhereInput[]
    NOT?: DailySnapshotScalarWhereInput | DailySnapshotScalarWhereInput[]
    id?: StringFilter<"DailySnapshot"> | string
    date?: DateTimeFilter<"DailySnapshot"> | Date | string
    userId?: StringFilter<"DailySnapshot"> | string
    liquideDebut?: BigIntFilter<"DailySnapshot"> | bigint | number
    orangeMoneyDebut?: BigIntFilter<"DailySnapshot"> | bigint | number
    waveDebut?: BigIntFilter<"DailySnapshot"> | bigint | number
    uvMasterDebut?: BigIntFilter<"DailySnapshot"> | bigint | number
    autresDebut?: BigIntFilter<"DailySnapshot"> | bigint | number
    liquideFin?: BigIntFilter<"DailySnapshot"> | bigint | number
    orangeMoneyFin?: BigIntFilter<"DailySnapshot"> | bigint | number
    waveFin?: BigIntFilter<"DailySnapshot"> | bigint | number
    uvMasterFin?: BigIntFilter<"DailySnapshot"> | bigint | number
    autresFin?: BigIntFilter<"DailySnapshot"> | bigint | number
    debutTotal?: BigIntFilter<"DailySnapshot"> | bigint | number
    sortieTotal?: BigIntFilter<"DailySnapshot"> | bigint | number
    grTotal?: BigIntFilter<"DailySnapshot"> | bigint | number
    createdAt?: DateTimeFilter<"DailySnapshot"> | Date | string
    updatedAt?: DateTimeFilter<"DailySnapshot"> | Date | string
  }

  export type DailyPartnerChoiceUpsertWithWhereUniqueWithoutPartenaireInput = {
    where: DailyPartnerChoiceWhereUniqueInput
    update: XOR<DailyPartnerChoiceUpdateWithoutPartenaireInput, DailyPartnerChoiceUncheckedUpdateWithoutPartenaireInput>
    create: XOR<DailyPartnerChoiceCreateWithoutPartenaireInput, DailyPartnerChoiceUncheckedCreateWithoutPartenaireInput>
  }

  export type DailyPartnerChoiceUpdateWithWhereUniqueWithoutPartenaireInput = {
    where: DailyPartnerChoiceWhereUniqueInput
    data: XOR<DailyPartnerChoiceUpdateWithoutPartenaireInput, DailyPartnerChoiceUncheckedUpdateWithoutPartenaireInput>
  }

  export type DailyPartnerChoiceUpdateManyWithWhereWithoutPartenaireInput = {
    where: DailyPartnerChoiceScalarWhereInput
    data: XOR<DailyPartnerChoiceUpdateManyMutationInput, DailyPartnerChoiceUncheckedUpdateManyWithoutPartenaireInput>
  }

  export type DailyPartnerChoiceScalarWhereInput = {
    AND?: DailyPartnerChoiceScalarWhereInput | DailyPartnerChoiceScalarWhereInput[]
    OR?: DailyPartnerChoiceScalarWhereInput[]
    NOT?: DailyPartnerChoiceScalarWhereInput | DailyPartnerChoiceScalarWhereInput[]
    id?: StringFilter<"DailyPartnerChoice"> | string
    date?: DateTimeFilter<"DailyPartnerChoice"> | Date | string
    partenaireId?: StringFilter<"DailyPartnerChoice"> | string
    superviseurId?: StringFilter<"DailyPartnerChoice"> | string
    createdAt?: DateTimeFilter<"DailyPartnerChoice"> | Date | string
    updatedAt?: DateTimeFilter<"DailyPartnerChoice"> | Date | string
  }

  export type DailyPartnerChoiceUpsertWithWhereUniqueWithoutSuperviseurInput = {
    where: DailyPartnerChoiceWhereUniqueInput
    update: XOR<DailyPartnerChoiceUpdateWithoutSuperviseurInput, DailyPartnerChoiceUncheckedUpdateWithoutSuperviseurInput>
    create: XOR<DailyPartnerChoiceCreateWithoutSuperviseurInput, DailyPartnerChoiceUncheckedCreateWithoutSuperviseurInput>
  }

  export type DailyPartnerChoiceUpdateWithWhereUniqueWithoutSuperviseurInput = {
    where: DailyPartnerChoiceWhereUniqueInput
    data: XOR<DailyPartnerChoiceUpdateWithoutSuperviseurInput, DailyPartnerChoiceUncheckedUpdateWithoutSuperviseurInput>
  }

  export type DailyPartnerChoiceUpdateManyWithWhereWithoutSuperviseurInput = {
    where: DailyPartnerChoiceScalarWhereInput
    data: XOR<DailyPartnerChoiceUpdateManyMutationInput, DailyPartnerChoiceUncheckedUpdateManyWithoutSuperviseurInput>
  }

  export type UserCreateWithoutDemandesInscriptionInput = {
    id?: string
    telephone: string
    code: string
    codeClair?: string | null
    nomComplet: string
    adresse: string
    photo?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    transactionsEnvoyees?: TransactionCreateNestedManyWithoutEnvoyeurInput
    transactionsRecues?: TransactionCreateNestedManyWithoutDestinataireInput
    transactionsPartenaire?: TransactionCreateNestedManyWithoutPartenaireInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    dailySnapshots?: DailySnapshotCreateNestedManyWithoutUserInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceCreateNestedManyWithoutPartenaireInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceCreateNestedManyWithoutSuperviseurInput
  }

  export type UserUncheckedCreateWithoutDemandesInscriptionInput = {
    id?: string
    telephone: string
    code: string
    codeClair?: string | null
    nomComplet: string
    adresse: string
    photo?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    transactionsEnvoyees?: TransactionUncheckedCreateNestedManyWithoutEnvoyeurInput
    transactionsRecues?: TransactionUncheckedCreateNestedManyWithoutDestinataireInput
    transactionsPartenaire?: TransactionUncheckedCreateNestedManyWithoutPartenaireInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    dailySnapshots?: DailySnapshotUncheckedCreateNestedManyWithoutUserInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceUncheckedCreateNestedManyWithoutPartenaireInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceUncheckedCreateNestedManyWithoutSuperviseurInput
  }

  export type UserCreateOrConnectWithoutDemandesInscriptionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDemandesInscriptionInput, UserUncheckedCreateWithoutDemandesInscriptionInput>
  }

  export type UserUpsertWithoutDemandesInscriptionInput = {
    update: XOR<UserUpdateWithoutDemandesInscriptionInput, UserUncheckedUpdateWithoutDemandesInscriptionInput>
    create: XOR<UserCreateWithoutDemandesInscriptionInput, UserUncheckedCreateWithoutDemandesInscriptionInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDemandesInscriptionInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDemandesInscriptionInput, UserUncheckedUpdateWithoutDemandesInscriptionInput>
  }

  export type UserUpdateWithoutDemandesInscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    codeClair?: NullableStringFieldUpdateOperationsInput | string | null
    nomComplet?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    transactionsEnvoyees?: TransactionUpdateManyWithoutEnvoyeurNestedInput
    transactionsRecues?: TransactionUpdateManyWithoutDestinataireNestedInput
    transactionsPartenaire?: TransactionUpdateManyWithoutPartenaireNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    dailySnapshots?: DailySnapshotUpdateManyWithoutUserNestedInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceUpdateManyWithoutPartenaireNestedInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceUpdateManyWithoutSuperviseurNestedInput
  }

  export type UserUncheckedUpdateWithoutDemandesInscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    codeClair?: NullableStringFieldUpdateOperationsInput | string | null
    nomComplet?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    transactionsEnvoyees?: TransactionUncheckedUpdateManyWithoutEnvoyeurNestedInput
    transactionsRecues?: TransactionUncheckedUpdateManyWithoutDestinataireNestedInput
    transactionsPartenaire?: TransactionUncheckedUpdateManyWithoutPartenaireNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    dailySnapshots?: DailySnapshotUncheckedUpdateManyWithoutUserNestedInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceUncheckedUpdateManyWithoutPartenaireNestedInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceUncheckedUpdateManyWithoutSuperviseurNestedInput
  }

  export type UserCreateWithoutChoixPartenaireQuotidiensInput = {
    id?: string
    telephone: string
    code: string
    codeClair?: string | null
    nomComplet: string
    adresse: string
    photo?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    transactionsEnvoyees?: TransactionCreateNestedManyWithoutEnvoyeurInput
    transactionsRecues?: TransactionCreateNestedManyWithoutDestinataireInput
    transactionsPartenaire?: TransactionCreateNestedManyWithoutPartenaireInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    demandesInscription?: RegistrationRequestCreateNestedManyWithoutReviewedByInput
    dailySnapshots?: DailySnapshotCreateNestedManyWithoutUserInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceCreateNestedManyWithoutSuperviseurInput
  }

  export type UserUncheckedCreateWithoutChoixPartenaireQuotidiensInput = {
    id?: string
    telephone: string
    code: string
    codeClair?: string | null
    nomComplet: string
    adresse: string
    photo?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    transactionsEnvoyees?: TransactionUncheckedCreateNestedManyWithoutEnvoyeurInput
    transactionsRecues?: TransactionUncheckedCreateNestedManyWithoutDestinataireInput
    transactionsPartenaire?: TransactionUncheckedCreateNestedManyWithoutPartenaireInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    demandesInscription?: RegistrationRequestUncheckedCreateNestedManyWithoutReviewedByInput
    dailySnapshots?: DailySnapshotUncheckedCreateNestedManyWithoutUserInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceUncheckedCreateNestedManyWithoutSuperviseurInput
  }

  export type UserCreateOrConnectWithoutChoixPartenaireQuotidiensInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChoixPartenaireQuotidiensInput, UserUncheckedCreateWithoutChoixPartenaireQuotidiensInput>
  }

  export type UserCreateWithoutChoixSuperviseurQuotidiensInput = {
    id?: string
    telephone: string
    code: string
    codeClair?: string | null
    nomComplet: string
    adresse: string
    photo?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    transactionsEnvoyees?: TransactionCreateNestedManyWithoutEnvoyeurInput
    transactionsRecues?: TransactionCreateNestedManyWithoutDestinataireInput
    transactionsPartenaire?: TransactionCreateNestedManyWithoutPartenaireInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    demandesInscription?: RegistrationRequestCreateNestedManyWithoutReviewedByInput
    dailySnapshots?: DailySnapshotCreateNestedManyWithoutUserInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceCreateNestedManyWithoutPartenaireInput
  }

  export type UserUncheckedCreateWithoutChoixSuperviseurQuotidiensInput = {
    id?: string
    telephone: string
    code: string
    codeClair?: string | null
    nomComplet: string
    adresse: string
    photo?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    transactionsEnvoyees?: TransactionUncheckedCreateNestedManyWithoutEnvoyeurInput
    transactionsRecues?: TransactionUncheckedCreateNestedManyWithoutDestinataireInput
    transactionsPartenaire?: TransactionUncheckedCreateNestedManyWithoutPartenaireInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    demandesInscription?: RegistrationRequestUncheckedCreateNestedManyWithoutReviewedByInput
    dailySnapshots?: DailySnapshotUncheckedCreateNestedManyWithoutUserInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceUncheckedCreateNestedManyWithoutPartenaireInput
  }

  export type UserCreateOrConnectWithoutChoixSuperviseurQuotidiensInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChoixSuperviseurQuotidiensInput, UserUncheckedCreateWithoutChoixSuperviseurQuotidiensInput>
  }

  export type UserUpsertWithoutChoixPartenaireQuotidiensInput = {
    update: XOR<UserUpdateWithoutChoixPartenaireQuotidiensInput, UserUncheckedUpdateWithoutChoixPartenaireQuotidiensInput>
    create: XOR<UserCreateWithoutChoixPartenaireQuotidiensInput, UserUncheckedCreateWithoutChoixPartenaireQuotidiensInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChoixPartenaireQuotidiensInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChoixPartenaireQuotidiensInput, UserUncheckedUpdateWithoutChoixPartenaireQuotidiensInput>
  }

  export type UserUpdateWithoutChoixPartenaireQuotidiensInput = {
    id?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    codeClair?: NullableStringFieldUpdateOperationsInput | string | null
    nomComplet?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    transactionsEnvoyees?: TransactionUpdateManyWithoutEnvoyeurNestedInput
    transactionsRecues?: TransactionUpdateManyWithoutDestinataireNestedInput
    transactionsPartenaire?: TransactionUpdateManyWithoutPartenaireNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    demandesInscription?: RegistrationRequestUpdateManyWithoutReviewedByNestedInput
    dailySnapshots?: DailySnapshotUpdateManyWithoutUserNestedInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceUpdateManyWithoutSuperviseurNestedInput
  }

  export type UserUncheckedUpdateWithoutChoixPartenaireQuotidiensInput = {
    id?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    codeClair?: NullableStringFieldUpdateOperationsInput | string | null
    nomComplet?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    transactionsEnvoyees?: TransactionUncheckedUpdateManyWithoutEnvoyeurNestedInput
    transactionsRecues?: TransactionUncheckedUpdateManyWithoutDestinataireNestedInput
    transactionsPartenaire?: TransactionUncheckedUpdateManyWithoutPartenaireNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    demandesInscription?: RegistrationRequestUncheckedUpdateManyWithoutReviewedByNestedInput
    dailySnapshots?: DailySnapshotUncheckedUpdateManyWithoutUserNestedInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceUncheckedUpdateManyWithoutSuperviseurNestedInput
  }

  export type UserUpsertWithoutChoixSuperviseurQuotidiensInput = {
    update: XOR<UserUpdateWithoutChoixSuperviseurQuotidiensInput, UserUncheckedUpdateWithoutChoixSuperviseurQuotidiensInput>
    create: XOR<UserCreateWithoutChoixSuperviseurQuotidiensInput, UserUncheckedCreateWithoutChoixSuperviseurQuotidiensInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChoixSuperviseurQuotidiensInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChoixSuperviseurQuotidiensInput, UserUncheckedUpdateWithoutChoixSuperviseurQuotidiensInput>
  }

  export type UserUpdateWithoutChoixSuperviseurQuotidiensInput = {
    id?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    codeClair?: NullableStringFieldUpdateOperationsInput | string | null
    nomComplet?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    transactionsEnvoyees?: TransactionUpdateManyWithoutEnvoyeurNestedInput
    transactionsRecues?: TransactionUpdateManyWithoutDestinataireNestedInput
    transactionsPartenaire?: TransactionUpdateManyWithoutPartenaireNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    demandesInscription?: RegistrationRequestUpdateManyWithoutReviewedByNestedInput
    dailySnapshots?: DailySnapshotUpdateManyWithoutUserNestedInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceUpdateManyWithoutPartenaireNestedInput
  }

  export type UserUncheckedUpdateWithoutChoixSuperviseurQuotidiensInput = {
    id?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    codeClair?: NullableStringFieldUpdateOperationsInput | string | null
    nomComplet?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    transactionsEnvoyees?: TransactionUncheckedUpdateManyWithoutEnvoyeurNestedInput
    transactionsRecues?: TransactionUncheckedUpdateManyWithoutDestinataireNestedInput
    transactionsPartenaire?: TransactionUncheckedUpdateManyWithoutPartenaireNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    demandesInscription?: RegistrationRequestUncheckedUpdateManyWithoutReviewedByNestedInput
    dailySnapshots?: DailySnapshotUncheckedUpdateManyWithoutUserNestedInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceUncheckedUpdateManyWithoutPartenaireNestedInput
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    telephone: string
    code: string
    codeClair?: string | null
    nomComplet: string
    adresse: string
    photo?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    transactionsEnvoyees?: TransactionCreateNestedManyWithoutEnvoyeurInput
    transactionsRecues?: TransactionCreateNestedManyWithoutDestinataireInput
    transactionsPartenaire?: TransactionCreateNestedManyWithoutPartenaireInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    demandesInscription?: RegistrationRequestCreateNestedManyWithoutReviewedByInput
    dailySnapshots?: DailySnapshotCreateNestedManyWithoutUserInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceCreateNestedManyWithoutPartenaireInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceCreateNestedManyWithoutSuperviseurInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    telephone: string
    code: string
    codeClair?: string | null
    nomComplet: string
    adresse: string
    photo?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    transactionsEnvoyees?: TransactionUncheckedCreateNestedManyWithoutEnvoyeurInput
    transactionsRecues?: TransactionUncheckedCreateNestedManyWithoutDestinataireInput
    transactionsPartenaire?: TransactionUncheckedCreateNestedManyWithoutPartenaireInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    demandesInscription?: RegistrationRequestUncheckedCreateNestedManyWithoutReviewedByInput
    dailySnapshots?: DailySnapshotUncheckedCreateNestedManyWithoutUserInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceUncheckedCreateNestedManyWithoutPartenaireInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceUncheckedCreateNestedManyWithoutSuperviseurInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type TransactionCreateWithoutCompteOrigineInput = {
    id?: string
    montant: bigint | number
    type: $Enums.TransactionType
    description?: string | null
    archived?: boolean | null
    archivedAt?: Date | string | null
    isValidated?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    envoyeur: UserCreateNestedOneWithoutTransactionsEnvoyeesInput
    destinataire?: UserCreateNestedOneWithoutTransactionsRecuesInput
    partenaire?: UserCreateNestedOneWithoutTransactionsPartenaireInput
    compteDestination?: AccountCreateNestedOneWithoutTransactionsDestinationInput
  }

  export type TransactionUncheckedCreateWithoutCompteOrigineInput = {
    id?: string
    montant: bigint | number
    type: $Enums.TransactionType
    description?: string | null
    archived?: boolean | null
    archivedAt?: Date | string | null
    envoyeurId: string
    destinataireId?: string | null
    partenaireId?: string | null
    compteDestinationId?: string | null
    isValidated?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateOrConnectWithoutCompteOrigineInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutCompteOrigineInput, TransactionUncheckedCreateWithoutCompteOrigineInput>
  }

  export type TransactionCreateManyCompteOrigineInputEnvelope = {
    data: TransactionCreateManyCompteOrigineInput | TransactionCreateManyCompteOrigineInput[]
    skipDuplicates?: boolean
  }

  export type TransactionCreateWithoutCompteDestinationInput = {
    id?: string
    montant: bigint | number
    type: $Enums.TransactionType
    description?: string | null
    archived?: boolean | null
    archivedAt?: Date | string | null
    isValidated?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    envoyeur: UserCreateNestedOneWithoutTransactionsEnvoyeesInput
    destinataire?: UserCreateNestedOneWithoutTransactionsRecuesInput
    partenaire?: UserCreateNestedOneWithoutTransactionsPartenaireInput
    compteOrigine?: AccountCreateNestedOneWithoutTransactionsOrigineInput
  }

  export type TransactionUncheckedCreateWithoutCompteDestinationInput = {
    id?: string
    montant: bigint | number
    type: $Enums.TransactionType
    description?: string | null
    archived?: boolean | null
    archivedAt?: Date | string | null
    envoyeurId: string
    destinataireId?: string | null
    partenaireId?: string | null
    compteOrigineId?: string | null
    isValidated?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateOrConnectWithoutCompteDestinationInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutCompteDestinationInput, TransactionUncheckedCreateWithoutCompteDestinationInput>
  }

  export type TransactionCreateManyCompteDestinationInputEnvelope = {
    data: TransactionCreateManyCompteDestinationInput | TransactionCreateManyCompteDestinationInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    codeClair?: NullableStringFieldUpdateOperationsInput | string | null
    nomComplet?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactionsEnvoyees?: TransactionUpdateManyWithoutEnvoyeurNestedInput
    transactionsRecues?: TransactionUpdateManyWithoutDestinataireNestedInput
    transactionsPartenaire?: TransactionUpdateManyWithoutPartenaireNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    demandesInscription?: RegistrationRequestUpdateManyWithoutReviewedByNestedInput
    dailySnapshots?: DailySnapshotUpdateManyWithoutUserNestedInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceUpdateManyWithoutPartenaireNestedInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceUpdateManyWithoutSuperviseurNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    codeClair?: NullableStringFieldUpdateOperationsInput | string | null
    nomComplet?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactionsEnvoyees?: TransactionUncheckedUpdateManyWithoutEnvoyeurNestedInput
    transactionsRecues?: TransactionUncheckedUpdateManyWithoutDestinataireNestedInput
    transactionsPartenaire?: TransactionUncheckedUpdateManyWithoutPartenaireNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    demandesInscription?: RegistrationRequestUncheckedUpdateManyWithoutReviewedByNestedInput
    dailySnapshots?: DailySnapshotUncheckedUpdateManyWithoutUserNestedInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceUncheckedUpdateManyWithoutPartenaireNestedInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceUncheckedUpdateManyWithoutSuperviseurNestedInput
  }

  export type TransactionUpsertWithWhereUniqueWithoutCompteOrigineInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutCompteOrigineInput, TransactionUncheckedUpdateWithoutCompteOrigineInput>
    create: XOR<TransactionCreateWithoutCompteOrigineInput, TransactionUncheckedCreateWithoutCompteOrigineInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutCompteOrigineInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutCompteOrigineInput, TransactionUncheckedUpdateWithoutCompteOrigineInput>
  }

  export type TransactionUpdateManyWithWhereWithoutCompteOrigineInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutCompteOrigineInput>
  }

  export type TransactionUpsertWithWhereUniqueWithoutCompteDestinationInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutCompteDestinationInput, TransactionUncheckedUpdateWithoutCompteDestinationInput>
    create: XOR<TransactionCreateWithoutCompteDestinationInput, TransactionUncheckedCreateWithoutCompteDestinationInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutCompteDestinationInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutCompteDestinationInput, TransactionUncheckedUpdateWithoutCompteDestinationInput>
  }

  export type TransactionUpdateManyWithWhereWithoutCompteDestinationInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutCompteDestinationInput>
  }

  export type UserCreateWithoutTransactionsEnvoyeesInput = {
    id?: string
    telephone: string
    code: string
    codeClair?: string | null
    nomComplet: string
    adresse: string
    photo?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    transactionsRecues?: TransactionCreateNestedManyWithoutDestinataireInput
    transactionsPartenaire?: TransactionCreateNestedManyWithoutPartenaireInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    demandesInscription?: RegistrationRequestCreateNestedManyWithoutReviewedByInput
    dailySnapshots?: DailySnapshotCreateNestedManyWithoutUserInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceCreateNestedManyWithoutPartenaireInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceCreateNestedManyWithoutSuperviseurInput
  }

  export type UserUncheckedCreateWithoutTransactionsEnvoyeesInput = {
    id?: string
    telephone: string
    code: string
    codeClair?: string | null
    nomComplet: string
    adresse: string
    photo?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    transactionsRecues?: TransactionUncheckedCreateNestedManyWithoutDestinataireInput
    transactionsPartenaire?: TransactionUncheckedCreateNestedManyWithoutPartenaireInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    demandesInscription?: RegistrationRequestUncheckedCreateNestedManyWithoutReviewedByInput
    dailySnapshots?: DailySnapshotUncheckedCreateNestedManyWithoutUserInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceUncheckedCreateNestedManyWithoutPartenaireInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceUncheckedCreateNestedManyWithoutSuperviseurInput
  }

  export type UserCreateOrConnectWithoutTransactionsEnvoyeesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTransactionsEnvoyeesInput, UserUncheckedCreateWithoutTransactionsEnvoyeesInput>
  }

  export type UserCreateWithoutTransactionsRecuesInput = {
    id?: string
    telephone: string
    code: string
    codeClair?: string | null
    nomComplet: string
    adresse: string
    photo?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    transactionsEnvoyees?: TransactionCreateNestedManyWithoutEnvoyeurInput
    transactionsPartenaire?: TransactionCreateNestedManyWithoutPartenaireInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    demandesInscription?: RegistrationRequestCreateNestedManyWithoutReviewedByInput
    dailySnapshots?: DailySnapshotCreateNestedManyWithoutUserInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceCreateNestedManyWithoutPartenaireInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceCreateNestedManyWithoutSuperviseurInput
  }

  export type UserUncheckedCreateWithoutTransactionsRecuesInput = {
    id?: string
    telephone: string
    code: string
    codeClair?: string | null
    nomComplet: string
    adresse: string
    photo?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    transactionsEnvoyees?: TransactionUncheckedCreateNestedManyWithoutEnvoyeurInput
    transactionsPartenaire?: TransactionUncheckedCreateNestedManyWithoutPartenaireInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    demandesInscription?: RegistrationRequestUncheckedCreateNestedManyWithoutReviewedByInput
    dailySnapshots?: DailySnapshotUncheckedCreateNestedManyWithoutUserInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceUncheckedCreateNestedManyWithoutPartenaireInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceUncheckedCreateNestedManyWithoutSuperviseurInput
  }

  export type UserCreateOrConnectWithoutTransactionsRecuesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTransactionsRecuesInput, UserUncheckedCreateWithoutTransactionsRecuesInput>
  }

  export type UserCreateWithoutTransactionsPartenaireInput = {
    id?: string
    telephone: string
    code: string
    codeClair?: string | null
    nomComplet: string
    adresse: string
    photo?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    transactionsEnvoyees?: TransactionCreateNestedManyWithoutEnvoyeurInput
    transactionsRecues?: TransactionCreateNestedManyWithoutDestinataireInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    demandesInscription?: RegistrationRequestCreateNestedManyWithoutReviewedByInput
    dailySnapshots?: DailySnapshotCreateNestedManyWithoutUserInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceCreateNestedManyWithoutPartenaireInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceCreateNestedManyWithoutSuperviseurInput
  }

  export type UserUncheckedCreateWithoutTransactionsPartenaireInput = {
    id?: string
    telephone: string
    code: string
    codeClair?: string | null
    nomComplet: string
    adresse: string
    photo?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    transactionsEnvoyees?: TransactionUncheckedCreateNestedManyWithoutEnvoyeurInput
    transactionsRecues?: TransactionUncheckedCreateNestedManyWithoutDestinataireInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    demandesInscription?: RegistrationRequestUncheckedCreateNestedManyWithoutReviewedByInput
    dailySnapshots?: DailySnapshotUncheckedCreateNestedManyWithoutUserInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceUncheckedCreateNestedManyWithoutPartenaireInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceUncheckedCreateNestedManyWithoutSuperviseurInput
  }

  export type UserCreateOrConnectWithoutTransactionsPartenaireInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTransactionsPartenaireInput, UserUncheckedCreateWithoutTransactionsPartenaireInput>
  }

  export type AccountCreateWithoutTransactionsOrigineInput = {
    id?: string
    type: $Enums.AccountType
    balance?: bigint | number
    initialBalance?: bigint | number
    previousInitialBalance?: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAccountsInput
    transactionsDestination?: TransactionCreateNestedManyWithoutCompteDestinationInput
  }

  export type AccountUncheckedCreateWithoutTransactionsOrigineInput = {
    id?: string
    type: $Enums.AccountType
    balance?: bigint | number
    initialBalance?: bigint | number
    previousInitialBalance?: bigint | number
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    transactionsDestination?: TransactionUncheckedCreateNestedManyWithoutCompteDestinationInput
  }

  export type AccountCreateOrConnectWithoutTransactionsOrigineInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutTransactionsOrigineInput, AccountUncheckedCreateWithoutTransactionsOrigineInput>
  }

  export type AccountCreateWithoutTransactionsDestinationInput = {
    id?: string
    type: $Enums.AccountType
    balance?: bigint | number
    initialBalance?: bigint | number
    previousInitialBalance?: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAccountsInput
    transactionsOrigine?: TransactionCreateNestedManyWithoutCompteOrigineInput
  }

  export type AccountUncheckedCreateWithoutTransactionsDestinationInput = {
    id?: string
    type: $Enums.AccountType
    balance?: bigint | number
    initialBalance?: bigint | number
    previousInitialBalance?: bigint | number
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    transactionsOrigine?: TransactionUncheckedCreateNestedManyWithoutCompteOrigineInput
  }

  export type AccountCreateOrConnectWithoutTransactionsDestinationInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutTransactionsDestinationInput, AccountUncheckedCreateWithoutTransactionsDestinationInput>
  }

  export type UserUpsertWithoutTransactionsEnvoyeesInput = {
    update: XOR<UserUpdateWithoutTransactionsEnvoyeesInput, UserUncheckedUpdateWithoutTransactionsEnvoyeesInput>
    create: XOR<UserCreateWithoutTransactionsEnvoyeesInput, UserUncheckedCreateWithoutTransactionsEnvoyeesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTransactionsEnvoyeesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTransactionsEnvoyeesInput, UserUncheckedUpdateWithoutTransactionsEnvoyeesInput>
  }

  export type UserUpdateWithoutTransactionsEnvoyeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    codeClair?: NullableStringFieldUpdateOperationsInput | string | null
    nomComplet?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    transactionsRecues?: TransactionUpdateManyWithoutDestinataireNestedInput
    transactionsPartenaire?: TransactionUpdateManyWithoutPartenaireNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    demandesInscription?: RegistrationRequestUpdateManyWithoutReviewedByNestedInput
    dailySnapshots?: DailySnapshotUpdateManyWithoutUserNestedInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceUpdateManyWithoutPartenaireNestedInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceUpdateManyWithoutSuperviseurNestedInput
  }

  export type UserUncheckedUpdateWithoutTransactionsEnvoyeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    codeClair?: NullableStringFieldUpdateOperationsInput | string | null
    nomComplet?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    transactionsRecues?: TransactionUncheckedUpdateManyWithoutDestinataireNestedInput
    transactionsPartenaire?: TransactionUncheckedUpdateManyWithoutPartenaireNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    demandesInscription?: RegistrationRequestUncheckedUpdateManyWithoutReviewedByNestedInput
    dailySnapshots?: DailySnapshotUncheckedUpdateManyWithoutUserNestedInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceUncheckedUpdateManyWithoutPartenaireNestedInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceUncheckedUpdateManyWithoutSuperviseurNestedInput
  }

  export type UserUpsertWithoutTransactionsRecuesInput = {
    update: XOR<UserUpdateWithoutTransactionsRecuesInput, UserUncheckedUpdateWithoutTransactionsRecuesInput>
    create: XOR<UserCreateWithoutTransactionsRecuesInput, UserUncheckedCreateWithoutTransactionsRecuesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTransactionsRecuesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTransactionsRecuesInput, UserUncheckedUpdateWithoutTransactionsRecuesInput>
  }

  export type UserUpdateWithoutTransactionsRecuesInput = {
    id?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    codeClair?: NullableStringFieldUpdateOperationsInput | string | null
    nomComplet?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    transactionsEnvoyees?: TransactionUpdateManyWithoutEnvoyeurNestedInput
    transactionsPartenaire?: TransactionUpdateManyWithoutPartenaireNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    demandesInscription?: RegistrationRequestUpdateManyWithoutReviewedByNestedInput
    dailySnapshots?: DailySnapshotUpdateManyWithoutUserNestedInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceUpdateManyWithoutPartenaireNestedInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceUpdateManyWithoutSuperviseurNestedInput
  }

  export type UserUncheckedUpdateWithoutTransactionsRecuesInput = {
    id?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    codeClair?: NullableStringFieldUpdateOperationsInput | string | null
    nomComplet?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    transactionsEnvoyees?: TransactionUncheckedUpdateManyWithoutEnvoyeurNestedInput
    transactionsPartenaire?: TransactionUncheckedUpdateManyWithoutPartenaireNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    demandesInscription?: RegistrationRequestUncheckedUpdateManyWithoutReviewedByNestedInput
    dailySnapshots?: DailySnapshotUncheckedUpdateManyWithoutUserNestedInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceUncheckedUpdateManyWithoutPartenaireNestedInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceUncheckedUpdateManyWithoutSuperviseurNestedInput
  }

  export type UserUpsertWithoutTransactionsPartenaireInput = {
    update: XOR<UserUpdateWithoutTransactionsPartenaireInput, UserUncheckedUpdateWithoutTransactionsPartenaireInput>
    create: XOR<UserCreateWithoutTransactionsPartenaireInput, UserUncheckedCreateWithoutTransactionsPartenaireInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTransactionsPartenaireInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTransactionsPartenaireInput, UserUncheckedUpdateWithoutTransactionsPartenaireInput>
  }

  export type UserUpdateWithoutTransactionsPartenaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    codeClair?: NullableStringFieldUpdateOperationsInput | string | null
    nomComplet?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    transactionsEnvoyees?: TransactionUpdateManyWithoutEnvoyeurNestedInput
    transactionsRecues?: TransactionUpdateManyWithoutDestinataireNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    demandesInscription?: RegistrationRequestUpdateManyWithoutReviewedByNestedInput
    dailySnapshots?: DailySnapshotUpdateManyWithoutUserNestedInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceUpdateManyWithoutPartenaireNestedInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceUpdateManyWithoutSuperviseurNestedInput
  }

  export type UserUncheckedUpdateWithoutTransactionsPartenaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    codeClair?: NullableStringFieldUpdateOperationsInput | string | null
    nomComplet?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    transactionsEnvoyees?: TransactionUncheckedUpdateManyWithoutEnvoyeurNestedInput
    transactionsRecues?: TransactionUncheckedUpdateManyWithoutDestinataireNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    demandesInscription?: RegistrationRequestUncheckedUpdateManyWithoutReviewedByNestedInput
    dailySnapshots?: DailySnapshotUncheckedUpdateManyWithoutUserNestedInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceUncheckedUpdateManyWithoutPartenaireNestedInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceUncheckedUpdateManyWithoutSuperviseurNestedInput
  }

  export type AccountUpsertWithoutTransactionsOrigineInput = {
    update: XOR<AccountUpdateWithoutTransactionsOrigineInput, AccountUncheckedUpdateWithoutTransactionsOrigineInput>
    create: XOR<AccountCreateWithoutTransactionsOrigineInput, AccountUncheckedCreateWithoutTransactionsOrigineInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutTransactionsOrigineInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutTransactionsOrigineInput, AccountUncheckedUpdateWithoutTransactionsOrigineInput>
  }

  export type AccountUpdateWithoutTransactionsOrigineInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    balance?: BigIntFieldUpdateOperationsInput | bigint | number
    initialBalance?: BigIntFieldUpdateOperationsInput | bigint | number
    previousInitialBalance?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
    transactionsDestination?: TransactionUpdateManyWithoutCompteDestinationNestedInput
  }

  export type AccountUncheckedUpdateWithoutTransactionsOrigineInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    balance?: BigIntFieldUpdateOperationsInput | bigint | number
    initialBalance?: BigIntFieldUpdateOperationsInput | bigint | number
    previousInitialBalance?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactionsDestination?: TransactionUncheckedUpdateManyWithoutCompteDestinationNestedInput
  }

  export type AccountUpsertWithoutTransactionsDestinationInput = {
    update: XOR<AccountUpdateWithoutTransactionsDestinationInput, AccountUncheckedUpdateWithoutTransactionsDestinationInput>
    create: XOR<AccountCreateWithoutTransactionsDestinationInput, AccountUncheckedCreateWithoutTransactionsDestinationInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutTransactionsDestinationInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutTransactionsDestinationInput, AccountUncheckedUpdateWithoutTransactionsDestinationInput>
  }

  export type AccountUpdateWithoutTransactionsDestinationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    balance?: BigIntFieldUpdateOperationsInput | bigint | number
    initialBalance?: BigIntFieldUpdateOperationsInput | bigint | number
    previousInitialBalance?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
    transactionsOrigine?: TransactionUpdateManyWithoutCompteOrigineNestedInput
  }

  export type AccountUncheckedUpdateWithoutTransactionsDestinationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    balance?: BigIntFieldUpdateOperationsInput | bigint | number
    initialBalance?: BigIntFieldUpdateOperationsInput | bigint | number
    previousInitialBalance?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactionsOrigine?: TransactionUncheckedUpdateManyWithoutCompteOrigineNestedInput
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    telephone: string
    code: string
    codeClair?: string | null
    nomComplet: string
    adresse: string
    photo?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    transactionsEnvoyees?: TransactionCreateNestedManyWithoutEnvoyeurInput
    transactionsRecues?: TransactionCreateNestedManyWithoutDestinataireInput
    transactionsPartenaire?: TransactionCreateNestedManyWithoutPartenaireInput
    demandesInscription?: RegistrationRequestCreateNestedManyWithoutReviewedByInput
    dailySnapshots?: DailySnapshotCreateNestedManyWithoutUserInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceCreateNestedManyWithoutPartenaireInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceCreateNestedManyWithoutSuperviseurInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    telephone: string
    code: string
    codeClair?: string | null
    nomComplet: string
    adresse: string
    photo?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    transactionsEnvoyees?: TransactionUncheckedCreateNestedManyWithoutEnvoyeurInput
    transactionsRecues?: TransactionUncheckedCreateNestedManyWithoutDestinataireInput
    transactionsPartenaire?: TransactionUncheckedCreateNestedManyWithoutPartenaireInput
    demandesInscription?: RegistrationRequestUncheckedCreateNestedManyWithoutReviewedByInput
    dailySnapshots?: DailySnapshotUncheckedCreateNestedManyWithoutUserInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceUncheckedCreateNestedManyWithoutPartenaireInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceUncheckedCreateNestedManyWithoutSuperviseurInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    codeClair?: NullableStringFieldUpdateOperationsInput | string | null
    nomComplet?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    transactionsEnvoyees?: TransactionUpdateManyWithoutEnvoyeurNestedInput
    transactionsRecues?: TransactionUpdateManyWithoutDestinataireNestedInput
    transactionsPartenaire?: TransactionUpdateManyWithoutPartenaireNestedInput
    demandesInscription?: RegistrationRequestUpdateManyWithoutReviewedByNestedInput
    dailySnapshots?: DailySnapshotUpdateManyWithoutUserNestedInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceUpdateManyWithoutPartenaireNestedInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceUpdateManyWithoutSuperviseurNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    codeClair?: NullableStringFieldUpdateOperationsInput | string | null
    nomComplet?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    transactionsEnvoyees?: TransactionUncheckedUpdateManyWithoutEnvoyeurNestedInput
    transactionsRecues?: TransactionUncheckedUpdateManyWithoutDestinataireNestedInput
    transactionsPartenaire?: TransactionUncheckedUpdateManyWithoutPartenaireNestedInput
    demandesInscription?: RegistrationRequestUncheckedUpdateManyWithoutReviewedByNestedInput
    dailySnapshots?: DailySnapshotUncheckedUpdateManyWithoutUserNestedInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceUncheckedUpdateManyWithoutPartenaireNestedInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceUncheckedUpdateManyWithoutSuperviseurNestedInput
  }

  export type UserCreateWithoutDailySnapshotsInput = {
    id?: string
    telephone: string
    code: string
    codeClair?: string | null
    nomComplet: string
    adresse: string
    photo?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    transactionsEnvoyees?: TransactionCreateNestedManyWithoutEnvoyeurInput
    transactionsRecues?: TransactionCreateNestedManyWithoutDestinataireInput
    transactionsPartenaire?: TransactionCreateNestedManyWithoutPartenaireInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    demandesInscription?: RegistrationRequestCreateNestedManyWithoutReviewedByInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceCreateNestedManyWithoutPartenaireInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceCreateNestedManyWithoutSuperviseurInput
  }

  export type UserUncheckedCreateWithoutDailySnapshotsInput = {
    id?: string
    telephone: string
    code: string
    codeClair?: string | null
    nomComplet: string
    adresse: string
    photo?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    transactionsEnvoyees?: TransactionUncheckedCreateNestedManyWithoutEnvoyeurInput
    transactionsRecues?: TransactionUncheckedCreateNestedManyWithoutDestinataireInput
    transactionsPartenaire?: TransactionUncheckedCreateNestedManyWithoutPartenaireInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    demandesInscription?: RegistrationRequestUncheckedCreateNestedManyWithoutReviewedByInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceUncheckedCreateNestedManyWithoutPartenaireInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceUncheckedCreateNestedManyWithoutSuperviseurInput
  }

  export type UserCreateOrConnectWithoutDailySnapshotsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDailySnapshotsInput, UserUncheckedCreateWithoutDailySnapshotsInput>
  }

  export type UserUpsertWithoutDailySnapshotsInput = {
    update: XOR<UserUpdateWithoutDailySnapshotsInput, UserUncheckedUpdateWithoutDailySnapshotsInput>
    create: XOR<UserCreateWithoutDailySnapshotsInput, UserUncheckedCreateWithoutDailySnapshotsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDailySnapshotsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDailySnapshotsInput, UserUncheckedUpdateWithoutDailySnapshotsInput>
  }

  export type UserUpdateWithoutDailySnapshotsInput = {
    id?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    codeClair?: NullableStringFieldUpdateOperationsInput | string | null
    nomComplet?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    transactionsEnvoyees?: TransactionUpdateManyWithoutEnvoyeurNestedInput
    transactionsRecues?: TransactionUpdateManyWithoutDestinataireNestedInput
    transactionsPartenaire?: TransactionUpdateManyWithoutPartenaireNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    demandesInscription?: RegistrationRequestUpdateManyWithoutReviewedByNestedInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceUpdateManyWithoutPartenaireNestedInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceUpdateManyWithoutSuperviseurNestedInput
  }

  export type UserUncheckedUpdateWithoutDailySnapshotsInput = {
    id?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    codeClair?: NullableStringFieldUpdateOperationsInput | string | null
    nomComplet?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    transactionsEnvoyees?: TransactionUncheckedUpdateManyWithoutEnvoyeurNestedInput
    transactionsRecues?: TransactionUncheckedUpdateManyWithoutDestinataireNestedInput
    transactionsPartenaire?: TransactionUncheckedUpdateManyWithoutPartenaireNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    demandesInscription?: RegistrationRequestUncheckedUpdateManyWithoutReviewedByNestedInput
    choixPartenaireQuotidiens?: DailyPartnerChoiceUncheckedUpdateManyWithoutPartenaireNestedInput
    choixSuperviseurQuotidiens?: DailyPartnerChoiceUncheckedUpdateManyWithoutSuperviseurNestedInput
  }

  export type AccountCreateManyUserInput = {
    id?: string
    type: $Enums.AccountType
    balance?: bigint | number
    initialBalance?: bigint | number
    previousInitialBalance?: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateManyEnvoyeurInput = {
    id?: string
    montant: bigint | number
    type: $Enums.TransactionType
    description?: string | null
    archived?: boolean | null
    archivedAt?: Date | string | null
    destinataireId?: string | null
    partenaireId?: string | null
    compteOrigineId?: string | null
    compteDestinationId?: string | null
    isValidated?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateManyDestinataireInput = {
    id?: string
    montant: bigint | number
    type: $Enums.TransactionType
    description?: string | null
    archived?: boolean | null
    archivedAt?: Date | string | null
    envoyeurId: string
    partenaireId?: string | null
    compteOrigineId?: string | null
    compteDestinationId?: string | null
    isValidated?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateManyPartenaireInput = {
    id?: string
    montant: bigint | number
    type: $Enums.TransactionType
    description?: string | null
    archived?: boolean | null
    archivedAt?: Date | string | null
    envoyeurId: string
    destinataireId?: string | null
    compteOrigineId?: string | null
    compteDestinationId?: string | null
    isValidated?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateManyUserInput = {
    id?: string
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RegistrationRequestCreateManyReviewedByInput = {
    id?: string
    telephone: string
    nomComplet: string
    adresse: string
    message?: string | null
    status?: $Enums.UserStatus
    codeGenere?: string | null
    reviewedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DailySnapshotCreateManyUserInput = {
    id?: string
    date: Date | string
    liquideDebut?: bigint | number
    orangeMoneyDebut?: bigint | number
    waveDebut?: bigint | number
    uvMasterDebut?: bigint | number
    autresDebut?: bigint | number
    liquideFin?: bigint | number
    orangeMoneyFin?: bigint | number
    waveFin?: bigint | number
    uvMasterFin?: bigint | number
    autresFin?: bigint | number
    debutTotal?: bigint | number
    sortieTotal?: bigint | number
    grTotal?: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DailyPartnerChoiceCreateManyPartenaireInput = {
    id?: string
    date: Date | string
    superviseurId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DailyPartnerChoiceCreateManySuperviseurInput = {
    id?: string
    date: Date | string
    partenaireId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    balance?: BigIntFieldUpdateOperationsInput | bigint | number
    initialBalance?: BigIntFieldUpdateOperationsInput | bigint | number
    previousInitialBalance?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactionsOrigine?: TransactionUpdateManyWithoutCompteOrigineNestedInput
    transactionsDestination?: TransactionUpdateManyWithoutCompteDestinationNestedInput
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    balance?: BigIntFieldUpdateOperationsInput | bigint | number
    initialBalance?: BigIntFieldUpdateOperationsInput | bigint | number
    previousInitialBalance?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactionsOrigine?: TransactionUncheckedUpdateManyWithoutCompteOrigineNestedInput
    transactionsDestination?: TransactionUncheckedUpdateManyWithoutCompteDestinationNestedInput
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    balance?: BigIntFieldUpdateOperationsInput | bigint | number
    initialBalance?: BigIntFieldUpdateOperationsInput | bigint | number
    previousInitialBalance?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUpdateWithoutEnvoyeurInput = {
    id?: StringFieldUpdateOperationsInput | string
    montant?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isValidated?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    destinataire?: UserUpdateOneWithoutTransactionsRecuesNestedInput
    partenaire?: UserUpdateOneWithoutTransactionsPartenaireNestedInput
    compteOrigine?: AccountUpdateOneWithoutTransactionsOrigineNestedInput
    compteDestination?: AccountUpdateOneWithoutTransactionsDestinationNestedInput
  }

  export type TransactionUncheckedUpdateWithoutEnvoyeurInput = {
    id?: StringFieldUpdateOperationsInput | string
    montant?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    destinataireId?: NullableStringFieldUpdateOperationsInput | string | null
    partenaireId?: NullableStringFieldUpdateOperationsInput | string | null
    compteOrigineId?: NullableStringFieldUpdateOperationsInput | string | null
    compteDestinationId?: NullableStringFieldUpdateOperationsInput | string | null
    isValidated?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyWithoutEnvoyeurInput = {
    id?: StringFieldUpdateOperationsInput | string
    montant?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    destinataireId?: NullableStringFieldUpdateOperationsInput | string | null
    partenaireId?: NullableStringFieldUpdateOperationsInput | string | null
    compteOrigineId?: NullableStringFieldUpdateOperationsInput | string | null
    compteDestinationId?: NullableStringFieldUpdateOperationsInput | string | null
    isValidated?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUpdateWithoutDestinataireInput = {
    id?: StringFieldUpdateOperationsInput | string
    montant?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isValidated?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    envoyeur?: UserUpdateOneRequiredWithoutTransactionsEnvoyeesNestedInput
    partenaire?: UserUpdateOneWithoutTransactionsPartenaireNestedInput
    compteOrigine?: AccountUpdateOneWithoutTransactionsOrigineNestedInput
    compteDestination?: AccountUpdateOneWithoutTransactionsDestinationNestedInput
  }

  export type TransactionUncheckedUpdateWithoutDestinataireInput = {
    id?: StringFieldUpdateOperationsInput | string
    montant?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    envoyeurId?: StringFieldUpdateOperationsInput | string
    partenaireId?: NullableStringFieldUpdateOperationsInput | string | null
    compteOrigineId?: NullableStringFieldUpdateOperationsInput | string | null
    compteDestinationId?: NullableStringFieldUpdateOperationsInput | string | null
    isValidated?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyWithoutDestinataireInput = {
    id?: StringFieldUpdateOperationsInput | string
    montant?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    envoyeurId?: StringFieldUpdateOperationsInput | string
    partenaireId?: NullableStringFieldUpdateOperationsInput | string | null
    compteOrigineId?: NullableStringFieldUpdateOperationsInput | string | null
    compteDestinationId?: NullableStringFieldUpdateOperationsInput | string | null
    isValidated?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUpdateWithoutPartenaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    montant?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isValidated?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    envoyeur?: UserUpdateOneRequiredWithoutTransactionsEnvoyeesNestedInput
    destinataire?: UserUpdateOneWithoutTransactionsRecuesNestedInput
    compteOrigine?: AccountUpdateOneWithoutTransactionsOrigineNestedInput
    compteDestination?: AccountUpdateOneWithoutTransactionsDestinationNestedInput
  }

  export type TransactionUncheckedUpdateWithoutPartenaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    montant?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    envoyeurId?: StringFieldUpdateOperationsInput | string
    destinataireId?: NullableStringFieldUpdateOperationsInput | string | null
    compteOrigineId?: NullableStringFieldUpdateOperationsInput | string | null
    compteDestinationId?: NullableStringFieldUpdateOperationsInput | string | null
    isValidated?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyWithoutPartenaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    montant?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    envoyeurId?: StringFieldUpdateOperationsInput | string
    destinataireId?: NullableStringFieldUpdateOperationsInput | string | null
    compteOrigineId?: NullableStringFieldUpdateOperationsInput | string | null
    compteDestinationId?: NullableStringFieldUpdateOperationsInput | string | null
    isValidated?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    data?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegistrationRequestUpdateWithoutReviewedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    nomComplet?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    codeGenere?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegistrationRequestUncheckedUpdateWithoutReviewedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    nomComplet?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    codeGenere?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegistrationRequestUncheckedUpdateManyWithoutReviewedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    nomComplet?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    codeGenere?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailySnapshotUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    liquideDebut?: BigIntFieldUpdateOperationsInput | bigint | number
    orangeMoneyDebut?: BigIntFieldUpdateOperationsInput | bigint | number
    waveDebut?: BigIntFieldUpdateOperationsInput | bigint | number
    uvMasterDebut?: BigIntFieldUpdateOperationsInput | bigint | number
    autresDebut?: BigIntFieldUpdateOperationsInput | bigint | number
    liquideFin?: BigIntFieldUpdateOperationsInput | bigint | number
    orangeMoneyFin?: BigIntFieldUpdateOperationsInput | bigint | number
    waveFin?: BigIntFieldUpdateOperationsInput | bigint | number
    uvMasterFin?: BigIntFieldUpdateOperationsInput | bigint | number
    autresFin?: BigIntFieldUpdateOperationsInput | bigint | number
    debutTotal?: BigIntFieldUpdateOperationsInput | bigint | number
    sortieTotal?: BigIntFieldUpdateOperationsInput | bigint | number
    grTotal?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailySnapshotUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    liquideDebut?: BigIntFieldUpdateOperationsInput | bigint | number
    orangeMoneyDebut?: BigIntFieldUpdateOperationsInput | bigint | number
    waveDebut?: BigIntFieldUpdateOperationsInput | bigint | number
    uvMasterDebut?: BigIntFieldUpdateOperationsInput | bigint | number
    autresDebut?: BigIntFieldUpdateOperationsInput | bigint | number
    liquideFin?: BigIntFieldUpdateOperationsInput | bigint | number
    orangeMoneyFin?: BigIntFieldUpdateOperationsInput | bigint | number
    waveFin?: BigIntFieldUpdateOperationsInput | bigint | number
    uvMasterFin?: BigIntFieldUpdateOperationsInput | bigint | number
    autresFin?: BigIntFieldUpdateOperationsInput | bigint | number
    debutTotal?: BigIntFieldUpdateOperationsInput | bigint | number
    sortieTotal?: BigIntFieldUpdateOperationsInput | bigint | number
    grTotal?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailySnapshotUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    liquideDebut?: BigIntFieldUpdateOperationsInput | bigint | number
    orangeMoneyDebut?: BigIntFieldUpdateOperationsInput | bigint | number
    waveDebut?: BigIntFieldUpdateOperationsInput | bigint | number
    uvMasterDebut?: BigIntFieldUpdateOperationsInput | bigint | number
    autresDebut?: BigIntFieldUpdateOperationsInput | bigint | number
    liquideFin?: BigIntFieldUpdateOperationsInput | bigint | number
    orangeMoneyFin?: BigIntFieldUpdateOperationsInput | bigint | number
    waveFin?: BigIntFieldUpdateOperationsInput | bigint | number
    uvMasterFin?: BigIntFieldUpdateOperationsInput | bigint | number
    autresFin?: BigIntFieldUpdateOperationsInput | bigint | number
    debutTotal?: BigIntFieldUpdateOperationsInput | bigint | number
    sortieTotal?: BigIntFieldUpdateOperationsInput | bigint | number
    grTotal?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyPartnerChoiceUpdateWithoutPartenaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    superviseur?: UserUpdateOneRequiredWithoutChoixSuperviseurQuotidiensNestedInput
  }

  export type DailyPartnerChoiceUncheckedUpdateWithoutPartenaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    superviseurId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyPartnerChoiceUncheckedUpdateManyWithoutPartenaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    superviseurId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyPartnerChoiceUpdateWithoutSuperviseurInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    partenaire?: UserUpdateOneRequiredWithoutChoixPartenaireQuotidiensNestedInput
  }

  export type DailyPartnerChoiceUncheckedUpdateWithoutSuperviseurInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    partenaireId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyPartnerChoiceUncheckedUpdateManyWithoutSuperviseurInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    partenaireId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateManyCompteOrigineInput = {
    id?: string
    montant: bigint | number
    type: $Enums.TransactionType
    description?: string | null
    archived?: boolean | null
    archivedAt?: Date | string | null
    envoyeurId: string
    destinataireId?: string | null
    partenaireId?: string | null
    compteDestinationId?: string | null
    isValidated?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateManyCompteDestinationInput = {
    id?: string
    montant: bigint | number
    type: $Enums.TransactionType
    description?: string | null
    archived?: boolean | null
    archivedAt?: Date | string | null
    envoyeurId: string
    destinataireId?: string | null
    partenaireId?: string | null
    compteOrigineId?: string | null
    isValidated?: boolean
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionUpdateWithoutCompteOrigineInput = {
    id?: StringFieldUpdateOperationsInput | string
    montant?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isValidated?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    envoyeur?: UserUpdateOneRequiredWithoutTransactionsEnvoyeesNestedInput
    destinataire?: UserUpdateOneWithoutTransactionsRecuesNestedInput
    partenaire?: UserUpdateOneWithoutTransactionsPartenaireNestedInput
    compteDestination?: AccountUpdateOneWithoutTransactionsDestinationNestedInput
  }

  export type TransactionUncheckedUpdateWithoutCompteOrigineInput = {
    id?: StringFieldUpdateOperationsInput | string
    montant?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    envoyeurId?: StringFieldUpdateOperationsInput | string
    destinataireId?: NullableStringFieldUpdateOperationsInput | string | null
    partenaireId?: NullableStringFieldUpdateOperationsInput | string | null
    compteDestinationId?: NullableStringFieldUpdateOperationsInput | string | null
    isValidated?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyWithoutCompteOrigineInput = {
    id?: StringFieldUpdateOperationsInput | string
    montant?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    envoyeurId?: StringFieldUpdateOperationsInput | string
    destinataireId?: NullableStringFieldUpdateOperationsInput | string | null
    partenaireId?: NullableStringFieldUpdateOperationsInput | string | null
    compteDestinationId?: NullableStringFieldUpdateOperationsInput | string | null
    isValidated?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUpdateWithoutCompteDestinationInput = {
    id?: StringFieldUpdateOperationsInput | string
    montant?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isValidated?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    envoyeur?: UserUpdateOneRequiredWithoutTransactionsEnvoyeesNestedInput
    destinataire?: UserUpdateOneWithoutTransactionsRecuesNestedInput
    partenaire?: UserUpdateOneWithoutTransactionsPartenaireNestedInput
    compteOrigine?: AccountUpdateOneWithoutTransactionsOrigineNestedInput
  }

  export type TransactionUncheckedUpdateWithoutCompteDestinationInput = {
    id?: StringFieldUpdateOperationsInput | string
    montant?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    envoyeurId?: StringFieldUpdateOperationsInput | string
    destinataireId?: NullableStringFieldUpdateOperationsInput | string | null
    partenaireId?: NullableStringFieldUpdateOperationsInput | string | null
    compteOrigineId?: NullableStringFieldUpdateOperationsInput | string | null
    isValidated?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyWithoutCompteDestinationInput = {
    id?: StringFieldUpdateOperationsInput | string
    montant?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: NullableBoolFieldUpdateOperationsInput | boolean | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    envoyeurId?: StringFieldUpdateOperationsInput | string
    destinataireId?: NullableStringFieldUpdateOperationsInput | string | null
    partenaireId?: NullableStringFieldUpdateOperationsInput | string | null
    compteOrigineId?: NullableStringFieldUpdateOperationsInput | string | null
    isValidated?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}