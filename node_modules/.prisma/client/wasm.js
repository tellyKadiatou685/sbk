
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  telephone: 'telephone',
  code: 'code',
  codeClair: 'codeClair',
  nomComplet: 'nomComplet',
  adresse: 'adresse',
  photo: 'photo',
  role: 'role',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RegistrationRequestScalarFieldEnum = {
  id: 'id',
  telephone: 'telephone',
  nomComplet: 'nomComplet',
  adresse: 'adresse',
  message: 'message',
  status: 'status',
  codeGenere: 'codeGenere',
  reviewedById: 'reviewedById',
  reviewedAt: 'reviewedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DailyPartnerChoiceScalarFieldEnum = {
  id: 'id',
  date: 'date',
  partenaireId: 'partenaireId',
  superviseurId: 'superviseurId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  type: 'type',
  balance: 'balance',
  initialBalance: 'initialBalance',
  previousInitialBalance: 'previousInitialBalance',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  montant: 'montant',
  type: 'type',
  description: 'description',
  archived: 'archived',
  archivedAt: 'archivedAt',
  envoyeurId: 'envoyeurId',
  destinataireId: 'destinataireId',
  partenaireId: 'partenaireId',
  compteOrigineId: 'compteOrigineId',
  compteDestinationId: 'compteDestinationId',
  isValidated: 'isValidated',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  title: 'title',
  message: 'message',
  isRead: 'isRead',
  userId: 'userId',
  data: 'data',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DailySnapshotScalarFieldEnum = {
  id: 'id',
  date: 'date',
  userId: 'userId',
  liquideDebut: 'liquideDebut',
  orangeMoneyDebut: 'orangeMoneyDebut',
  waveDebut: 'waveDebut',
  uvMasterDebut: 'uvMasterDebut',
  autresDebut: 'autresDebut',
  liquideFin: 'liquideFin',
  orangeMoneyFin: 'orangeMoneyFin',
  waveFin: 'waveFin',
  uvMasterFin: 'uvMasterFin',
  autresFin: 'autresFin',
  debutTotal: 'debutTotal',
  sortieTotal: 'sortieTotal',
  grTotal: 'grTotal',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SystemConfigScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  SUPERVISEUR: 'SUPERVISEUR',
  PARTENAIRE: 'PARTENAIRE'
};

exports.UserStatus = exports.$Enums.UserStatus = {
  ACTIVE: 'ACTIVE',
  SUSPENDED: 'SUSPENDED',
  PENDING: 'PENDING',
  REJECTED: 'REJECTED'
};

exports.AccountType = exports.$Enums.AccountType = {
  LIQUIDE: 'LIQUIDE',
  ORANGE_MONEY: 'ORANGE_MONEY',
  WAVE: 'WAVE',
  UV_MASTER: 'UV_MASTER',
  AUTRES: 'AUTRES'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  DEPOT: 'DEPOT',
  RETRAIT: 'RETRAIT',
  TRANSFERT_ENVOYE: 'TRANSFERT_ENVOYE',
  TRANSFERT_RECU: 'TRANSFERT_RECU',
  ALLOCATION_UV_MASTER: 'ALLOCATION_UV_MASTER',
  DEBUT_JOURNEE: 'DEBUT_JOURNEE',
  FIN_JOURNEE: 'FIN_JOURNEE',
  AUDIT_MODIFICATION: 'AUDIT_MODIFICATION',
  AUDIT_SUPPRESSION: 'AUDIT_SUPPRESSION'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  DEPOT_PARTENAIRE: 'DEPOT_PARTENAIRE',
  RETRAIT_PARTENAIRE: 'RETRAIT_PARTENAIRE',
  TRANSFERT_SUPERVISEUR: 'TRANSFERT_SUPERVISEUR',
  DEMANDE_INSCRIPTION: 'DEMANDE_INSCRIPTION',
  CREATION_UTILISATEUR: 'CREATION_UTILISATEUR',
  ALLOCATION_UV_MASTER: 'ALLOCATION_UV_MASTER',
  DEBUT_JOURNEE: 'DEBUT_JOURNEE',
  FIN_JOURNEE: 'FIN_JOURNEE',
  AUDIT_MODIFICATION: 'AUDIT_MODIFICATION',
  AUDIT_SUPPRESSION: 'AUDIT_SUPPRESSION'
};

exports.Prisma.ModelName = {
  User: 'User',
  RegistrationRequest: 'RegistrationRequest',
  DailyPartnerChoice: 'DailyPartnerChoice',
  Account: 'Account',
  Transaction: 'Transaction',
  Notification: 'Notification',
  DailySnapshot: 'DailySnapshot',
  SystemConfig: 'SystemConfig'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
