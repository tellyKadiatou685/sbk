generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String                @id @default(cuid())
  telephone                  String                @unique
  code                       String
  codeClair                  String?
  nomComplet                 String
  adresse                    String
  photo                      String?
  role                       UserRole
  status                     UserStatus            @default(ACTIVE)
  createdAt                  DateTime              @default(now())
  updatedAt                  DateTime              @updatedAt
  accounts                   Account[]
  choixPartenaireQuotidiens  DailyPartnerChoice[]  @relation("PartenaireChoices")
  choixSuperviseurQuotidiens DailyPartnerChoice[]  @relation("SuperviseurChoices")
  dailySnapshots             DailySnapshot[]
  notifications              Notification[]
  demandesInscription        RegistrationRequest[]
  transactionsRecues         Transaction[]         @relation("TransactionDestinataire")
  transactionsEnvoyees       Transaction[]         @relation("TransactionEnvoyeur")
  transactionsPartenaire     Transaction[]         @relation("TransactionPartenaire")

  @@map("users")
}

model RegistrationRequest {
  id           String     @id @default(cuid())
  telephone    String     @unique
  nomComplet   String
  adresse      String
  message      String?
  status       UserStatus @default(PENDING)
  codeGenere   String?
  reviewedById String?
  reviewedAt   DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  reviewedBy   User?      @relation(fields: [reviewedById], references: [id], map: "reg_req_reviewed_by_fkey")

  @@map("registration_requests")
}

model DailyPartnerChoice {
  id            String   @id @default(cuid())
  date          DateTime @db.Date
  partenaireId  String
  superviseurId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  partenaire    User     @relation("PartenaireChoices", fields: [partenaireId], references: [id], map: "daily_partner_partenaire_fkey")
  superviseur   User     @relation("SuperviseurChoices", fields: [superviseurId], references: [id], map: "daily_partner_superviseur_fkey")

  @@unique([partenaireId, date])
  @@map("daily_partner_choices")
}

model Account {
  id                      String        @id @default(cuid())
  type                    AccountType
  balance                 BigInt        @default(0)
  initialBalance          BigInt        @default(0)
  previousInitialBalance  BigInt        @default(0)
  userId                  String
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  user                    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactionsDestination Transaction[] @relation("TransactionCompteDestination")
  transactionsOrigine     Transaction[] @relation("TransactionCompteOrigine")

  @@unique([userId, type])
  @@index([userId, type])
  @@index([type])
  @@index([balance])
  @@map("accounts")
}

model Transaction {
  id                  String          @id @default(cuid())
  montant             BigInt
  type                TransactionType
  description         String?
  archived            Boolean?        @default(false)
  archivedAt          DateTime?
  envoyeurId          String
  destinataireId      String?
  partenaireId        String?
  partenaireNom       String?
  compteOrigineId     String?
  compteDestinationId String?
  isValidated         Boolean         @default(true)
  metadata            String?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  compteDestination   Account?        @relation("TransactionCompteDestination", fields: [compteDestinationId], references: [id], map: "transaction_compte_destination_fkey")
  compteOrigine       Account?        @relation("TransactionCompteOrigine", fields: [compteOrigineId], references: [id], map: "transaction_compte_origine_fkey")
  destinataire        User?           @relation("TransactionDestinataire", fields: [destinataireId], references: [id], map: "transaction_destinataire_fkey")
  envoyeur            User            @relation("TransactionEnvoyeur", fields: [envoyeurId], references: [id], map: "transaction_envoyeur_fkey")
  partenaire          User?           @relation("TransactionPartenaire", fields: [partenaireId], references: [id], map: "transaction_partenaire_fkey")

  @@index([type, createdAt])
  @@index([envoyeurId, createdAt])
  @@index([destinataireId, createdAt])
  @@index([partenaireId, createdAt])
  @@index([createdAt])
  @@index([type, destinataireId, createdAt])
  @@map("transactions")
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  userId    String
  data      Json?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade, map: "notification_user_fkey")

  @@index([userId, isRead, createdAt])
  @@index([createdAt])
  @@map("notifications")
}

model DailySnapshot {
  id               String   @id @default(cuid())
  date             DateTime @db.Date
  userId           String
  liquideDebut     BigInt   @default(0)
  orangeMoneyDebut BigInt   @default(0)
  waveDebut        BigInt   @default(0)
  uvMasterDebut    BigInt   @default(0)
  autresDebut      BigInt   @default(0)
  liquideFin       BigInt   @default(0)
  orangeMoneyFin   BigInt   @default(0)
  waveFin          BigInt   @default(0)
  uvMasterFin      BigInt   @default(0)
  autresFin        BigInt   @default(0)
  debutTotal       BigInt   @default(0)
  sortieTotal      BigInt   @default(0)
  grTotal          BigInt   @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([date])
  @@index([userId, date])
  @@map("daily_snapshots")
}

model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
  @@map("system_config")
}

enum UserRole {
  ADMIN
  SUPERVISEUR
  PARTENAIRE
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  PENDING
  REJECTED
}

enum TransactionType {
  DEPOT
  RETRAIT
  TRANSFERT_ENVOYE
  TRANSFERT_RECU
  ALLOCATION_UV_MASTER
  DEBUT_JOURNEE
  FIN_JOURNEE
  AUDIT_MODIFICATION
  AUDIT_SUPPRESSION
}

enum AccountType {
  LIQUIDE
  ORANGE_MONEY
  WAVE
  UV_MASTER
  AUTRES
}

enum NotificationType {
  DEPOT_PARTENAIRE
  RETRAIT_PARTENAIRE
  TRANSFERT_SUPERVISEUR
  DEMANDE_INSCRIPTION
  CREATION_UTILISATEUR
  ALLOCATION_UV_MASTER
  DEBUT_JOURNEE
  FIN_JOURNEE
  AUDIT_MODIFICATION
  AUDIT_SUPPRESSION
}
