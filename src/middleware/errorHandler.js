// src/middleware/errorHandler.js - Gestionnaire d'erreurs Prisma s√©curis√©

export const handlePrismaError = (error, req, res, next) => {
    console.error('üî• Erreur Prisma d√©tect√©e:', {
      code: error.code,
      message: error.message,
      meta: error.meta,
      timestamp: new Date().toISOString(),
      path: req.path,
      method: req.method,
      userId: req.user?.id || 'Non authentifi√©'
    });
  
    // Mapping des codes d'erreur Prisma vers des messages utilisateur
    const prismaErrorMap = {
      // Erreurs de contrainte de base de donn√©es
      'P2002': {
        status: 409,
        userMessage: 'Cette donn√©e existe d√©j√† dans le syst√®me',
        details: 'Conflit de donn√©es - valeur d√©j√† utilis√©e'
      },
      
      // Enregistrement non trouv√©
      'P2025': {
        status: 404,
        userMessage: '√âl√©ment non trouv√©',
        details: 'L\'enregistrement demand√© n\'existe pas'
      },
      
      // Contrainte de cl√© √©trang√®re
      'P2003': {
        status: 400,
        userMessage: 'Donn√©es li√©es manquantes',
        details: 'R√©f√©rence vers un √©l√©ment qui n\'existe pas'
      },
      
      // Violation de contrainte
      'P2004': {
        status: 400,
        userMessage: 'Contrainte de base de donn√©es viol√©e',
        details: 'Les donn√©es ne respectent pas les r√®gles de la base'
      },
      
      // Connexion √† la base de donn√©es √©chou√©e
      'P1001': {
        status: 503,
        userMessage: 'Service temporairement indisponible',
        details: 'Probl√®me de connexion √† la base de donn√©es'
      },
      
      // Timeout de la base de donn√©es
      'P1008': {
        status: 504,
        userMessage: 'Op√©ration trop longue, veuillez r√©essayer',
        details: 'Timeout de la base de donn√©es'
      },
      
      // Base de donn√©es n'existe pas
      'P1003': {
        status: 503,
        userMessage: 'Service indisponible',
        details: 'Configuration de base de donn√©es incorrecte'
      },
      
      // Erreur d'authentification DB
      'P1002': {
        status: 503,
        userMessage: 'Service temporairement indisponible',
        details: 'Probl√®me d\'authentification base de donn√©es'
      },
      
      // Champ requis manquant
      'P2011': {
        status: 400,
        userMessage: 'Donn√©es requises manquantes',
        details: 'Un champ obligatoire n\'est pas fourni'
      },
      
      // Type de donn√©es incorrect
      'P2006': {
        status: 400,
        userMessage: 'Format de donn√©es incorrect',
        details: 'Le type de donn√©e fourni est invalide'
      }
    };
  
    // V√©rifier si c'est une erreur Prisma
    if (error.code && prismaErrorMap[error.code]) {
      const errorInfo = prismaErrorMap[error.code];
      
      return res.status(errorInfo.status).json({
        success: false,
        message: errorInfo.userMessage,
        error: 'DATABASE_ERROR',
        ...(process.env.NODE_ENV === 'development' && {
          debug: {
            prismaCode: error.code,
            details: errorInfo.details,
            meta: error.meta
          }
        })
      });
    }
  
    // Erreur Prisma g√©n√©rique (code non mapp√©)
    if (error.name?.includes('Prisma') || error.code?.startsWith('P')) {
      console.error('‚ö†Ô∏è Code Prisma non mapp√©:', error.code);
      
      return res.status(500).json({
        success: false,
        message: 'Erreur de base de donn√©es',
        error: 'DATABASE_ERROR',
        ...(process.env.NODE_ENV === 'development' && {
          debug: {
            prismaCode: error.code,
            rawMessage: error.message
          }
        })
      });
    }
  
    // Pas une erreur Prisma, passer au middleware suivant
    next(error);
  };
  
  // Gestionnaire d'erreurs global am√©lior√©
  export const globalErrorHandler = (err, req, res, next) => {
    console.error('‚ùå Erreur serveur globale:', {
      error: err.message,
      stack: process.env.NODE_ENV === 'development' ? err.stack : undefined,
      path: req.path,
      method: req.method,
      userId: req.user?.id || 'Non authentifi√©',
      timestamp: new Date().toISOString()
    });
  
    // Erreur CORS
    if (err.message.includes('CORS') || err.message.includes('Non autoris√© par CORS')) {
      return res.status(403).json({
        success: false,
        message: 'Acc√®s refus√© par la politique CORS',
        error: 'CORS_ERROR'
      });
    }
  
    // Erreur de parsing JSON
    if (err.type === 'entity.parse.failed') {
      return res.status(400).json({
        success: false,
        message: 'Format de donn√©es invalide',
        error: 'INVALID_JSON'
      });
    }
  
    // Erreur de taille de payload
    if (err.type === 'entity.too.large') {
      return res.status(413).json({
        success: false,
        message: 'Fichier ou donn√©es trop volumineux',
        error: 'PAYLOAD_TOO_LARGE'
      });
    }
  
    // Erreur JWT
    if (err.name === 'JsonWebTokenError') {
      return res.status(401).json({
        success: false,
        message: 'Token d\'authentification invalide',
        error: 'INVALID_TOKEN'
      });
    }
  
    if (err.name === 'TokenExpiredError') {
      return res.status(401).json({
        success: false,
        message: 'Session expir√©e, veuillez vous reconnecter',
        error: 'TOKEN_EXPIRED'
      });
    }
  
    // Erreur de validation
    if (err.name === 'ValidationError') {
      return res.status(400).json({
        success: false,
        message: 'Donn√©es de validation incorrectes',
        error: 'VALIDATION_ERROR',
        details: err.details || 'Erreur de validation'
      });
    }
  
    // Erreur r√©seau/connexion
    if (err.code === 'ECONNREFUSED' || err.code === 'ENOTFOUND') {
      return res.status(503).json({
        success: false,
        message: 'Service temporairement indisponible',
        error: 'SERVICE_UNAVAILABLE'
      });
    }
  
    // Erreur g√©n√©rique - ne jamais exposer les d√©tails en production
    res.status(500).json({
      success: false,
      message: 'Une erreur interne s\'est produite',
      error: 'INTERNAL_SERVER_ERROR',
      ...(process.env.NODE_ENV === 'development' && {
        debug: {
          message: err.message,
          stack: err.stack
        }
      })
    });
  };